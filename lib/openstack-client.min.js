!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("openstack-client",[],e):"object"==typeof exports?exports["openstack-client"]=e():t["openstack-client"]=e()}("undefined"!=typeof self?self:this,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=134)}([function(t,e,n){var r=n(1),o=n(7),i=n(16),u=n(12),a=n(20),c=function(t,e,n){var s,f,l,h,p=t&c.F,v=t&c.G,d=t&c.S,g=t&c.P,y=t&c.B,m=v?r:d?r[e]||(r[e]={}):(r[e]||{}).prototype,w=v?o:o[e]||(o[e]={}),b=w.prototype||(w.prototype={});for(s in v&&(n=e),n)l=((f=!p&&m&&void 0!==m[s])?m:n)[s],h=y&&f?a(l,r):g&&"function"==typeof l?a(Function.call,l):l,m&&u(m,s,l,t&c.U),w[s]!=l&&i(w,s,h),g&&b[s]!=l&&(b[s]=l)};r.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(51)("wks"),o=n(32),i=n(1).Symbol,u="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=u&&i[t]||(u?i:o)("Symbol."+t))}).store=r},function(t,e,n){var r=n(22),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e){var n=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},function(t,e,n){t.exports=!n(2)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(3),o=n(92),i=n(29),u=Object.defineProperty;e.f=n(8)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(27);t.exports=function(t){return Object(r(t))}},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function i(t){var e="function"==typeof Map?new Map:void 0;return(i=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return u(t,arguments,s(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),c(r,t)})(t)}function u(t,e,n){return(u=a()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&c(o,n.prototype),o}).apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function s(t){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}n.d(e,"a",(function(){return f}));var f=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}(r,t);var e,n=(e=r,function(){var t,n=s(e);if(a()){var r=s(this).constructor;t=Reflect.construct(n,arguments,r)}else t=n.apply(this,arguments);return o(this,t)});function r(t,e){var o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),(o=n.call(this,t)).stack=(new Error).stack,e&&(e instanceof r&&(o.code=e.code,o.data=e.data),e.response&&(o.code=e.response.status,o.data=e.response.data)),o}return r}(i(Error))},function(t,e,n){var r=n(1),o=n(16),i=n(15),u=n(32)("src"),a=n(139),c=(""+a).split("toString");n(7).inspectSource=function(t){return a.call(t)},(t.exports=function(t,e,n,a){var s="function"==typeof n;s&&(i(n,"name")||o(n,"name",e)),t[e]!==n&&(s&&(i(n,u)||o(n,u,t[e]?""+t[e]:c.join(String(e)))),t===r?t[e]=n:a?t[e]?t[e]=n:o(t,e,n):(delete t[e],o(t,e,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[u]||a.call(this)}))},function(t,e,n){var r=n(0),o=n(2),i=n(27),u=/"/g,a=function(t,e,n,r){var o=String(i(t)),a="<"+e;return""!==n&&(a+=" "+n+'="'+String(r).replace(u,"&quot;")+'"'),a+">"+o+"</"+e+">"};t.exports=function(t,e){var n={};n[t]=e(a),r(r.P+r.F*o((function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3})),"String",n)}},function(t,e,n){"use strict";var r=n(125),o=Object.prototype.toString;function i(t){return"[object Array]"===o.call(t)}function u(t){return void 0===t}function a(t){return null!==t&&"object"==typeof t}function c(t){return"[object Function]"===o.call(t)}function s(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),i(t))for(var n=0,r=t.length;n<r;n++)e.call(null,t[n],n,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.call(null,t[o],o,t)}t.exports={isArray:i,isArrayBuffer:function(t){return"[object ArrayBuffer]"===o.call(t)},isBuffer:function(t){return null!==t&&!u(t)&&null!==t.constructor&&!u(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:a,isUndefined:u,isDate:function(t){return"[object Date]"===o.call(t)},isFile:function(t){return"[object File]"===o.call(t)},isBlob:function(t){return"[object Blob]"===o.call(t)},isFunction:c,isStream:function(t){return a(t)&&c(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:s,merge:function t(){var e={};function n(n,r){"object"==typeof e[r]&&"object"==typeof n?e[r]=t(e[r],n):e[r]=n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return e},deepMerge:function t(){var e={};function n(n,r){"object"==typeof e[r]&&"object"==typeof n?e[r]=t(e[r],n):e[r]="object"==typeof n?t({},n):n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return e},extend:function(t,e,n){return s(e,(function(e,o){t[o]=n&&"function"==typeof e?r(e,n):e})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(9),o=n(31);t.exports=n(8)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(47),o=n(27);t.exports=function(t){return r(o(t))}},function(t,e,n){"use strict";function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t){return t&&Object.keys(t).length>0?"?"+Object.keys(t).map((function(e){return encodeURIComponent(e)+"="+encodeURIComponent(t[e])})).join("&"):""}function u(t){return t&&"object"===o(t)&&!Array.isArray(t)&&null!==t}function a(t,e){var n=Object.assign({},t);return u(t)&&u(e)&&Object.keys(e).forEach((function(o){u(e[o])&&o in n?n[o]=a(t[o],e[o]):Object.assign(n,r({},o,e[o]))})),n}n.d(e,"b",(function(){return i})),n.d(e,"a",(function(){return a}))},function(t,e,n){"use strict";var r=n(2);t.exports=function(t,e){return!!t&&r((function(){e?t.call(null,(function(){}),1):t.call(null)}))}},function(t,e,n){var r=n(21);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(48),o=n(31),i=n(17),u=n(29),a=n(15),c=n(92),s=Object.getOwnPropertyDescriptor;e.f=n(8)?s:function(t,e){if(t=i(t),e=u(e,!0),c)try{return s(t,e)}catch(t){}if(a(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e,n){var r=n(0),o=n(7),i=n(2);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*i((function(){n(1)})),"Object",u)}},function(t,e,n){var r=n(20),o=n(47),i=n(10),u=n(6),a=n(108);t.exports=function(t,e){var n=1==t,c=2==t,s=3==t,f=4==t,l=6==t,h=5==t||l,p=e||a;return function(e,a,v){for(var d,g,y=i(e),m=o(y),w=r(a,v,3),b=u(m.length),x=0,S=n?p(e,b):c?p(e,0):void 0;b>x;x++)if((h||x in m)&&(g=w(d=m[x],x,y),t))if(n)S[x]=g;else if(g)switch(t){case 3:return!0;case 5:return d;case 6:return x;case 2:S.push(d)}else if(f)return!1;return l?-1:s||f?f:S}}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){"use strict";if(n(8)){var r=n(33),o=n(1),i=n(2),u=n(0),a=n(62),c=n(87),s=n(20),f=n(45),l=n(31),h=n(16),p=n(46),v=n(22),d=n(6),g=n(119),y=n(35),m=n(29),w=n(15),b=n(49),x=n(4),S=n(10),_=n(79),E=n(36),k=n(38),R=n(37).f,O=n(81),A=n(32),P=n(5),T=n(25),F=n(52),I=n(50),j=n(83),C=n(43),N=n(55),M=n(44),L=n(82),B=n(110),U=n(9),D=n(23),G=U.f,Y=D.f,q=o.RangeError,W=o.TypeError,V=o.Uint8Array,z=Array.prototype,$=c.ArrayBuffer,H=c.DataView,K=T(0),X=T(2),J=T(3),Z=T(4),Q=T(5),tt=T(6),et=F(!0),nt=F(!1),rt=j.values,ot=j.keys,it=j.entries,ut=z.lastIndexOf,at=z.reduce,ct=z.reduceRight,st=z.join,ft=z.sort,lt=z.slice,ht=z.toString,pt=z.toLocaleString,vt=P("iterator"),dt=P("toStringTag"),gt=A("typed_constructor"),yt=A("def_constructor"),mt=a.CONSTR,wt=a.TYPED,bt=a.VIEW,xt=T(1,(function(t,e){return Rt(I(t,t[yt]),e)})),St=i((function(){return 1===new V(new Uint16Array([1]).buffer)[0]})),_t=!!V&&!!V.prototype.set&&i((function(){new V(1).set({})})),Et=function(t,e){var n=v(t);if(n<0||n%e)throw q("Wrong offset!");return n},kt=function(t){if(x(t)&&wt in t)return t;throw W(t+" is not a typed array!")},Rt=function(t,e){if(!x(t)||!(gt in t))throw W("It is not a typed array constructor!");return new t(e)},Ot=function(t,e){return At(I(t,t[yt]),e)},At=function(t,e){for(var n=0,r=e.length,o=Rt(t,r);r>n;)o[n]=e[n++];return o},Pt=function(t,e,n){G(t,e,{get:function(){return this._d[n]}})},Tt=function(t){var e,n,r,o,i,u,a=S(t),c=arguments.length,f=c>1?arguments[1]:void 0,l=void 0!==f,h=O(a);if(null!=h&&!_(h)){for(u=h.call(a),r=[],e=0;!(i=u.next()).done;e++)r.push(i.value);a=r}for(l&&c>2&&(f=s(f,arguments[2],2)),e=0,n=d(a.length),o=Rt(this,n);n>e;e++)o[e]=l?f(a[e],e):a[e];return o},Ft=function(){for(var t=0,e=arguments.length,n=Rt(this,e);e>t;)n[t]=arguments[t++];return n},It=!!V&&i((function(){pt.call(new V(1))})),jt=function(){return pt.apply(It?lt.call(kt(this)):kt(this),arguments)},Ct={copyWithin:function(t,e){return B.call(kt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(kt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return L.apply(kt(this),arguments)},filter:function(t){return Ot(this,X(kt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(kt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(kt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){K(kt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return nt(kt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(kt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return st.apply(kt(this),arguments)},lastIndexOf:function(t){return ut.apply(kt(this),arguments)},map:function(t){return xt(kt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return at.apply(kt(this),arguments)},reduceRight:function(t){return ct.apply(kt(this),arguments)},reverse:function(){for(var t,e=kt(this).length,n=Math.floor(e/2),r=0;r<n;)t=this[r],this[r++]=this[--e],this[e]=t;return this},some:function(t){return J(kt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(kt(this),t)},subarray:function(t,e){var n=kt(this),r=n.length,o=y(t,r);return new(I(n,n[yt]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,d((void 0===e?r:y(e,r))-o))}},Nt=function(t,e){return Ot(this,lt.call(kt(this),t,e))},Mt=function(t){kt(this);var e=Et(arguments[1],1),n=this.length,r=S(t),o=d(r.length),i=0;if(o+e>n)throw q("Wrong length!");for(;i<o;)this[e+i]=r[i++]},Lt={entries:function(){return it.call(kt(this))},keys:function(){return ot.call(kt(this))},values:function(){return rt.call(kt(this))}},Bt=function(t,e){return x(t)&&t[wt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Ut=function(t,e){return Bt(t,e=m(e,!0))?l(2,t[e]):Y(t,e)},Dt=function(t,e,n){return!(Bt(t,e=m(e,!0))&&x(n)&&w(n,"value"))||w(n,"get")||w(n,"set")||n.configurable||w(n,"writable")&&!n.writable||w(n,"enumerable")&&!n.enumerable?G(t,e,n):(t[e]=n.value,t)};mt||(D.f=Ut,U.f=Dt),u(u.S+u.F*!mt,"Object",{getOwnPropertyDescriptor:Ut,defineProperty:Dt}),i((function(){ht.call({})}))&&(ht=pt=function(){return st.call(this)});var Gt=p({},Ct);p(Gt,Lt),h(Gt,vt,Lt.values),p(Gt,{slice:Nt,set:Mt,constructor:function(){},toString:ht,toLocaleString:jt}),Pt(Gt,"buffer","b"),Pt(Gt,"byteOffset","o"),Pt(Gt,"byteLength","l"),Pt(Gt,"length","e"),G(Gt,dt,{get:function(){return this[wt]}}),t.exports=function(t,e,n,c){var s=t+((c=!!c)?"Clamped":"")+"Array",l="get"+t,p="set"+t,v=o[s],y=v||{},m=v&&k(v),w=!v||!a.ABV,S={},_=v&&v.prototype,O=function(t,n){G(t,n,{get:function(){return function(t,n){var r=t._d;return r.v[l](n*e+r.o,St)}(this,n)},set:function(t){return function(t,n,r){var o=t._d;c&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[p](n*e+o.o,r,St)}(this,n,t)},enumerable:!0})};w?(v=n((function(t,n,r,o){f(t,v,s,"_d");var i,u,a,c,l=0,p=0;if(x(n)){if(!(n instanceof $||"ArrayBuffer"==(c=b(n))||"SharedArrayBuffer"==c))return wt in n?At(v,n):Tt.call(v,n);i=n,p=Et(r,e);var y=n.byteLength;if(void 0===o){if(y%e)throw q("Wrong length!");if((u=y-p)<0)throw q("Wrong length!")}else if((u=d(o)*e)+p>y)throw q("Wrong length!");a=u/e}else a=g(n),i=new $(u=a*e);for(h(t,"_d",{b:i,o:p,l:u,e:a,v:new H(i)});l<a;)O(t,l++)})),_=v.prototype=E(Gt),h(_,"constructor",v)):i((function(){v(1)}))&&i((function(){new v(-1)}))&&N((function(t){new v,new v(null),new v(1.5),new v(t)}),!0)||(v=n((function(t,n,r,o){var i;return f(t,v,s),x(n)?n instanceof $||"ArrayBuffer"==(i=b(n))||"SharedArrayBuffer"==i?void 0!==o?new y(n,Et(r,e),o):void 0!==r?new y(n,Et(r,e)):new y(n):wt in n?At(v,n):Tt.call(v,n):new y(g(n))})),K(m!==Function.prototype?R(y).concat(R(m)):R(y),(function(t){t in v||h(v,t,y[t])})),v.prototype=_,r||(_.constructor=v));var A=_[vt],P=!!A&&("values"==A.name||null==A.name),T=Lt.values;h(v,gt,!0),h(_,wt,s),h(_,bt,!0),h(_,yt,v),(c?new v(1)[dt]==s:dt in _)||G(_,dt,{get:function(){return s}}),S[s]=v,u(u.G+u.W+u.F*(v!=y),S),u(u.S,s,{BYTES_PER_ELEMENT:e}),u(u.S+u.F*i((function(){y.of.call(v,1)})),s,{from:Tt,of:Ft}),"BYTES_PER_ELEMENT"in _||h(_,"BYTES_PER_ELEMENT",e),u(u.P,s,Ct),M(s),u(u.P+u.F*_t,s,{set:Mt}),u(u.P+u.F*!P,s,Lt),r||_.toString==ht||(_.toString=ht),u(u.P+u.F*i((function(){new v(1).slice()})),s,{slice:Nt}),u(u.P+u.F*(i((function(){return[1,2].toLocaleString()!=new v([1,2]).toLocaleString()}))||!i((function(){_.toLocaleString.call([1,2])}))),s,{toLocaleString:jt}),C[s]=P?A:T,r||P||h(_,vt,T)}}else t.exports=function(){}},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(32)("meta"),o=n(4),i=n(15),u=n(9).f,a=0,c=Object.isExtensible||function(){return!0},s=!n(2)((function(){return c(Object.preventExtensions({}))})),f=function(t){u(t,r,{value:{i:"O"+ ++a,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!c(t))return"F";if(!e)return"E";f(t)}return t[r].i},getWeak:function(t,e){if(!i(t,r)){if(!c(t))return!0;if(!e)return!1;f(t)}return t[r].w},onFreeze:function(t){return s&&l.NEED&&c(t)&&!i(t,r)&&f(t),t}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e){t.exports=!1},function(t,e,n){var r=n(94),o=n(66);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){var r=n(22),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},function(t,e,n){var r=n(3),o=n(95),i=n(66),u=n(65)("IE_PROTO"),a=function(){},c=function(){var t,e=n(63)("iframe"),r=i.length;for(e.style.display="none",n(67).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[i[r]];return c()};t.exports=Object.create||function(t,e){var n;return null!==t?(a.prototype=r(t),n=new a,a.prototype=null,n[u]=t):n=c(),void 0===e?n:o(n,e)}},function(t,e,n){var r=n(94),o=n(66).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){var r=n(15),o=n(10),i=n(65)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){var r=n(5)("unscopables"),o=Array.prototype;null==o[r]&&n(16)(o,r,{}),t.exports=function(t){o[r][t]=!0}},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,n){var r=n(9).f,o=n(15),i=n(5)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(0),o=n(27),i=n(2),u=n(69),a="["+u+"]",c=RegExp("^"+a+a+"*"),s=RegExp(a+a+"*$"),f=function(t,e,n){var o={},a=i((function(){return!!u[t]()||"​"!="​"[t]()})),c=o[t]=a?e(l):u[t];n&&(o[n]=c),r(r.P+r.F*a,"String",o)},l=f.trim=function(t,e){return t=String(o(t)),1&e&&(t=t.replace(c,"")),2&e&&(t=t.replace(s,"")),t};t.exports=f},function(t,e){t.exports={}},function(t,e,n){"use strict";var r=n(1),o=n(9),i=n(8),u=n(5)("species");t.exports=function(t){var e=r[t];i&&e&&!e[u]&&o.f(e,u,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){var r=n(12);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},function(t,e,n){var r=n(26);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var r=n(26),o=n(5)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:i?r(e):"Object"==(u=r(e))&&"function"==typeof e.callee?"Arguments":u}},function(t,e,n){var r=n(3),o=n(21),i=n(5)("species");t.exports=function(t,e){var n,u=r(t).constructor;return void 0===u||null==(n=r(u)[i])?e:o(n)}},function(t,e,n){var r=n(7),o=n(1),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(33)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(17),o=n(6),i=n(35);t.exports=function(t){return function(e,n,u){var a,c=r(e),s=o(c.length),f=i(u,s);if(t&&n!=n){for(;s>f;)if((a=c[f++])!=a)return!0}else for(;s>f;f++)if((t||f in c)&&c[f]===n)return t||f||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(26);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(5)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:n=!0}},i[r]=function(){return u},t(i)}catch(t){}return n}},function(t,e,n){"use strict";var r=n(3);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){"use strict";var r=n(49),o=RegExp.prototype.exec;t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var i=n.call(t,e);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,e)}},function(t,e,n){"use strict";n(112);var r=n(12),o=n(16),i=n(2),u=n(27),a=n(5),c=n(84),s=a("species"),f=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();t.exports=function(t,e,n){var h=a(t),p=!i((function(){var e={};return e[h]=function(){return 7},7!=""[t](e)})),v=p?!i((function(){var e=!1,n=/a/;return n.exec=function(){return e=!0,null},"split"===t&&(n.constructor={},n.constructor[s]=function(){return n}),n[h](""),!e})):void 0;if(!p||!v||"replace"===t&&!f||"split"===t&&!l){var d=/./[h],g=n(u,h,""[t],(function(t,e,n,r,o){return e.exec===c?p&&!o?{done:!0,value:d.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}})),y=g[0],m=g[1];r(String.prototype,t,y),o(RegExp.prototype,h,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)})}}},function(t,e,n){var r=n(20),o=n(107),i=n(79),u=n(3),a=n(6),c=n(81),s={},f={};(e=t.exports=function(t,e,n,l,h){var p,v,d,g,y=h?function(){return t}:c(t),m=r(n,l,e?2:1),w=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(i(y)){for(p=a(t.length);p>w;w++)if((g=e?m(u(v=t[w])[0],v[1]):m(t[w]))===s||g===f)return g}else for(d=y.call(t);!(v=d.next()).done;)if((g=o(d,m,v.value,e))===s||g===f)return g}).BREAK=s,e.RETURN=f},function(t,e,n){var r=n(1).navigator;t.exports=r&&r.userAgent||""},function(t,e,n){"use strict";var r=n(1),o=n(0),i=n(12),u=n(46),a=n(30),c=n(59),s=n(45),f=n(4),l=n(2),h=n(55),p=n(41),v=n(70);t.exports=function(t,e,n,d,g,y){var m=r[t],w=m,b=g?"set":"add",x=w&&w.prototype,S={},_=function(t){var e=x[t];i(x,t,"delete"==t||"has"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!f(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof w&&(y||x.forEach&&!l((function(){(new w).entries().next()})))){var E=new w,k=E[b](y?{}:-0,1)!=E,R=l((function(){E.has(1)})),O=h((function(t){new w(t)})),A=!y&&l((function(){for(var t=new w,e=5;e--;)t[b](e,e);return!t.has(-0)}));O||((w=e((function(e,n){s(e,w,t);var r=v(new m,e,w);return null!=n&&c(n,g,r[b],r),r}))).prototype=x,x.constructor=w),(R||A)&&(_("delete"),_("has"),g&&_("get")),(A||k)&&_(b),y&&x.clear&&delete x.clear}else w=d.getConstructor(e,t,g,b),u(w.prototype,n),a.NEED=!0;return p(w,t),S[t]=w,o(o.G+o.W+o.F*(w!=m),S),y||d.setStrong(w,t,g),w}},function(t,e,n){for(var r,o=n(1),i=n(16),u=n(32),a=u("typed_array"),c=u("view"),s=!(!o.ArrayBuffer||!o.DataView),f=s,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=o[h[l++]])?(i(r.prototype,a,!0),i(r.prototype,c,!0)):f=!1;t.exports={ABV:s,CONSTR:f,TYPED:a,VIEW:c}},function(t,e,n){var r=n(4),o=n(1).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){e.f=n(5)},function(t,e,n){var r=n(51)("keys"),o=n(32);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(1).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(4),o=n(3),i=function(t,e){if(o(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(20)(Function.call,n(23).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return i(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:i}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,n){var r=n(4),o=n(68).set;t.exports=function(t,e,n){var i,u=e.constructor;return u!==n&&"function"==typeof u&&(i=u.prototype)!==n.prototype&&r(i)&&o&&o(t,i),t}},function(t,e,n){"use strict";var r=n(22),o=n(27);t.exports=function(t){var e=String(o(this)),n="",i=r(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(e+=e))1&i&&(n+=e);return n}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var n=Math.expm1;t.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:n},function(t,e,n){var r=n(22),o=n(27);t.exports=function(t){return function(e,n){var i,u,a=String(o(e)),c=r(n),s=a.length;return c<0||c>=s?t?"":void 0:(i=a.charCodeAt(c))<55296||i>56319||c+1===s||(u=a.charCodeAt(c+1))<56320||u>57343?t?a.charAt(c):i:t?a.slice(c,c+2):u-56320+(i-55296<<10)+65536}}},function(t,e,n){"use strict";var r=n(33),o=n(0),i=n(12),u=n(16),a=n(43),c=n(106),s=n(41),f=n(38),l=n(5)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,n,v,d,g,y){c(n,e,v);var m,w,b,x=function(t){if(!h&&t in k)return k[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},S=e+" Iterator",_="values"==d,E=!1,k=t.prototype,R=k[l]||k["@@iterator"]||d&&k[d],O=R||x(d),A=d?_?x("entries"):O:void 0,P="Array"==e&&k.entries||R;if(P&&(b=f(P.call(new t)))!==Object.prototype&&b.next&&(s(b,S,!0),r||"function"==typeof b[l]||u(b,l,p)),_&&R&&"values"!==R.name&&(E=!0,O=function(){return R.call(this)}),r&&!y||!h&&!E&&k[l]||u(k,l,O),a[e]=O,a[S]=p,d)if(m={values:_?O:x("values"),keys:g?O:x("keys"),entries:A},y)for(w in m)w in k||i(k,w,m[w]);else o(o.P+o.F*(h||E),e,m);return m}},function(t,e,n){var r=n(77),o=n(27);t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(t))}},function(t,e,n){var r=n(4),o=n(26),i=n(5)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},function(t,e,n){var r=n(5)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,n){var r=n(43),o=n(5)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,e,n){"use strict";var r=n(9),o=n(31);t.exports=function(t,e,n){e in t?r.f(t,e,o(0,n)):t[e]=n}},function(t,e,n){var r=n(49),o=n(5)("iterator"),i=n(43);t.exports=n(7).getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,e,n){"use strict";var r=n(10),o=n(35),i=n(6);t.exports=function(t){for(var e=r(this),n=i(e.length),u=arguments.length,a=o(u>1?arguments[1]:void 0,n),c=u>2?arguments[2]:void 0,s=void 0===c?n:o(c,n);s>a;)e[a++]=t;return e}},function(t,e,n){"use strict";var r=n(39),o=n(111),i=n(43),u=n(17);t.exports=n(75)(Array,"Array",(function(t,e){this._t=u(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,e,n){"use strict";var r,o,i=n(56),u=RegExp.prototype.exec,a=String.prototype.replace,c=u,s=(r=/a/,o=/b*/g,u.call(r,"a"),u.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),f=void 0!==/()??/.exec("")[1];(s||f)&&(c=function(t){var e,n,r,o,c=this;return f&&(n=new RegExp("^"+c.source+"$(?!\\s)",i.call(c))),s&&(e=c.lastIndex),r=u.call(c,t),s&&r&&(c.lastIndex=c.global?r.index+r[0].length:e),f&&r&&r.length>1&&a.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),t.exports=c},function(t,e,n){"use strict";var r=n(74)(!0);t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},function(t,e,n){var r,o,i,u=n(20),a=n(100),c=n(67),s=n(63),f=n(1),l=f.process,h=f.setImmediate,p=f.clearImmediate,v=f.MessageChannel,d=f.Dispatch,g=0,y={},m=function(){var t=+this;if(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},w=function(t){m.call(t.data)};h&&p||(h=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return y[++g]=function(){a("function"==typeof t?t:Function(t),e)},r(g),g},p=function(t){delete y[t]},"process"==n(26)(l)?r=function(t){l.nextTick(u(m,t,1))}:d&&d.now?r=function(t){d.now(u(m,t,1))}:v?(i=(o=new v).port2,o.port1.onmessage=w,r=u(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",w,!1)):r="onreadystatechange"in s("script")?function(t){c.appendChild(s("script")).onreadystatechange=function(){c.removeChild(this),m.call(t)}}:function(t){setTimeout(u(m,t,1),0)}),t.exports={set:h,clear:p}},function(t,e,n){"use strict";var r=n(1),o=n(8),i=n(33),u=n(62),a=n(16),c=n(46),s=n(2),f=n(45),l=n(22),h=n(6),p=n(119),v=n(37).f,d=n(9).f,g=n(82),y=n(41),m=r.ArrayBuffer,w=r.DataView,b=r.Math,x=r.RangeError,S=r.Infinity,_=m,E=b.abs,k=b.pow,R=b.floor,O=b.log,A=b.LN2,P=o?"_b":"buffer",T=o?"_l":"byteLength",F=o?"_o":"byteOffset";function I(t,e,n){var r,o,i,u=new Array(n),a=8*n-e-1,c=(1<<a)-1,s=c>>1,f=23===e?k(2,-24)-k(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=E(t))!=t||t===S?(o=t!=t?1:0,r=c):(r=R(O(t)/A),t*(i=k(2,-r))<1&&(r--,i*=2),(t+=r+s>=1?f/i:f*k(2,1-s))*i>=2&&(r++,i/=2),r+s>=c?(o=0,r=c):r+s>=1?(o=(t*i-1)*k(2,e),r+=s):(o=t*k(2,s-1)*k(2,e),r=0));e>=8;u[l++]=255&o,o/=256,e-=8);for(r=r<<e|o,a+=e;a>0;u[l++]=255&r,r/=256,a-=8);return u[--l]|=128*h,u}function j(t,e,n){var r,o=8*n-e-1,i=(1<<o)-1,u=i>>1,a=o-7,c=n-1,s=t[c--],f=127&s;for(s>>=7;a>0;f=256*f+t[c],c--,a-=8);for(r=f&(1<<-a)-1,f>>=-a,a+=e;a>0;r=256*r+t[c],c--,a-=8);if(0===f)f=1-u;else{if(f===i)return r?NaN:s?-S:S;r+=k(2,e),f-=u}return(s?-1:1)*r*k(2,f-e)}function C(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function N(t){return[255&t]}function M(t){return[255&t,t>>8&255]}function L(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function B(t){return I(t,52,8)}function U(t){return I(t,23,4)}function D(t,e,n){d(t.prototype,e,{get:function(){return this[n]}})}function G(t,e,n,r){var o=p(+n);if(o+e>t[T])throw x("Wrong index!");var i=t[P]._b,u=o+t[F],a=i.slice(u,u+e);return r?a:a.reverse()}function Y(t,e,n,r,o,i){var u=p(+n);if(u+e>t[T])throw x("Wrong index!");for(var a=t[P]._b,c=u+t[F],s=r(+o),f=0;f<e;f++)a[c+f]=s[i?f:e-f-1]}if(u.ABV){if(!s((function(){m(1)}))||!s((function(){new m(-1)}))||s((function(){return new m,new m(1.5),new m(NaN),"ArrayBuffer"!=m.name}))){for(var q,W=(m=function(t){return f(this,m),new _(p(t))}).prototype=_.prototype,V=v(_),z=0;V.length>z;)(q=V[z++])in m||a(m,q,_[q]);i||(W.constructor=m)}var $=new w(new m(2)),H=w.prototype.setInt8;$.setInt8(0,2147483648),$.setInt8(1,2147483649),!$.getInt8(0)&&$.getInt8(1)||c(w.prototype,{setInt8:function(t,e){H.call(this,t,e<<24>>24)},setUint8:function(t,e){H.call(this,t,e<<24>>24)}},!0)}else m=function(t){f(this,m,"ArrayBuffer");var e=p(t);this._b=g.call(new Array(e),0),this[T]=e},w=function(t,e,n){f(this,w,"DataView"),f(t,m,"DataView");var r=t[T],o=l(e);if(o<0||o>r)throw x("Wrong offset!");if(o+(n=void 0===n?r-o:h(n))>r)throw x("Wrong length!");this[P]=t,this[F]=o,this[T]=n},o&&(D(m,"byteLength","_l"),D(w,"buffer","_b"),D(w,"byteLength","_l"),D(w,"byteOffset","_o")),c(w.prototype,{getInt8:function(t){return G(this,1,t)[0]<<24>>24},getUint8:function(t){return G(this,1,t)[0]},getInt16:function(t){var e=G(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=G(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return C(G(this,4,t,arguments[1]))},getUint32:function(t){return C(G(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return j(G(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return j(G(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){Y(this,1,t,N,e)},setUint8:function(t,e){Y(this,1,t,N,e)},setInt16:function(t,e){Y(this,2,t,M,e,arguments[2])},setUint16:function(t,e){Y(this,2,t,M,e,arguments[2])},setInt32:function(t,e){Y(this,4,t,L,e,arguments[2])},setUint32:function(t,e){Y(this,4,t,L,e,arguments[2])},setFloat32:function(t,e){Y(this,4,t,U,e,arguments[2])},setFloat64:function(t,e){Y(this,8,t,B,e,arguments[2])}});y(m,"ArrayBuffer"),y(w,"DataView"),a(w.prototype,u.VIEW,!0),e.ArrayBuffer=m,e.DataView=w},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){t.exports=!n(124)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,e,n){"use strict";e.a='#!/bin/bash\n\n###############################################################################\n# Strict mode\n###############################################################################\nset -euo pipefail\nIFS=$\'\\n\\t\'\n\n###############################################################################\n# CONSTANTS & UTILS\n###############################################################################\nmkdir -p /var/www/html\nLOG_FILE="/var/www/html/install.log"\n\necho "Starting script at $(date)" > $LOG_FILE\n\necho\necho "Installing curl" >> $LOG_FILE\nsudo apt-get update >> $LOG_FILE\nsudo apt-get install -y curl\n\necho\necho "Download install script" >> $LOG_FILE\ncurl -s https://raw.githubusercontent.com/medialab/hyphe_openstack_client/master/src/shell/install.sh > install.sh\nchmod +x install.sh\n\n# SETTING HERE THE ENV VARIABLES FOR HYPHE\ntouch /hyphe.env\n# @@_HYPHE_CONFIG_@@\n\necho\necho "Executing install script" >> $LOG_FILE\n./install.sh >> $LOG_FILE\nif [ $? -eq 0 ]; then\n  echo "Installation completed at $(date)" >> $LOG_FILE\nelse\n  echo "/!\\ Installation failed" >> $LOG_FILE\nfi\n'},function(t,e,n){t.exports=!n(8)&&!n(2)((function(){return 7!=Object.defineProperty(n(63)("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(1),o=n(7),i=n(33),u=n(64),a=n(9).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||a(e,t,{value:u.f(t)})}},function(t,e,n){var r=n(15),o=n(17),i=n(52)(!1),u=n(65)("IE_PROTO");t.exports=function(t,e){var n,a=o(t),c=0,s=[];for(n in a)n!=u&&r(a,n)&&s.push(n);for(;e.length>c;)r(a,n=e[c++])&&(~i(s,n)||s.push(n));return s}},function(t,e,n){var r=n(9),o=n(3),i=n(34);t.exports=n(8)?Object.defineProperties:function(t,e){o(t);for(var n,u=i(e),a=u.length,c=0;a>c;)r.f(t,n=u[c++],e[n]);return t}},function(t,e,n){var r=n(17),o=n(37).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(r(t))}},function(t,e,n){"use strict";var r=n(8),o=n(34),i=n(53),u=n(48),a=n(10),c=n(47),s=Object.assign;t.exports=!s||n(2)((function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach((function(t){e[t]=t})),7!=s({},t)[n]||Object.keys(s({},e)).join("")!=r}))?function(t,e){for(var n=a(t),s=arguments.length,f=1,l=i.f,h=u.f;s>f;)for(var p,v=c(arguments[f++]),d=l?o(v).concat(l(v)):o(v),g=d.length,y=0;g>y;)p=d[y++],r&&!h.call(v,p)||(n[p]=v[p]);return n}:s},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,n){"use strict";var r=n(21),o=n(4),i=n(100),u=[].slice,a={},c=function(t,e,n){if(!(e in a)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";a[e]=Function("F,a","return new F("+r.join(",")+")")}return a[e](t,n)};t.exports=Function.bind||function(t){var e=r(this),n=u.call(arguments,1),a=function(){var r=n.concat(u.call(arguments));return this instanceof a?c(e,r.length,r):i(e,r,t)};return o(e.prototype)&&(a.prototype=e.prototype),a}},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){var r=n(1).parseInt,o=n(42).trim,i=n(69),u=/^[-+]?0[xX]/;t.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(t,e){var n=o(String(t),3);return r(n,e>>>0||(u.test(n)?16:10))}:r},function(t,e,n){var r=n(1).parseFloat,o=n(42).trim;t.exports=1/r(n(69)+"-0")!=-1/0?function(t){var e=o(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},function(t,e,n){var r=n(26);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(e);return+t}},function(t,e,n){var r=n(4),o=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&o(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,n){"use strict";var r=n(36),o=n(31),i=n(41),u={};n(16)(u,n(5)("iterator"),(function(){return this})),t.exports=function(t,e,n){t.prototype=r(u,{next:o(1,n)}),i(t,e+" Iterator")}},function(t,e,n){var r=n(3);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},function(t,e,n){var r=n(229);t.exports=function(t,e){return new(r(t))(e)}},function(t,e,n){var r=n(21),o=n(10),i=n(47),u=n(6);t.exports=function(t,e,n,a,c){r(e);var s=o(t),f=i(s),l=u(s.length),h=c?l-1:0,p=c?-1:1;if(n<2)for(;;){if(h in f){a=f[h],h+=p;break}if(h+=p,c?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;c?h>=0:l>h;h+=p)h in f&&(a=e(a,f[h],h,s));return a}},function(t,e,n){"use strict";var r=n(10),o=n(35),i=n(6);t.exports=[].copyWithin||function(t,e){var n=r(this),u=i(n.length),a=o(t,u),c=o(e,u),s=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===s?u:o(s,u))-c,u-a),l=1;for(c<a&&a<c+f&&(l=-1,c+=f-1,a+=f-1);f-- >0;)c in n?n[a]=n[c]:delete n[a],a+=l,c+=l;return n}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){"use strict";var r=n(84);n(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,e,n){n(8)&&"g"!=/./g.flags&&n(9).f(RegExp.prototype,"flags",{configurable:!0,get:n(56)})},function(t,e,n){"use strict";var r,o,i,u,a=n(33),c=n(1),s=n(20),f=n(49),l=n(0),h=n(4),p=n(21),v=n(45),d=n(59),g=n(50),y=n(86).set,m=n(249)(),w=n(115),b=n(250),x=n(60),S=n(116),_=c.TypeError,E=c.process,k=E&&E.versions,R=k&&k.v8||"",O=c.Promise,A="process"==f(E),P=function(){},T=o=w.f,F=!!function(){try{var t=O.resolve(1),e=(t.constructor={})[n(5)("species")]=function(t){t(P,P)};return(A||"function"==typeof PromiseRejectionEvent)&&t.then(P)instanceof e&&0!==R.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(t){}}(),I=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},j=function(t,e){if(!t._n){t._n=!0;var n=t._c;m((function(){for(var r=t._v,o=1==t._s,i=0,u=function(e){var n,i,u,a=o?e.ok:e.fail,c=e.resolve,s=e.reject,f=e.domain;try{a?(o||(2==t._h&&M(t),t._h=1),!0===a?n=r:(f&&f.enter(),n=a(r),f&&(f.exit(),u=!0)),n===e.promise?s(_("Promise-chain cycle")):(i=I(n))?i.call(n,c,s):c(n)):s(r)}catch(t){f&&!u&&f.exit(),s(t)}};n.length>i;)u(n[i++]);t._c=[],t._n=!1,e&&!t._h&&C(t)}))}},C=function(t){y.call(c,(function(){var e,n,r,o=t._v,i=N(t);if(i&&(e=b((function(){A?E.emit("unhandledRejection",o,t):(n=c.onunhandledrejection)?n({promise:t,reason:o}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",o)})),t._h=A||N(t)?2:1),t._a=void 0,i&&e.e)throw e.v}))},N=function(t){return 1!==t._h&&0===(t._a||t._c).length},M=function(t){y.call(c,(function(){var e;A?E.emit("rejectionHandled",t):(e=c.onrejectionhandled)&&e({promise:t,reason:t._v})}))},L=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),j(e,!0))},B=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw _("Promise can't be resolved itself");(e=I(t))?m((function(){var r={_w:n,_d:!1};try{e.call(t,s(B,r,1),s(L,r,1))}catch(t){L.call(r,t)}})):(n._v=t,n._s=1,j(n,!1))}catch(t){L.call({_w:n,_d:!1},t)}}};F||(O=function(t){v(this,O,"Promise","_h"),p(t),r.call(this);try{t(s(B,this,1),s(L,this,1))}catch(t){L.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(46)(O.prototype,{then:function(t,e){var n=T(g(this,O));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=A?E.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&j(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=s(B,t,1),this.reject=s(L,t,1)},w.f=T=function(t){return t===O||t===u?new i(t):o(t)}),l(l.G+l.W+l.F*!F,{Promise:O}),n(41)(O,"Promise"),n(44)("Promise"),u=n(7).Promise,l(l.S+l.F*!F,"Promise",{reject:function(t){var e=T(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(a||!F),"Promise",{resolve:function(t){return S(a&&this===u?O:this,t)}}),l(l.S+l.F*!(F&&n(55)((function(t){O.all(t).catch(P)}))),"Promise",{all:function(t){var e=this,n=T(e),r=n.resolve,o=n.reject,i=b((function(){var n=[],i=0,u=1;d(t,!1,(function(t){var a=i++,c=!1;n.push(void 0),u++,e.resolve(t).then((function(t){c||(c=!0,n[a]=t,--u||r(n))}),o)})),--u||r(n)}));return i.e&&o(i.v),n.promise},race:function(t){var e=this,n=T(e),r=n.reject,o=b((function(){d(t,!1,(function(t){e.resolve(t).then(n.resolve,r)}))}));return o.e&&r(o.v),n.promise}})},function(t,e,n){"use strict";var r=n(21);function o(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)}t.exports.f=function(t){return new o(t)}},function(t,e,n){var r=n(3),o=n(4),i=n(115);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){"use strict";var r=n(9).f,o=n(36),i=n(46),u=n(20),a=n(45),c=n(59),s=n(75),f=n(111),l=n(44),h=n(8),p=n(30).fastKey,v=n(40),d=h?"_s":"size",g=function(t,e){var n,r=p(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,s){var f=t((function(t,r){a(t,f,e,"_i"),t._t=e,t._i=o(null),t._f=void 0,t._l=void 0,t[d]=0,null!=r&&c(r,n,t[s],t)}));return i(f.prototype,{clear:function(){for(var t=v(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[d]=0},delete:function(t){var n=v(this,e),r=g(n,t);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[d]--}return!!r},forEach:function(t){v(this,e);for(var n,r=u(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!g(v(this,e),t)}}),h&&r(f.prototype,"size",{get:function(){return v(this,e)[d]}}),f},def:function(t,e,n){var r,o,i=g(t,e);return i?i.v=n:(t._l=i={i:o=p(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=i),r&&(r.n=i),t[d]++,"F"!==o&&(t._i[o]=i)),t},getEntry:g,setStrong:function(t,e,n){s(t,e,(function(t,n){this._t=v(t,e),this._k=n,this._l=void 0}),(function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?f(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,f(1))}),n?"entries":"values",!n,!0),l(e)}}},function(t,e,n){"use strict";var r=n(46),o=n(30).getWeak,i=n(3),u=n(4),a=n(45),c=n(59),s=n(25),f=n(15),l=n(40),h=s(5),p=s(6),v=0,d=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},y=function(t,e){return h(t.a,(function(t){return t[0]===e}))};g.prototype={get:function(t){var e=y(this,t);if(e)return e[1]},has:function(t){return!!y(this,t)},set:function(t,e){var n=y(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(t){var e=p(this.a,(function(e){return e[0]===t}));return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,i){var s=t((function(t,r){a(t,s,e,"_i"),t._t=e,t._i=v++,t._l=void 0,null!=r&&c(r,n,t[i],t)}));return r(s.prototype,{delete:function(t){if(!u(t))return!1;var n=o(t);return!0===n?d(l(this,e)).delete(t):n&&f(n,this._i)&&delete n[this._i]},has:function(t){if(!u(t))return!1;var n=o(t);return!0===n?d(l(this,e)).has(t):n&&f(n,this._i)}}),s},def:function(t,e,n){var r=o(i(e),!0);return!0===r?d(t).set(e,n):r[t._i]=n,t},ufstore:d}},function(t,e,n){var r=n(22),o=n(6);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=o(e);if(e!==n)throw RangeError("Wrong length!");return n}},function(t,e,n){var r=n(37),o=n(53),i=n(3),u=n(1).Reflect;t.exports=u&&u.ownKeys||function(t){var e=r.f(i(t)),n=o.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(6),o=n(71),i=n(27);t.exports=function(t,e,n,u){var a=String(i(t)),c=a.length,s=void 0===n?" ":String(n),f=r(e);if(f<=c||""==s)return a;var l=f-c,h=o.call(s,Math.ceil(l/s.length));return h.length>l&&(h=h.slice(0,l)),u?h+a:a+h}},function(t,e,n){var r=n(8),o=n(34),i=n(17),u=n(48).f;t.exports=function(t){return function(e){for(var n,a=i(e),c=o(a),s=c.length,f=0,l=[];s>f;)n=c[f++],r&&!u.call(a,n)||l.push(t?[n,a[n]]:a[n]);return l}}},function(t,e){var n=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return t.apply(e,n)}}},function(t,e,n){"use strict";var r=n(14);function o(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var i;if(n)i=n(e);else if(r.isURLSearchParams(e))i=e.toString();else{var u=[];r.forEach(e,(function(t,e){null!=t&&(r.isArray(t)?e+="[]":t=[t],r.forEach(t,(function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),u.push(o(e)+"="+o(t))})))})),i=u.join("&")}if(i){var a=t.indexOf("#");-1!==a&&(t=t.slice(0,a)),t+=(-1===t.indexOf("?")?"?":"&")+i}return t}},function(t,e,n){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,e,n){"use strict";(function(e){var r=n(14),o=n(333),i={"Content-Type":"application/x-www-form-urlencoded"};function u(t,e){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var a,c={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==e&&"[object process]"===Object.prototype.toString.call(e))&&(a=n(129)),a),transformRequest:[function(t,e){return o(e,"Accept"),o(e,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(u(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(u(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(t){c.headers[t]={}})),r.forEach(["post","put","patch"],(function(t){c.headers[t]=r.merge(i)})),t.exports=c}).call(this,n(332))},function(t,e,n){"use strict";var r=n(14),o=n(334),i=n(126),u=n(336),a=n(339),c=n(340),s=n(130);t.exports=function(t){return new Promise((function(e,f){var l=t.data,h=t.headers;r.isFormData(l)&&delete h["Content-Type"];var p=new XMLHttpRequest;if(t.auth){var v=t.auth.username||"",d=t.auth.password||"";h.Authorization="Basic "+btoa(v+":"+d)}var g=u(t.baseURL,t.url);if(p.open(t.method.toUpperCase(),i(g,t.params,t.paramsSerializer),!0),p.timeout=t.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?a(p.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:n,config:t,request:p};o(e,f,r),p=null}},p.onabort=function(){p&&(f(s("Request aborted",t,"ECONNABORTED",p)),p=null)},p.onerror=function(){f(s("Network Error",t,null,p)),p=null},p.ontimeout=function(){var e="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),f(s(e,t,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var y=n(341),m=(t.withCredentials||c(g))&&t.xsrfCookieName?y.read(t.xsrfCookieName):void 0;m&&(h[t.xsrfHeaderName]=m)}if("setRequestHeader"in p&&r.forEach(h,(function(t,e){void 0===l&&"content-type"===e.toLowerCase()?delete h[e]:p.setRequestHeader(e,t)})),r.isUndefined(t.withCredentials)||(p.withCredentials=!!t.withCredentials),t.responseType)try{p.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&p.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){p&&(p.abort(),f(t),p=null)})),void 0===l&&(l=null),p.send(l)}))}},function(t,e,n){"use strict";var r=n(335);t.exports=function(t,e,n,o,i){var u=new Error(t);return r(u,e,n,o,i)}},function(t,e,n){"use strict";var r=n(14);t.exports=function(t,e){e=e||{};var n={},o=["url","method","params","data"],i=["headers","auth","proxy"],u=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(o,(function(t){void 0!==e[t]&&(n[t]=e[t])})),r.forEach(i,(function(o){r.isObject(e[o])?n[o]=r.deepMerge(t[o],e[o]):void 0!==e[o]?n[o]=e[o]:r.isObject(t[o])?n[o]=r.deepMerge(t[o]):void 0!==t[o]&&(n[o]=t[o])})),r.forEach(u,(function(r){void 0!==e[r]?n[r]=e[r]:void 0!==t[r]&&(n[r]=t[r])}));var a=o.concat(i).concat(u),c=Object.keys(e).filter((function(t){return-1===a.indexOf(t)}));return r.forEach(c,(function(r){void 0!==e[r]?n[r]=e[r]:void 0!==t[r]&&(n[r]=t[r])})),n}},function(t,e,n){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,e,n){t.exports=n(327)},function(t,e,n){n(135),t.exports=n(321)},function(t,e,n){"use strict";n(136);var r,o=(r=n(308))&&r.__esModule?r:{default:r};o.default._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),o.default._babelPolyfill=!0},function(t,e,n){"use strict";n(137),n(280),n(282),n(285),n(287),n(289),n(291),n(293),n(295),n(297),n(299),n(301),n(303),n(307)},function(t,e,n){n(138),n(141),n(142),n(143),n(144),n(145),n(146),n(147),n(148),n(149),n(150),n(151),n(152),n(153),n(154),n(155),n(156),n(157),n(158),n(159),n(160),n(161),n(162),n(163),n(164),n(165),n(166),n(167),n(168),n(169),n(170),n(171),n(172),n(173),n(174),n(175),n(176),n(177),n(178),n(179),n(180),n(181),n(182),n(184),n(185),n(186),n(187),n(188),n(189),n(190),n(191),n(192),n(193),n(194),n(195),n(196),n(197),n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(216),n(217),n(219),n(220),n(222),n(223),n(224),n(225),n(226),n(227),n(228),n(230),n(231),n(232),n(233),n(234),n(235),n(236),n(237),n(238),n(239),n(240),n(241),n(242),n(83),n(243),n(112),n(244),n(113),n(245),n(246),n(247),n(248),n(114),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(259),n(260),n(261),n(262),n(263),n(264),n(265),n(266),n(267),n(268),n(269),n(270),n(271),n(272),n(273),n(274),n(275),n(276),n(277),n(278),n(279),t.exports=n(7)},function(t,e,n){"use strict";var r=n(1),o=n(15),i=n(8),u=n(0),a=n(12),c=n(30).KEY,s=n(2),f=n(51),l=n(41),h=n(32),p=n(5),v=n(64),d=n(93),g=n(140),y=n(54),m=n(3),w=n(4),b=n(10),x=n(17),S=n(29),_=n(31),E=n(36),k=n(96),R=n(23),O=n(53),A=n(9),P=n(34),T=R.f,F=A.f,I=k.f,j=r.Symbol,C=r.JSON,N=C&&C.stringify,M=p("_hidden"),L=p("toPrimitive"),B={}.propertyIsEnumerable,U=f("symbol-registry"),D=f("symbols"),G=f("op-symbols"),Y=Object.prototype,q="function"==typeof j&&!!O.f,W=r.QObject,V=!W||!W.prototype||!W.prototype.findChild,z=i&&s((function(){return 7!=E(F({},"a",{get:function(){return F(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=T(Y,e);r&&delete Y[e],F(t,e,n),r&&t!==Y&&F(Y,e,r)}:F,$=function(t){var e=D[t]=E(j.prototype);return e._k=t,e},H=q&&"symbol"==typeof j.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof j},K=function(t,e,n){return t===Y&&K(G,e,n),m(t),e=S(e,!0),m(n),o(D,e)?(n.enumerable?(o(t,M)&&t[M][e]&&(t[M][e]=!1),n=E(n,{enumerable:_(0,!1)})):(o(t,M)||F(t,M,_(1,{})),t[M][e]=!0),z(t,e,n)):F(t,e,n)},X=function(t,e){m(t);for(var n,r=g(e=x(e)),o=0,i=r.length;i>o;)K(t,n=r[o++],e[n]);return t},J=function(t){var e=B.call(this,t=S(t,!0));return!(this===Y&&o(D,t)&&!o(G,t))&&(!(e||!o(this,t)||!o(D,t)||o(this,M)&&this[M][t])||e)},Z=function(t,e){if(t=x(t),e=S(e,!0),t!==Y||!o(D,e)||o(G,e)){var n=T(t,e);return!n||!o(D,e)||o(t,M)&&t[M][e]||(n.enumerable=!0),n}},Q=function(t){for(var e,n=I(x(t)),r=[],i=0;n.length>i;)o(D,e=n[i++])||e==M||e==c||r.push(e);return r},tt=function(t){for(var e,n=t===Y,r=I(n?G:x(t)),i=[],u=0;r.length>u;)!o(D,e=r[u++])||n&&!o(Y,e)||i.push(D[e]);return i};q||(a((j=function(){if(this instanceof j)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(n){this===Y&&e.call(G,n),o(this,M)&&o(this[M],t)&&(this[M][t]=!1),z(this,t,_(1,n))};return i&&V&&z(Y,t,{configurable:!0,set:e}),$(t)}).prototype,"toString",(function(){return this._k})),R.f=Z,A.f=K,n(37).f=k.f=Q,n(48).f=J,O.f=tt,i&&!n(33)&&a(Y,"propertyIsEnumerable",J,!0),v.f=function(t){return $(p(t))}),u(u.G+u.W+u.F*!q,{Symbol:j});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;et.length>nt;)p(et[nt++]);for(var rt=P(p.store),ot=0;rt.length>ot;)d(rt[ot++]);u(u.S+u.F*!q,"Symbol",{for:function(t){return o(U,t+="")?U[t]:U[t]=j(t)},keyFor:function(t){if(!H(t))throw TypeError(t+" is not a symbol!");for(var e in U)if(U[e]===t)return e},useSetter:function(){V=!0},useSimple:function(){V=!1}}),u(u.S+u.F*!q,"Object",{create:function(t,e){return void 0===e?E(t):X(E(t),e)},defineProperty:K,defineProperties:X,getOwnPropertyDescriptor:Z,getOwnPropertyNames:Q,getOwnPropertySymbols:tt});var it=s((function(){O.f(1)}));u(u.S+u.F*it,"Object",{getOwnPropertySymbols:function(t){return O.f(b(t))}}),C&&u(u.S+u.F*(!q||s((function(){var t=j();return"[null]"!=N([t])||"{}"!=N({a:t})||"{}"!=N(Object(t))}))),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(w(e)||void 0!==t)&&!H(t))return y(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!H(e))return e}),r[1]=e,N.apply(C,r)}}),j.prototype[L]||n(16)(j.prototype,L,j.prototype.valueOf),l(j,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,e,n){t.exports=n(51)("native-function-to-string",Function.toString)},function(t,e,n){var r=n(34),o=n(53),i=n(48);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var u,a=n(t),c=i.f,s=0;a.length>s;)c.call(t,u=a[s++])&&e.push(u);return e}},function(t,e,n){var r=n(0);r(r.S,"Object",{create:n(36)})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(8),"Object",{defineProperty:n(9).f})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(8),"Object",{defineProperties:n(95)})},function(t,e,n){var r=n(17),o=n(23).f;n(24)("getOwnPropertyDescriptor",(function(){return function(t,e){return o(r(t),e)}}))},function(t,e,n){var r=n(10),o=n(38);n(24)("getPrototypeOf",(function(){return function(t){return o(r(t))}}))},function(t,e,n){var r=n(10),o=n(34);n(24)("keys",(function(){return function(t){return o(r(t))}}))},function(t,e,n){n(24)("getOwnPropertyNames",(function(){return n(96).f}))},function(t,e,n){var r=n(4),o=n(30).onFreeze;n(24)("freeze",(function(t){return function(e){return t&&r(e)?t(o(e)):e}}))},function(t,e,n){var r=n(4),o=n(30).onFreeze;n(24)("seal",(function(t){return function(e){return t&&r(e)?t(o(e)):e}}))},function(t,e,n){var r=n(4),o=n(30).onFreeze;n(24)("preventExtensions",(function(t){return function(e){return t&&r(e)?t(o(e)):e}}))},function(t,e,n){var r=n(4);n(24)("isFrozen",(function(t){return function(e){return!r(e)||!!t&&t(e)}}))},function(t,e,n){var r=n(4);n(24)("isSealed",(function(t){return function(e){return!r(e)||!!t&&t(e)}}))},function(t,e,n){var r=n(4);n(24)("isExtensible",(function(t){return function(e){return!!r(e)&&(!t||t(e))}}))},function(t,e,n){var r=n(0);r(r.S+r.F,"Object",{assign:n(97)})},function(t,e,n){var r=n(0);r(r.S,"Object",{is:n(98)})},function(t,e,n){var r=n(0);r(r.S,"Object",{setPrototypeOf:n(68).set})},function(t,e,n){"use strict";var r=n(49),o={};o[n(5)("toStringTag")]="z",o+""!="[object z]"&&n(12)(Object.prototype,"toString",(function(){return"[object "+r(this)+"]"}),!0)},function(t,e,n){var r=n(0);r(r.P,"Function",{bind:n(99)})},function(t,e,n){var r=n(9).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||n(8)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,e,n){"use strict";var r=n(4),o=n(38),i=n(5)("hasInstance"),u=Function.prototype;i in u||n(9).f(u,i,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,n){var r=n(0),o=n(101);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(t,e,n){var r=n(0),o=n(102);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(t,e,n){"use strict";var r=n(1),o=n(15),i=n(26),u=n(70),a=n(29),c=n(2),s=n(37).f,f=n(23).f,l=n(9).f,h=n(42).trim,p=r.Number,v=p,d=p.prototype,g="Number"==i(n(36)(d)),y="trim"in String.prototype,m=function(t){var e=a(t,!1);if("string"==typeof e&&e.length>2){var n,r,o,i=(e=y?e.trim():h(e,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=e.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(e.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+e}for(var u,c=e.slice(2),s=0,f=c.length;s<f;s++)if((u=c.charCodeAt(s))<48||u>o)return NaN;return parseInt(c,r)}}return+e};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof p&&(g?c((function(){d.valueOf.call(n)})):"Number"!=i(n))?u(new v(m(e)),n,p):m(e)};for(var w,b=n(8)?s(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;b.length>x;x++)o(v,w=b[x])&&!o(p,w)&&l(p,w,f(v,w));p.prototype=d,d.constructor=p,n(12)(r,"Number",p)}},function(t,e,n){"use strict";var r=n(0),o=n(22),i=n(103),u=n(71),a=1..toFixed,c=Math.floor,s=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*s[n],s[n]=r%1e7,r=c(r/1e7)},h=function(t){for(var e=6,n=0;--e>=0;)n+=s[e],s[e]=c(n/t),n=n%t*1e7},p=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==s[t]){var n=String(s[t]);e=""===e?n:e+u.call("0",7-n.length)+n}return e},v=function(t,e,n){return 0===e?n:e%2==1?v(t,e-1,n*t):v(t*t,e/2,n)};r(r.P+r.F*(!!a&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(2)((function(){a.call({})}))),"Number",{toFixed:function(t){var e,n,r,a,c=i(this,f),s=o(t),d="",g="0";if(s<0||s>20)throw RangeError(f);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(d="-",c=-c),c>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(c*v(2,69,1))-69)<0?c*v(2,-e,1):c/v(2,e,1),n*=4503599627370496,(e=52-e)>0){for(l(0,n),r=s;r>=7;)l(1e7,0),r-=7;for(l(v(10,r,1),0),r=e-1;r>=23;)h(1<<23),r-=23;h(1<<r),l(1,1),h(2),g=p()}else l(0,n),l(1<<-e,0),g=p()+u.call("0",s);return g=s>0?d+((a=g.length)<=s?"0."+u.call("0",s-a)+g:g.slice(0,a-s)+"."+g.slice(a-s)):d+g}})},function(t,e,n){"use strict";var r=n(0),o=n(2),i=n(103),u=1..toPrecision;r(r.P+r.F*(o((function(){return"1"!==u.call(1,void 0)}))||!o((function(){u.call({})}))),"Number",{toPrecision:function(t){var e=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(e):u.call(e,t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,n){var r=n(0),o=n(1).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{isInteger:n(104)})},function(t,e,n){var r=n(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,n){var r=n(0),o=n(104),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},function(t,e,n){var r=n(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){var r=n(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,n){var r=n(0),o=n(102);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(t,e,n){var r=n(0),o=n(101);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(t,e,n){var r=n(0),o=n(105),i=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},function(t,e,n){var r=n(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,n){var r=n(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,n){var r=n(0),o=n(72);r(r.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,n){var r=n(0),o=Math.exp;r(r.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},function(t,e,n){var r=n(0),o=n(73);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(t,e,n){var r=n(0);r(r.S,"Math",{fround:n(183)})},function(t,e,n){var r=n(72),o=Math.pow,i=o(2,-52),u=o(2,-23),a=o(2,127)*(2-u),c=o(2,-126);t.exports=Math.fround||function(t){var e,n,o=Math.abs(t),s=r(t);return o<c?s*(o/c/u+1/i-1/i)*c*u:(n=(e=(1+u/i)*o)-(e-o))>a||n!=n?s*(1/0):s*n}},function(t,e,n){var r=n(0),o=Math.abs;r(r.S,"Math",{hypot:function(t,e){for(var n,r,i=0,u=0,a=arguments.length,c=0;u<a;)c<(n=o(arguments[u++]))?(i=i*(r=c/n)*r+1,c=n):i+=n>0?(r=n/c)*r:n;return c===1/0?1/0:c*Math.sqrt(i)}})},function(t,e,n){var r=n(0),o=Math.imul;r(r.S+r.F*n(2)((function(){return-5!=o(4294967295,5)||2!=o.length})),"Math",{imul:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r;return 0|o*i+((65535&n>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log1p:n(105)})},function(t,e,n){var r=n(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,n){var r=n(0);r(r.S,"Math",{sign:n(72)})},function(t,e,n){var r=n(0),o=n(73),i=Math.exp;r(r.S+r.F*n(2)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,e,n){var r=n(0),o=n(73),i=Math.exp;r(r.S,"Math",{tanh:function(t){var e=o(t=+t),n=o(-t);return e==1/0?1:n==1/0?-1:(e-n)/(i(t)+i(-t))}})},function(t,e,n){var r=n(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,n){var r=n(0),o=n(35),i=String.fromCharCode,u=String.fromCodePoint;r(r.S+r.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,u=0;r>u;){if(e=+arguments[u++],o(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?i(e):i(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},function(t,e,n){var r=n(0),o=n(17),i=n(6);r(r.S,"String",{raw:function(t){for(var e=o(t.raw),n=i(e.length),r=arguments.length,u=[],a=0;n>a;)u.push(String(e[a++])),a<r&&u.push(String(arguments[a]));return u.join("")}})},function(t,e,n){"use strict";n(42)("trim",(function(t){return function(){return t(this,3)}}))},function(t,e,n){"use strict";var r=n(74)(!0);n(75)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})}))},function(t,e,n){"use strict";var r=n(0),o=n(74)(!1);r(r.P,"String",{codePointAt:function(t){return o(this,t)}})},function(t,e,n){"use strict";var r=n(0),o=n(6),i=n(76),u="".endsWith;r(r.P+r.F*n(78)("endsWith"),"String",{endsWith:function(t){var e=i(this,t,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=o(e.length),a=void 0===n?r:Math.min(o(n),r),c=String(t);return u?u.call(e,c,a):e.slice(a-c.length,a)===c}})},function(t,e,n){"use strict";var r=n(0),o=n(76);r(r.P+r.F*n(78)("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(0);r(r.P,"String",{repeat:n(71)})},function(t,e,n){"use strict";var r=n(0),o=n(6),i=n(76),u="".startsWith;r(r.P+r.F*n(78)("startsWith"),"String",{startsWith:function(t){var e=i(this,t,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return u?u.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){"use strict";n(13)("anchor",(function(t){return function(e){return t(this,"a","name",e)}}))},function(t,e,n){"use strict";n(13)("big",(function(t){return function(){return t(this,"big","","")}}))},function(t,e,n){"use strict";n(13)("blink",(function(t){return function(){return t(this,"blink","","")}}))},function(t,e,n){"use strict";n(13)("bold",(function(t){return function(){return t(this,"b","","")}}))},function(t,e,n){"use strict";n(13)("fixed",(function(t){return function(){return t(this,"tt","","")}}))},function(t,e,n){"use strict";n(13)("fontcolor",(function(t){return function(e){return t(this,"font","color",e)}}))},function(t,e,n){"use strict";n(13)("fontsize",(function(t){return function(e){return t(this,"font","size",e)}}))},function(t,e,n){"use strict";n(13)("italics",(function(t){return function(){return t(this,"i","","")}}))},function(t,e,n){"use strict";n(13)("link",(function(t){return function(e){return t(this,"a","href",e)}}))},function(t,e,n){"use strict";n(13)("small",(function(t){return function(){return t(this,"small","","")}}))},function(t,e,n){"use strict";n(13)("strike",(function(t){return function(){return t(this,"strike","","")}}))},function(t,e,n){"use strict";n(13)("sub",(function(t){return function(){return t(this,"sub","","")}}))},function(t,e,n){"use strict";n(13)("sup",(function(t){return function(){return t(this,"sup","","")}}))},function(t,e,n){var r=n(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,n){"use strict";var r=n(0),o=n(10),i=n(29);r(r.P+r.F*n(2)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(t){var e=o(this),n=i(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},function(t,e,n){var r=n(0),o=n(218);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(t,e,n){"use strict";var r=n(2),o=Date.prototype.getTime,i=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};t.exports=r((function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-50000000000001))}))||!r((function(){i.call(new Date(NaN))}))?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+("00000"+Math.abs(e)).slice(r?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(n>99?n:"0"+u(n))+"Z"}:i},function(t,e,n){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(12)(r,"toString",(function(){var t=i.call(this);return t==t?o.call(this):"Invalid Date"}))},function(t,e,n){var r=n(5)("toPrimitive"),o=Date.prototype;r in o||n(16)(o,r,n(221))},function(t,e,n){"use strict";var r=n(3),o=n(29);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return o(r(this),"number"!=t)}},function(t,e,n){var r=n(0);r(r.S,"Array",{isArray:n(54)})},function(t,e,n){"use strict";var r=n(20),o=n(0),i=n(10),u=n(107),a=n(79),c=n(6),s=n(80),f=n(81);o(o.S+o.F*!n(55)((function(t){Array.from(t)})),"Array",{from:function(t){var e,n,o,l,h=i(t),p="function"==typeof this?this:Array,v=arguments.length,d=v>1?arguments[1]:void 0,g=void 0!==d,y=0,m=f(h);if(g&&(d=r(d,v>2?arguments[2]:void 0,2)),null==m||p==Array&&a(m))for(n=new p(e=c(h.length));e>y;y++)s(n,y,g?d(h[y],y):h[y]);else for(l=m.call(h),n=new p;!(o=l.next()).done;y++)s(n,y,g?u(l,d,[o.value,y],!0):o.value);return n.length=y,n}})},function(t,e,n){"use strict";var r=n(0),o=n(80);r(r.S+r.F*n(2)((function(){function t(){}return!(Array.of.call(t)instanceof t)})),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)o(n,t,arguments[t++]);return n.length=e,n}})},function(t,e,n){"use strict";var r=n(0),o=n(17),i=[].join;r(r.P+r.F*(n(47)!=Object||!n(19)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},function(t,e,n){"use strict";var r=n(0),o=n(67),i=n(26),u=n(35),a=n(6),c=[].slice;r(r.P+r.F*n(2)((function(){o&&c.call(o)})),"Array",{slice:function(t,e){var n=a(this.length),r=i(this);if(e=void 0===e?n:e,"Array"==r)return c.call(this,t,e);for(var o=u(t,n),s=u(e,n),f=a(s-o),l=new Array(f),h=0;h<f;h++)l[h]="String"==r?this.charAt(o+h):this[o+h];return l}})},function(t,e,n){"use strict";var r=n(0),o=n(21),i=n(10),u=n(2),a=[].sort,c=[1,2,3];r(r.P+r.F*(u((function(){c.sort(void 0)}))||!u((function(){c.sort(null)}))||!n(19)(a)),"Array",{sort:function(t){return void 0===t?a.call(i(this)):a.call(i(this),o(t))}})},function(t,e,n){"use strict";var r=n(0),o=n(25)(0),i=n(19)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},function(t,e,n){var r=n(4),o=n(54),i=n(5)("species");t.exports=function(t){var e;return o(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!o(e.prototype)||(e=void 0),r(e)&&null===(e=e[i])&&(e=void 0)),void 0===e?Array:e}},function(t,e,n){"use strict";var r=n(0),o=n(25)(1);r(r.P+r.F*!n(19)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(25)(2);r(r.P+r.F*!n(19)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(25)(3);r(r.P+r.F*!n(19)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(25)(4);r(r.P+r.F*!n(19)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(109);r(r.P+r.F*!n(19)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},function(t,e,n){"use strict";var r=n(0),o=n(109);r(r.P+r.F*!n(19)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},function(t,e,n){"use strict";var r=n(0),o=n(52)(!1),i=[].indexOf,u=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!n(19)(i)),"Array",{indexOf:function(t){return u?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(17),i=n(22),u=n(6),a=[].lastIndexOf,c=!!a&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(c||!n(19)(a)),"Array",{lastIndexOf:function(t){if(c)return a.apply(this,arguments)||0;var e=o(this),n=u(e.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in e&&e[r]===t)return r||0;return-1}})},function(t,e,n){var r=n(0);r(r.P,"Array",{copyWithin:n(110)}),n(39)("copyWithin")},function(t,e,n){var r=n(0);r(r.P,"Array",{fill:n(82)}),n(39)("fill")},function(t,e,n){"use strict";var r=n(0),o=n(25)(5),i=!0;"find"in[]&&Array(1).find((function(){i=!1})),r(r.P+r.F*i,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(39)("find")},function(t,e,n){"use strict";var r=n(0),o=n(25)(6),i="findIndex",u=!0;i in[]&&Array(1)[i]((function(){u=!1})),r(r.P+r.F*u,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(39)(i)},function(t,e,n){n(44)("Array")},function(t,e,n){var r=n(1),o=n(70),i=n(9).f,u=n(37).f,a=n(77),c=n(56),s=r.RegExp,f=s,l=s.prototype,h=/a/g,p=/a/g,v=new s(h)!==h;if(n(8)&&(!v||n(2)((function(){return p[n(5)("match")]=!1,s(h)!=h||s(p)==p||"/a/i"!=s(h,"i")})))){s=function(t,e){var n=this instanceof s,r=a(t),i=void 0===e;return!n&&r&&t.constructor===s&&i?t:o(v?new f(r&&!i?t.source:t,e):f((r=t instanceof s)?t.source:t,r&&i?c.call(t):e),n?this:l,s)};for(var d=function(t){t in s||i(s,t,{configurable:!0,get:function(){return f[t]},set:function(e){f[t]=e}})},g=u(f),y=0;g.length>y;)d(g[y++]);l.constructor=s,s.prototype=l,n(12)(r,"RegExp",s)}n(44)("RegExp")},function(t,e,n){"use strict";n(113);var r=n(3),o=n(56),i=n(8),u=/./.toString,a=function(t){n(12)(RegExp.prototype,"toString",t,!0)};n(2)((function(){return"/a/b"!=u.call({source:"a",flags:"b"})}))?a((function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)})):"toString"!=u.name&&a((function(){return u.call(this)}))},function(t,e,n){"use strict";var r=n(3),o=n(6),i=n(85),u=n(57);n(58)("match",1,(function(t,e,n,a){return[function(n){var r=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,r):new RegExp(n)[e](String(r))},function(t){var e=a(n,t,this);if(e.done)return e.value;var c=r(t),s=String(this);if(!c.global)return u(c,s);var f=c.unicode;c.lastIndex=0;for(var l,h=[],p=0;null!==(l=u(c,s));){var v=String(l[0]);h[p]=v,""===v&&(c.lastIndex=i(s,o(c.lastIndex),f)),p++}return 0===p?null:h}]}))},function(t,e,n){"use strict";var r=n(3),o=n(10),i=n(6),u=n(22),a=n(85),c=n(57),s=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(58)("replace",2,(function(t,e,n,v){return[function(r,o){var i=t(this),u=null==r?void 0:r[e];return void 0!==u?u.call(r,i,o):n.call(String(i),r,o)},function(t,e){var o=v(n,t,this,e);if(o.done)return o.value;var l=r(t),h=String(this),p="function"==typeof e;p||(e=String(e));var g=l.global;if(g){var y=l.unicode;l.lastIndex=0}for(var m=[];;){var w=c(l,h);if(null===w)break;if(m.push(w),!g)break;""===String(w[0])&&(l.lastIndex=a(h,i(l.lastIndex),y))}for(var b,x="",S=0,_=0;_<m.length;_++){w=m[_];for(var E=String(w[0]),k=s(f(u(w.index),h.length),0),R=[],O=1;O<w.length;O++)R.push(void 0===(b=w[O])?b:String(b));var A=w.groups;if(p){var P=[E].concat(R,k,h);void 0!==A&&P.push(A);var T=String(e.apply(void 0,P))}else T=d(E,h,k,R,A,e);k>=S&&(x+=h.slice(S,k)+T,S=k+E.length)}return x+h.slice(S)}];function d(t,e,r,i,u,a){var c=r+t.length,s=i.length,f=p;return void 0!==u&&(u=o(u),f=h),n.call(a,f,(function(n,o){var a;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,r);case"'":return e.slice(c);case"<":a=u[o.slice(1,-1)];break;default:var f=+o;if(0===f)return n;if(f>s){var h=l(f/10);return 0===h?n:h<=s?void 0===i[h-1]?o.charAt(1):i[h-1]+o.charAt(1):n}a=i[f-1]}return void 0===a?"":a}))}}))},function(t,e,n){"use strict";var r=n(3),o=n(98),i=n(57);n(58)("search",1,(function(t,e,n,u){return[function(n){var r=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,r):new RegExp(n)[e](String(r))},function(t){var e=u(n,t,this);if(e.done)return e.value;var a=r(t),c=String(this),s=a.lastIndex;o(s,0)||(a.lastIndex=0);var f=i(a,c);return o(a.lastIndex,s)||(a.lastIndex=s),null===f?-1:f.index}]}))},function(t,e,n){"use strict";var r=n(77),o=n(3),i=n(50),u=n(85),a=n(6),c=n(57),s=n(84),f=n(2),l=Math.min,h=[].push,p="length",v=!f((function(){RegExp(4294967295,"y")}));n(58)("split",2,(function(t,e,n,f){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[p]||2!="ab".split(/(?:ab)*/)[p]||4!=".".split(/(.?)(.?)/)[p]||".".split(/()()/)[p]>1||"".split(/.?/)[p]?function(t,e){var o=String(this);if(void 0===t&&0===e)return[];if(!r(t))return n.call(o,t,e);for(var i,u,a,c=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,v=void 0===e?4294967295:e>>>0,d=new RegExp(t.source,f+"g");(i=s.call(d,o))&&!((u=d.lastIndex)>l&&(c.push(o.slice(l,i.index)),i[p]>1&&i.index<o[p]&&h.apply(c,i.slice(1)),a=i[0][p],l=u,c[p]>=v));)d.lastIndex===i.index&&d.lastIndex++;return l===o[p]?!a&&d.test("")||c.push(""):c.push(o.slice(l)),c[p]>v?c.slice(0,v):c}:"0".split(void 0,0)[p]?function(t,e){return void 0===t&&0===e?[]:n.call(this,t,e)}:n,[function(n,r){var o=t(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,o,r):d.call(String(o),n,r)},function(t,e){var r=f(d,t,this,e,d!==n);if(r.done)return r.value;var s=o(t),h=String(this),p=i(s,RegExp),g=s.unicode,y=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(v?"y":"g"),m=new p(v?s:"^(?:"+s.source+")",y),w=void 0===e?4294967295:e>>>0;if(0===w)return[];if(0===h.length)return null===c(m,h)?[h]:[];for(var b=0,x=0,S=[];x<h.length;){m.lastIndex=v?x:0;var _,E=c(m,v?h:h.slice(x));if(null===E||(_=l(a(m.lastIndex+(v?0:x)),h.length))===b)x=u(h,x,g);else{if(S.push(h.slice(b,x)),S.length===w)return S;for(var k=1;k<=E.length-1;k++)if(S.push(E[k]),S.length===w)return S;x=b=_}}return S.push(h.slice(b)),S}]}))},function(t,e,n){var r=n(1),o=n(86).set,i=r.MutationObserver||r.WebKitMutationObserver,u=r.process,a=r.Promise,c="process"==n(26)(u);t.exports=function(){var t,e,n,s=function(){var r,o;for(c&&(r=u.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(c)n=function(){u.nextTick(s)};else if(!i||r.navigator&&r.navigator.standalone)if(a&&a.resolve){var f=a.resolve(void 0);n=function(){f.then(s)}}else n=function(){o.call(r,s)};else{var l=!0,h=document.createTextNode("");new i(s).observe(h,{characterData:!0}),n=function(){h.data=l=!l}}return function(r){var o={fn:r,next:void 0};e&&(e.next=o),t||(t=o,n()),e=o}}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){"use strict";var r=n(117),o=n(40);t.exports=n(61)("Map",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(t){var e=r.getEntry(o(this,"Map"),t);return e&&e.v},set:function(t,e){return r.def(o(this,"Map"),0===t?0:t,e)}},r,!0)},function(t,e,n){"use strict";var r=n(117),o=n(40);t.exports=n(61)("Set",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return r.def(o(this,"Set"),t=0===t?0:t,t)}},r)},function(t,e,n){"use strict";var r,o=n(1),i=n(25)(0),u=n(12),a=n(30),c=n(97),s=n(118),f=n(4),l=n(40),h=n(40),p=!o.ActiveXObject&&"ActiveXObject"in o,v=a.getWeak,d=Object.isExtensible,g=s.ufstore,y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(t){if(f(t)){var e=v(t);return!0===e?g(l(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return s.def(l(this,"WeakMap"),t,e)}},w=t.exports=n(61)("WeakMap",y,m,s,!0,!0);h&&p&&(c((r=s.getConstructor(y,"WeakMap")).prototype,m),a.NEED=!0,i(["delete","has","get","set"],(function(t){var e=w.prototype,n=e[t];u(e,t,(function(e,o){if(f(e)&&!d(e)){this._f||(this._f=new r);var i=this._f[t](e,o);return"set"==t?this:i}return n.call(this,e,o)}))})))},function(t,e,n){"use strict";var r=n(118),o=n(40);n(61)("WeakSet",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return r.def(o(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,e,n){"use strict";var r=n(0),o=n(62),i=n(87),u=n(3),a=n(35),c=n(6),s=n(4),f=n(1).ArrayBuffer,l=n(50),h=i.ArrayBuffer,p=i.DataView,v=o.ABV&&f.isView,d=h.prototype.slice,g=o.VIEW;r(r.G+r.W+r.F*(f!==h),{ArrayBuffer:h}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(t){return v&&v(t)||s(t)&&g in t}}),r(r.P+r.U+r.F*n(2)((function(){return!new h(2).slice(1,void 0).byteLength})),"ArrayBuffer",{slice:function(t,e){if(void 0!==d&&void 0===e)return d.call(u(this),t);for(var n=u(this).byteLength,r=a(t,n),o=a(void 0===e?n:e,n),i=new(l(this,h))(c(o-r)),s=new p(this),f=new p(i),v=0;r<o;)f.setUint8(v++,s.getUint8(r++));return i}}),n(44)("ArrayBuffer")},function(t,e,n){var r=n(0);r(r.G+r.W+r.F*!n(62).ABV,{DataView:n(87).DataView})},function(t,e,n){n(28)("Int8",1,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){n(28)("Uint8",1,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){n(28)("Uint8",1,(function(t){return function(e,n,r){return t(this,e,n,r)}}),!0)},function(t,e,n){n(28)("Int16",2,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){n(28)("Uint16",2,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){n(28)("Int32",4,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){n(28)("Uint32",4,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){n(28)("Float32",4,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){n(28)("Float64",8,(function(t){return function(e,n,r){return t(this,e,n,r)}}))},function(t,e,n){var r=n(0),o=n(21),i=n(3),u=(n(1).Reflect||{}).apply,a=Function.apply;r(r.S+r.F*!n(2)((function(){u((function(){}))})),"Reflect",{apply:function(t,e,n){var r=o(t),c=i(n);return u?u(r,e,c):a.call(r,e,c)}})},function(t,e,n){var r=n(0),o=n(36),i=n(21),u=n(3),a=n(4),c=n(2),s=n(99),f=(n(1).Reflect||{}).construct,l=c((function(){function t(){}return!(f((function(){}),[],t)instanceof t)})),h=!c((function(){f((function(){}))}));r(r.S+r.F*(l||h),"Reflect",{construct:function(t,e){i(t),u(e);var n=arguments.length<3?t:i(arguments[2]);if(h&&!l)return f(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(s.apply(t,r))}var c=n.prototype,p=o(a(c)?c:Object.prototype),v=Function.apply.call(t,p,e);return a(v)?v:p}})},function(t,e,n){var r=n(9),o=n(0),i=n(3),u=n(29);o(o.S+o.F*n(2)((function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(t,e,n){i(t),e=u(e,!0),i(n);try{return r.f(t,e,n),!0}catch(t){return!1}}})},function(t,e,n){var r=n(0),o=n(23).f,i=n(3);r(r.S,"Reflect",{deleteProperty:function(t,e){var n=o(i(t),e);return!(n&&!n.configurable)&&delete t[e]}})},function(t,e,n){"use strict";var r=n(0),o=n(3),i=function(t){this._t=o(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};n(106)(i,"Object",(function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}})),r(r.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,e,n){var r=n(23),o=n(38),i=n(15),u=n(0),a=n(4),c=n(3);u(u.S,"Reflect",{get:function t(e,n){var u,s,f=arguments.length<3?e:arguments[2];return c(e)===f?e[n]:(u=r.f(e,n))?i(u,"value")?u.value:void 0!==u.get?u.get.call(f):void 0:a(s=o(e))?t(s,n,f):void 0}})},function(t,e,n){var r=n(23),o=n(0),i=n(3);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return r.f(i(t),e)}})},function(t,e,n){var r=n(0),o=n(38),i=n(3);r(r.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,n){var r=n(0),o=n(3),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{ownKeys:n(120)})},function(t,e,n){var r=n(0),o=n(3),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,e,n){var r=n(9),o=n(23),i=n(38),u=n(15),a=n(0),c=n(31),s=n(3),f=n(4);a(a.S,"Reflect",{set:function t(e,n,a){var l,h,p=arguments.length<4?e:arguments[3],v=o.f(s(e),n);if(!v){if(f(h=i(e)))return t(h,n,a,p);v=c(0)}if(u(v,"value")){if(!1===v.writable||!f(p))return!1;if(l=o.f(p,n)){if(l.get||l.set||!1===l.writable)return!1;l.value=a,r.f(p,n,l)}else r.f(p,n,c(0,a));return!0}return void 0!==v.set&&(v.set.call(p,a),!0)}})},function(t,e,n){var r=n(0),o=n(68);o&&r(r.S,"Reflect",{setPrototypeOf:function(t,e){o.check(t,e);try{return o.set(t,e),!0}catch(t){return!1}}})},function(t,e,n){n(281),t.exports=n(7).Array.includes},function(t,e,n){"use strict";var r=n(0),o=n(52)(!0);r(r.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(39)("includes")},function(t,e,n){n(283),t.exports=n(7).Array.flatMap},function(t,e,n){"use strict";var r=n(0),o=n(284),i=n(10),u=n(6),a=n(21),c=n(108);r(r.P,"Array",{flatMap:function(t){var e,n,r=i(this);return a(t),e=u(r.length),n=c(r,0),o(n,r,r,e,0,1,t,arguments[1]),n}}),n(39)("flatMap")},function(t,e,n){"use strict";var r=n(54),o=n(4),i=n(6),u=n(20),a=n(5)("isConcatSpreadable");t.exports=function t(e,n,c,s,f,l,h,p){for(var v,d,g=f,y=0,m=!!h&&u(h,p,3);y<s;){if(y in c){if(v=m?m(c[y],y,n):c[y],d=!1,o(v)&&(d=void 0!==(d=v[a])?!!d:r(v)),d&&l>0)g=t(e,n,v,i(v.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();e[g]=v}g++}y++}return g}},function(t,e,n){n(286),t.exports=n(7).String.padStart},function(t,e,n){"use strict";var r=n(0),o=n(121),i=n(60),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,n){n(288),t.exports=n(7).String.padEnd},function(t,e,n){"use strict";var r=n(0),o=n(121),i=n(60),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,n){n(290),t.exports=n(7).String.trimLeft},function(t,e,n){"use strict";n(42)("trimLeft",(function(t){return function(){return t(this,1)}}),"trimStart")},function(t,e,n){n(292),t.exports=n(7).String.trimRight},function(t,e,n){"use strict";n(42)("trimRight",(function(t){return function(){return t(this,2)}}),"trimEnd")},function(t,e,n){n(294),t.exports=n(64).f("asyncIterator")},function(t,e,n){n(93)("asyncIterator")},function(t,e,n){n(296),t.exports=n(7).Object.getOwnPropertyDescriptors},function(t,e,n){var r=n(0),o=n(120),i=n(17),u=n(23),a=n(80);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=i(t),c=u.f,s=o(r),f={},l=0;s.length>l;)void 0!==(n=c(r,e=s[l++]))&&a(f,e,n);return f}})},function(t,e,n){n(298),t.exports=n(7).Object.values},function(t,e,n){var r=n(0),o=n(122)(!1);r(r.S,"Object",{values:function(t){return o(t)}})},function(t,e,n){n(300),t.exports=n(7).Object.entries},function(t,e,n){var r=n(0),o=n(122)(!0);r(r.S,"Object",{entries:function(t){return o(t)}})},function(t,e,n){"use strict";n(114),n(302),t.exports=n(7).Promise.finally},function(t,e,n){"use strict";var r=n(0),o=n(7),i=n(1),u=n(50),a=n(116);r(r.P+r.R,"Promise",{finally:function(t){var e=u(this,o.Promise||i.Promise),n="function"==typeof t;return this.then(n?function(n){return a(e,t()).then((function(){return n}))}:t,n?function(n){return a(e,t()).then((function(){throw n}))}:t)}})},function(t,e,n){n(304),n(305),n(306),t.exports=n(7)},function(t,e,n){var r=n(1),o=n(0),i=n(60),u=[].slice,a=/MSIE .\./.test(i),c=function(t){return function(e,n){var r=arguments.length>2,o=!!r&&u.call(arguments,2);return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,o)}:e,n)}};o(o.G+o.B+o.F*a,{setTimeout:c(r.setTimeout),setInterval:c(r.setInterval)})},function(t,e,n){var r=n(0),o=n(86);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(t,e,n){for(var r=n(83),o=n(34),i=n(12),u=n(1),a=n(16),c=n(43),s=n(5),f=s("iterator"),l=s("toStringTag"),h=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=o(p),d=0;d<v.length;d++){var g,y=v[d],m=p[y],w=u[y],b=w&&w.prototype;if(b&&(b[f]||a(b,f,h),b[l]||a(b,l,y),c[y]=h,m))for(g in r)b[g]||i(b,g,r[g],!0)}},function(t,e,n){var r=function(t){"use strict";var e=Object.prototype,n=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",u=r.toStringTag||"@@toStringTag";function a(t,e,n,r){var o=e&&e.prototype instanceof f?e:f,i=Object.create(o.prototype),u=new S(r||[]);return i._invoke=function(t,e,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return E()}for(n.method=o,n.arg=i;;){var u=n.delegate;if(u){var a=w(u,n);if(a){if(a===s)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var f=c(t,e,n);if("normal"===f.type){if(r=n.done?"completed":"suspendedYield",f.arg===s)continue;return{value:f.arg,done:n.done}}"throw"===f.type&&(r="completed",n.method="throw",n.arg=f.arg)}}}(t,n,u),i}function c(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=a;var s={};function f(){}function l(){}function h(){}var p={};p[o]=function(){return this};var v=Object.getPrototypeOf,d=v&&v(v(_([])));d&&d!==e&&n.call(d,o)&&(p=d);var g=h.prototype=f.prototype=Object.create(p);function y(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function m(t,e){var r;this._invoke=function(o,i){function u(){return new e((function(r,u){!function r(o,i,u,a){var s=c(t[o],t,i);if("throw"!==s.type){var f=s.arg,l=f.value;return l&&"object"==typeof l&&n.call(l,"__await")?e.resolve(l.__await).then((function(t){r("next",t,u,a)}),(function(t){r("throw",t,u,a)})):e.resolve(l).then((function(t){f.value=t,u(f)}),(function(t){return r("throw",t,u,a)}))}a(s.arg)}(o,i,r,u)}))}return r=r?r.then(u,u):u()}}function w(t,e){var n=t.iterator[e.method];if(void 0===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,w(t,e),"throw"===e.method))return s;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var r=c(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,s;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,s):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,s)}function b(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function x(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function S(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(b,this),this.reset(!0)}function _(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(n.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:E}}function E(){return{value:void 0,done:!0}}return l.prototype=g.constructor=h,h.constructor=l,h[u]=l.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===l||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,h):(t.__proto__=h,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},y(m.prototype),m.prototype[i]=function(){return this},t.AsyncIterator=m,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var u=new m(a(e,n,r,o),i);return t.isGeneratorFunction(n)?u:u.next().then((function(t){return t.done?t.value:u.next()}))},y(g),g[u]="Generator",g[o]=function(){return this},g.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=_,S.prototype={constructor:S,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(n,r){return u.type="throw",u.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],u=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var a=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(a&&c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(a){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=e,i?(this.method="next",this.next=i.finallyLoc,s):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),s},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),x(n),s}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;x(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:_(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),s}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,e,n){n(309),t.exports=n(123).global},function(t,e,n){var r=n(310);r(r.G,{global:n(88)})},function(t,e,n){var r=n(88),o=n(123),i=n(311),u=n(313),a=n(320),c=function(t,e,n){var s,f,l,h=t&c.F,p=t&c.G,v=t&c.S,d=t&c.P,g=t&c.B,y=t&c.W,m=p?o:o[e]||(o[e]={}),w=m.prototype,b=p?r:v?r[e]:(r[e]||{}).prototype;for(s in p&&(n=e),n)(f=!h&&b&&void 0!==b[s])&&a(m,s)||(l=f?b[s]:n[s],m[s]=p&&"function"!=typeof b[s]?n[s]:g&&f?i(l,r):y&&b[s]==l?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(l):d&&"function"==typeof l?i(Function.call,l):l,d&&((m.virtual||(m.virtual={}))[s]=l,t&c.R&&w&&!w[s]&&u(w,s,l)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e,n){var r=n(312);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(314),o=n(319);t.exports=n(90)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(315),o=n(316),i=n(318),u=Object.defineProperty;e.f=n(90)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(89);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e,n){t.exports=!n(90)&&!n(124)((function(){return 7!=Object.defineProperty(n(317)("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(89),o=n(88).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){var r=n(89);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){"use strict";n.r(e),function(t){n.d(e,"OpenStackClient",(function(){return l}));var r=n(133),o=n.n(r),i=n(11),u=n(18),a=n(91);function c(t,e,n,r,o,i,u){try{var a=t[i](u),c=a.value}catch(t){return void n(t)}a.done?e(c):Promise.resolve(c).then(r,o)}function s(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function u(t){c(i,r,o,u,a,"next",t)}function a(t){c(i,r,o,u,a,"throw",t)}u(void 0)}))}}function f(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var l=function(){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),this.url=t}var n,r,c,l,h,p,v,d,g,y,m,w,b,x,S,_,E,k,R,O,A,P,T,F,I,j,C,N,M,L,B,U,D,G,Y,q,W,V,z,$,H,K;return n=e,(r=[{key:"authenticate",value:(K=s(regeneratorRuntime.mark((function t(e,n){var r,o,u,a,c=arguments;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=c.length>2&&void 0!==c[2]?c[2]:"Default",o=c.length>3&&void 0!==c[3]?c[3]:null,this.token=null,this.catalog=null,this.project=null,this._checkStringRequiredField("login",e),this._checkStringRequiredField("password",e),u={auth:{identity:{methods:["password"],password:{user:{name:e,password:n,domain:{name:r}}}}}},o&&(u.auth.scope={project:{name:o,domain:{name:r}}}),t.prev=9,t.next=12,this._callApi("".concat(this.url,"/auth/tokens"),"POST",!1,u);case 12:if(a=t.sent,this.token={value:a.headers["x-subject-token"],expired_at:Date.parse(a.data.token.expires_at)},this.project=a.data.token.project,!a.data.token.catalog){t.next=19;break}this.catalog=a.data.token.catalog,t.next=21;break;case 19:return t.next=21,this.getCatalog();case 21:t.next=26;break;case 23:throw t.prev=23,t.t0=t.catch(9),new i.a("Fail to authenticate user ".concat(e),t.t0);case 26:case"end":return t.stop()}}),t,this,[[9,23]])}))),function(t,e){return K.apply(this,arguments)})},{key:"getCatalog",value:(H=s(regeneratorRuntime.mark((function t(){var e;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,this._callApi("".concat(this.url,"/auth/catalog"),"GET",!0);case 3:e=t.sent,this.catalog=e.data.catalog,t.next=10;break;case 7:throw t.prev=7,t.t0=t.catch(0),new i.a("Fail to retrieve the catalog",t.t0);case 10:case"end":return t.stop()}}),t,this,[[0,7]])}))),function(){return H.apply(this,arguments)})},{key:"getRegions",value:($=s(regeneratorRuntime.mark((function t(e){var n,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(this._checkStringRequiredField("serviceType",e),this.catalog){t.next=3;break}throw new i.a("Catalog is missing or empty. Did you authenticate ?");case 3:if(n=this.catalog.filter((function(t){return t.type===e})).shift()){t.next=6;break}throw new i.a("The service '".concat(e,"' doesn't exist"));case 6:return r=n.endpoints.map((function(t){return t.region_id})),t.abrupt("return",n.endpoints.map((function(t){return{region_id:t.region_id,region:t.region}})).filter((function(t,e){return r.indexOf(t.region_id)===e})));case 8:case"end":return t.stop()}}),t,this)}))),function(t){return $.apply(this,arguments)})},{key:"getImages",value:(z=s(regeneratorRuntime.mark((function t(e){var n,r=arguments;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=r.length>1&&void 0!==r[1]?r[1]:{},t.next=3,this._openstackCall(e,"image","GET","/v2/images".concat(Object(u.b)(n)),!0,"images");case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t,this)}))),function(t){return z.apply(this,arguments)})},{key:"getComputeFlavors",value:(V=s(regeneratorRuntime.mark((function t(e){var n,r,o=this,i=arguments;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=i.length>1&&void 0!==i[1]?i[1]:{},t.next=3,this._openstackCall(e,"compute","GET","/flavors".concat(Object(u.b)(n)),!0,"flavors");case 3:return r=t.sent,t.next=6,Promise.all(r.map((function(t){return o.getComputeFlavor(e,t.id)})));case 6:return t.abrupt("return",t.sent);case 7:case"end":return t.stop()}}),t,this)}))),function(t){return V.apply(this,arguments)})},{key:"getComputeFlavor",value:(W=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this._openstackCall(e,"compute","GET","/flavors/".concat(n),!0,"flavor");case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}}),t,this)}))),function(t,e){return W.apply(this,arguments)})},{key:"getComputeKeypairs",value:(q=s(regeneratorRuntime.mark((function t(e){var n,r,o=arguments;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=o.length>1&&void 0!==o[1]?o[1]:{},t.next=3,this._openstackCall(e,"compute","GET","/os-keypairs".concat(Object(u.b)(n)),!0,"keypairs");case 3:return r=t.sent,t.abrupt("return",r.map((function(t){return t.keypair})));case 5:case"end":return t.stop()}}),t,this)}))),function(t){return q.apply(this,arguments)})},{key:"setComputeKeypair",value:(Y=s(regeneratorRuntime.mark((function t(e,n,r){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this._checkStringRequiredField("name",n),t.next=3,this._openstackCall(e,"compute","POST","/os-keypairs",!0,"keypair",{name:n,public_key:r});case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t,this)}))),function(t,e,n){return Y.apply(this,arguments)})},{key:"deleteComputeKeypair",value:(G=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this._checkStringRequiredField("name",n),t.next=3,this._openstackCall(e,"compute","DELETE","/os-keypairs/".concat(n),!0);case 3:case"end":return t.stop()}}),t,this)}))),function(t,e){return G.apply(this,arguments)})},{key:"getComputeServers",value:(D=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this._openstackCall(e,"compute","GET","/servers/detail".concat(Object(u.b)(n)),!0,"servers");case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}}),t,this)}))),function(t,e){return D.apply(this,arguments)})},{key:"createComputeServer",value:(U=s(regeneratorRuntime.mark((function t(e,n,r,o){var i,a,c=arguments;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=c.length>4&&void 0!==c[4]?c[4]:{},this._checkStringRequiredField("name",n),this._checkStringRequiredField("imageId",r),this._checkStringRequiredField("flavorId",o),a={name:n,imageRef:r,flavorRef:o},t.next=7,this._openstackCall(e,"compute","POST","/servers",!0,"server",Object(u.a)(a,i));case 7:return t.abrupt("return",t.sent);case 8:case"end":return t.stop()}}),t,this)}))),function(t,e,n,r){return U.apply(this,arguments)})},{key:"getComputeServer",value:(B=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this._checkStringRequiredField("serverId",n),t.next=3,this._openstackCall(e,"compute","GET","/servers/".concat(n),!0,"server");case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t,this)}))),function(t,e){return B.apply(this,arguments)})},{key:"getComputeServerIp",value:(L=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this._checkStringRequiredField("serverId",n),t.next=3,this._openstackCall(e,"compute","GET","/servers/".concat(n,"/ips"),!0,"addresses");case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t,this)}))),function(t,e){return L.apply(this,arguments)})},{key:"deleteComputeServer",value:(M=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this._checkStringRequiredField("serverId",n),t.next=3,this._openstackCall(e,"compute","DELETE","/servers/".concat(n),!0);case 3:case"end":return t.stop()}}),t,this)}))),function(t,e){return M.apply(this,arguments)})},{key:"actionComputeServer",value:(N=s(regeneratorRuntime.mark((function t(e,n,r){var o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this._checkStringRequiredField("serverId",n),o=this._findEndpoint("compute",e,"public"),t.prev=2,t.next=5,this._callApi("".concat(o,"/servers/").concat(n,"/action"),"POST",!0,r);case 5:t.next=10;break;case 7:throw t.prev=7,t.t0=t.catch(2),new Error("Failed to exec action ".concat(r," on server ").concat(n,": ").concat(t.t0.message));case 10:case"end":return t.stop()}}),t,this,[[2,7]])}))),function(t,e,n){return N.apply(this,arguments)})},{key:"startComputeServer",value:(C=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.actionComputeServer(e,n,{"os-start":null});case 2:case"end":return t.stop()}}),t,this)}))),function(t,e){return C.apply(this,arguments)})},{key:"stopComputeServer",value:(j=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.actionComputeServer(e,n,{"os-stop":null});case 2:case"end":return t.stop()}}),t,this)}))),function(t,e){return j.apply(this,arguments)})},{key:"rebootComputeServer",value:(I=s(regeneratorRuntime.mark((function t(e,n){var r,o=arguments;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=o.length>2&&void 0!==o[2]?o[2]:"SOFT",t.next=3,this.actionComputeServer(e,n,{reboot:{type:r}});case 3:case"end":return t.stop()}}),t,this)}))),function(t,e){return I.apply(this,arguments)})},{key:"suspendComputeServer",value:(F=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.actionComputeServer(e,n,{suspend:null});case 2:case"end":return t.stop()}}),t,this)}))),function(t,e){return F.apply(this,arguments)})},{key:"resumeComputeServer",value:(T=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.actionComputeServer(e,n,{resume:null});case 2:case"end":return t.stop()}}),t,this)}))),function(t,e){return T.apply(this,arguments)})},{key:"pauseComputeServer",value:(P=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.actionComputeServer(e,n,{pause:null});case 2:case"end":return t.stop()}}),t,this)}))),function(t,e){return P.apply(this,arguments)})},{key:"unpauseComputeServer",value:(A=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.actionComputeServer(e,n,{unpause:null});case 2:case"end":return t.stop()}}),t,this)}))),function(t,e){return A.apply(this,arguments)})},{key:"getNetworkNetworks",value:(O=s(regeneratorRuntime.mark((function t(e){var n,r,o=this,i=arguments;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=i.length>1&&void 0!==i[1]?i[1]:{},t.next=3,this._openstackCall(e,"network","GET","/v2.0/networks".concat(Object(u.b)(n)),!0,"networks");case 3:return r=t.sent,t.next=6,Promise.all(r.map((function(t){return o.getNetworkNetwork(e,t.id)})));case 6:return t.abrupt("return",t.sent);case 7:case"end":return t.stop()}}),t,this)}))),function(t){return O.apply(this,arguments)})},{key:"getNetworkNetwork",value:(R=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this._checkStringRequiredField("networkId",n),t.next=3,this._openstackCall(e,"network","GET","/v2.0/networks/".concat(n),!0,"network");case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t,this)}))),function(t,e){return R.apply(this,arguments)})},{key:"createNetworkNetwork",value:(k=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this._openstackCall(e,"network","POST","/v2.0/networks",!0,"network",n);case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}}),t,this)}))),function(t,e){return k.apply(this,arguments)})},{key:"deleteNetworkNetwork",value:(E=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this._openstackCall(e,"network","DELETE","/v2.0/networks/".concat(n),!0);case 2:case"end":return t.stop()}}),t,this)}))),function(t,e){return E.apply(this,arguments)})},{key:"getNetworkSubnets",value:(_=s(regeneratorRuntime.mark((function t(e){var n,r=arguments;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=r.length>1&&void 0!==r[1]?r[1]:{},t.next=3,this._openstackCall(e,"network","GET","/v2.0/subnets".concat(Object(u.b)(n)),!0,"subnets");case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t,this)}))),function(t){return _.apply(this,arguments)})},{key:"getNetworkSubnet",value:(S=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this._checkStringRequiredField("subnetId",n),t.next=3,this._openstackCall(e,"network","GET","/v2.0/subnets/".concat(n),!0,"subnet");case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t,this)}))),function(t,e){return S.apply(this,arguments)})},{key:"createNetworkSubnet",value:(x=s(regeneratorRuntime.mark((function t(e,n,r,o,i){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this._checkStringRequiredField("networkId",n),t.next=3,this._openstackCall(e,"network","POST","/v2.0/subnets",!0,"subnet",Object(u.a)({network_id:n,ip_version:r,cidr:o},i));case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t,this)}))),function(t,e,n,r,o){return x.apply(this,arguments)})},{key:"deleteNetworkSubnet",value:(b=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this._checkStringRequiredField("subnetId",n),t.next=3,this._openstackCall(e,"network","DELETE","/v2.0/subnets/".concat(n),!0,"subnet");case 3:case"end":return t.stop()}}),t,this)}))),function(t,e){return b.apply(this,arguments)})},{key:"getNetworkSecurityGroups",value:(w=s(regeneratorRuntime.mark((function t(e){var n,r=arguments;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=r.length>1&&void 0!==r[1]?r[1]:{},t.next=3,this._openstackCall(e,"network","GET","/v2.0/security-groups".concat(Object(u.b)(n)),!0,"security_groups");case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t,this)}))),function(t){return w.apply(this,arguments)})},{key:"getNetworkSecurityGroup",value:(m=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this._checkStringRequiredField("securityGroupId",n),t.next=3,this._openstackCall(e,"network","GET","/v2.0/security-groups/".concat(n),!0,"security_group");case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t,this)}))),function(t,e){return m.apply(this,arguments)})},{key:"createNetworkSecurityGroup",value:(y=s(regeneratorRuntime.mark((function t(e,n){var r,o=arguments;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=o.length>2&&void 0!==o[2]?o[2]:{},this._checkStringRequiredField("name",n),t.next=4,this._openstackCall(e,"network","POST","/v2.0/security-groups",!0,"security_group",Object(u.a)({name:n},r));case 4:return t.abrupt("return",t.sent);case 5:case"end":return t.stop()}}),t,this)}))),function(t,e){return y.apply(this,arguments)})},{key:"deleteNetworkSecurityGroup",value:(g=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this._checkStringRequiredField("securityGroupId",n),t.next=3,this._openstackCall(e,"network","DELETE","/v2.0/security-groups/".concat(n),!0);case 3:case"end":return t.stop()}}),t,this)}))),function(t,e){return g.apply(this,arguments)})},{key:"createNetworkSecurityGroupRule",value:(d=s(regeneratorRuntime.mark((function t(e,n,r){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this._checkStringRequiredField("securityGroupId",n),t.next=3,this._openstackCall(e,"network","POST","/v2.0/security-group-rules",!0,"security_group_rule",Object(u.a)({security_group_id:n},r));case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t,this)}))),function(t,e,n){return d.apply(this,arguments)})},{key:"hypheDeploy",value:(v=s(regeneratorRuntime.mark((function e(n,r){var o,u,c,s,f,l,h,p,v,d,g;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this._checkStringRequiredField("image in config",r.image),this._checkStringRequiredField("flavor in config",r.flavor),this._checkStringRequiredField("ssh name in config",r.ssh.name),e.next=5,this.getImages(n,{name:r.image});case 5:if(o=e.sent,u=o.shift()){e.next=9;break}throw new i.a("Fail to find image with name ".concat(r.image));case 9:return e.next=11,this.getComputeFlavor(n,r.flavor);case 11:if(c=e.sent){e.next=14;break}throw new i.a("Fail to find flavor with name ".concat(r.flavor));case 14:if(0!==c.disk||r.disk){e.next=16;break}throw new i.a("Field disk in config is required when a flavor has no disk");case 16:return e.next=18,this.getComputeKeypairs(n);case 18:if(s=e.sent,f=s.filter((function(t){return t.name===r.ssh.name})).shift()){e.next=24;break}return e.next=23,this.setComputeKeypair(n,r.ssh.name,r.ssh.key);case 23:f=e.sent;case 24:return l="hyphe-security-rules",e.next=27,this.getNetworkSecurityGroups(n);case 27:if(h=e.sent.filter((function(t){return t.name===l})).shift()){e.next=38;break}return e.next=31,this.createNetworkSecurityGroup(n,l);case 31:return h=e.sent,e.next=34,this.createNetworkSecurityGroupRule(n,h.id,{direction:"ingress",port_range_min:"80",ethertype:"IPv4",port_range_max:"81",protocol:"tcp",description:"http"});case 34:return e.next=36,this.createNetworkSecurityGroupRule(n,h.id,{direction:"ingress",port_range_min:"443",ethertype:"IPv4",port_range_max:"443",protocol:"tcp",description:"https"});case 36:return e.next=38,this.createNetworkSecurityGroupRule(n,h.id,{direction:"ingress",port_range_min:"22",ethertype:"IPv4",port_range_max:"22",protocol:"tcp",description:"ssh"});case 38:return p=a.a,r.hyphe_config&&(v=Object.keys(r.hyphe_config).map((function(t){return'echo "'.concat(t,"=").concat(r.hyphe_config[t].replace(/"/g,'\\"'),'" >> hyphe.env')})).join("\n"),p=a.a.replace("# @@_HYPHE_CONFIG_@@",v)),d=t.from(p).toString("base64"),g={key_name:f.name,user_data:d,security_groups:[{name:h.name}]},0===c.disk&&(g.block_device_mapping_v2=[{uuid:u.id,source_type:"image",destination_type:"volume",boot_index:0,volume_size:r.disk,delete_on_termination:!0}]),e.next=45,this.createComputeServer(n,r.serverName||"hyphe-server",u.id,c.id,g);case 45:return e.abrupt("return",e.sent);case 46:case"end":return e.stop()}}),e,this)}))),function(t,e){return v.apply(this,arguments)})},{key:"hypheDeleteServer",value:(p=s(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.getComputeServer(e,n);case 2:if(t.sent){t.next=5;break}throw new i.a("Fail to find server with id ".concat(n));case 5:return t.next=7,this.deleteComputeServer(e,n);case 7:case"end":return t.stop()}}),t,this)}))),function(t,e){return p.apply(this,arguments)})},{key:"_openstackCall",value:(h=s(regeneratorRuntime.mark((function t(e,n,r,o){var u,a,c,s,f,l,h=arguments;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return u=!(h.length>4&&void 0!==h[4])||h[4],a=h.length>5?h[5]:void 0,c=h.length>6?h[6]:void 0,this._checkStringRequiredField("regionId",e),s=this._findEndpoint(n,e,"public"),a&&null!=c&&((f={})[a]=c),t.prev=6,t.next=9,this._callApi("".concat(s).concat(o),r,u,f);case 9:if(!(l=t.sent).data){t.next=14;break}return t.abrupt("return",l.data[a]);case 14:return t.abrupt("return",null);case 15:t.next=20;break;case 17:throw t.prev=17,t.t0=t.catch(6),new i.a("Failed to ".concat(r," on ").concat(o," for service ").concat(n," "),t.t0);case 20:case"end":return t.stop()}}),t,this,[[6,17]])}))),function(t,e,n,r){return h.apply(this,arguments)})},{key:"_callApi",value:(l=s(regeneratorRuntime.mark((function t(e,n,r,i){var u,a;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(u={"Content-Type":"application/json"},!r){t.next=7;break}if(this.token){t.next=4;break}throw new Error("Not authenticated");case 4:if(!(this.token.expired_at<Date.now())){t.next=6;break}throw new Error("Token is expired");case 6:u["X-Auth-Token"]=this.token.value;case 7:return t.next=9,o()({url:e,method:n,headers:u,responseType:"json",data:i});case 9:return a=t.sent,t.abrupt("return",a);case 11:case"end":return t.stop()}}),t,this)}))),function(t,e,n,r){return l.apply(this,arguments)})},{key:"_findEndpoint",value:function(t,e,n){if(this._checkStringRequiredField("serviceType",t),this._checkStringRequiredField("regionId",e),!this.catalog)throw new i.a("Catalog is missing or empty. Did you authenticate ?");var r=this.catalog.filter((function(e){return e.type===t})).shift();if(!r)throw new i.a("The service '".concat(t,"' doesn't exist"));var o=r.endpoints.filter((function(t){return t.interface===n&&t.region_id===e})).shift();if(!o)throw new i.a("There is no ".concat(e," / ").concat(n," endpoint for service ").concat(t));return o.url}},{key:"_checkStringRequiredField",value:function(t,e){if(void 0===e||""===e.trim())throw new i.a("Field ".concat(t," is required"))}}])&&f(n.prototype,r),c&&f(n,c),e}()}.call(this,n(322).Buffer)},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(324),o=n(325),i=n(326);function u(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(u()<e)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=c.prototype:(null===t&&(t=new c(e)),t.length=e),t}function c(t,e,n){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return l(this,t)}return s(this,t,e,n)}function s(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);c.TYPED_ARRAY_SUPPORT?(t=e).__proto__=c.prototype:t=h(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!c.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|v(e,n),o=(t=a(t,r)).write(e,n);o!==r&&(t=t.slice(0,o));return t}(t,e,n):function(t,e){if(c.isBuffer(e)){var n=0|p(e.length);return 0===(t=a(t,n)).length||e.copy(t,0,0,n),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?a(t,0):h(t,e);if("Buffer"===e.type&&i(e.data))return h(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function f(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function l(t,e){if(f(e),t=a(t,e<0?0:0|p(e)),!c.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function h(t,e){var n=e.length<0?0:0|p(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function p(t){if(t>=u())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+u().toString(16)+" bytes");return 0|t}function v(t,e){if(c.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return D(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return G(t).length;default:if(r)return D(t).length;e=(""+e).toLowerCase(),r=!0}}function d(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return P(this,e,n);case"utf8":case"utf-8":return R(this,e,n);case"ascii":return O(this,e,n);case"latin1":case"binary":return A(this,e,n);case"base64":return k(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function y(t,e,n,r,o){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(o)return-1;n=t.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof e&&(e=c.from(e,r)),c.isBuffer(e))return 0===e.length?-1:m(t,e,n,r,o);if("number"==typeof e)return e&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):m(t,[e],n,r,o);throw new TypeError("val must be string, number or Buffer")}function m(t,e,n,r,o){var i,u=1,a=t.length,c=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;u=2,a/=2,c/=2,n/=2}function s(t,e){return 1===u?t[e]:t.readUInt16BE(e*u)}if(o){var f=-1;for(i=n;i<a;i++)if(s(t,i)===s(e,-1===f?0:i-f)){if(-1===f&&(f=i),i-f+1===c)return f*u}else-1!==f&&(i-=i-f),f=-1}else for(n+c>a&&(n=a-c),i=n;i>=0;i--){for(var l=!0,h=0;h<c;h++)if(s(t,i+h)!==s(e,h)){l=!1;break}if(l)return i}return-1}function w(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var u=0;u<r;++u){var a=parseInt(e.substr(2*u,2),16);if(isNaN(a))return u;t[n+u]=a}return u}function b(t,e,n,r){return Y(D(e,t.length-n),t,n,r)}function x(t,e,n,r){return Y(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function S(t,e,n,r){return x(t,e,n,r)}function _(t,e,n,r){return Y(G(e),t,n,r)}function E(t,e,n,r){return Y(function(t,e){for(var n,r,o,i=[],u=0;u<t.length&&!((e-=2)<0);++u)n=t.charCodeAt(u),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(e,t.length-n),t,n,r)}function k(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function R(t,e,n){n=Math.min(t.length,n);for(var r=[],o=e;o<n;){var i,u,a,c,s=t[o],f=null,l=s>239?4:s>223?3:s>191?2:1;if(o+l<=n)switch(l){case 1:s<128&&(f=s);break;case 2:128==(192&(i=t[o+1]))&&(c=(31&s)<<6|63&i)>127&&(f=c);break;case 3:i=t[o+1],u=t[o+2],128==(192&i)&&128==(192&u)&&(c=(15&s)<<12|(63&i)<<6|63&u)>2047&&(c<55296||c>57343)&&(f=c);break;case 4:i=t[o+1],u=t[o+2],a=t[o+3],128==(192&i)&&128==(192&u)&&128==(192&a)&&(c=(15&s)<<18|(63&i)<<12|(63&u)<<6|63&a)>65535&&c<1114112&&(f=c)}null===f?(f=65533,l=1):f>65535&&(f-=65536,r.push(f>>>10&1023|55296),f=56320|1023&f),r.push(f),o+=l}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=4096));return n}(r)}e.Buffer=c,e.SlowBuffer=function(t){+t!=t&&(t=0);return c.alloc(+t)},e.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=u(),c.poolSize=8192,c._augment=function(t){return t.__proto__=c.prototype,t},c.from=function(t,e,n){return s(null,t,e,n)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(t,e,n){return function(t,e,n,r){return f(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},c.allocUnsafe=function(t){return l(null,t)},c.allocUnsafeSlow=function(t){return l(null,t)},c.isBuffer=function(t){return!(null==t||!t._isBuffer)},c.compare=function(t,e){if(!c.isBuffer(t)||!c.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0},c.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return c.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=c.allocUnsafe(e),o=0;for(n=0;n<t.length;++n){var u=t[n];if(!c.isBuffer(u))throw new TypeError('"list" argument must be an Array of Buffers');u.copy(r,o),o+=u.length}return r},c.byteLength=v,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},c.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},c.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},c.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?R(this,0,t):d.apply(this,arguments)},c.prototype.equals=function(t){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===c.compare(this,t)},c.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},c.prototype.compare=function(t,e,n,r,o){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),e<0||n>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&e>=n)return 0;if(r>=o)return-1;if(e>=n)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(r>>>=0),u=(n>>>=0)-(e>>>=0),a=Math.min(i,u),s=this.slice(r,o),f=t.slice(e,n),l=0;l<a;++l)if(s[l]!==f[l]){i=s[l],u=f[l];break}return i<u?-1:u<i?1:0},c.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},c.prototype.indexOf=function(t,e,n){return y(this,t,e,n,!0)},c.prototype.lastIndexOf=function(t,e,n){return y(this,t,e,n,!1)},c.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return w(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return x(this,t,e,n);case"latin1":case"binary":return S(this,t,e,n);case"base64":return _(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function O(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function A(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function P(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;++i)o+=U(t[i]);return o}function T(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function F(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function I(t,e,n,r,o,i){if(!c.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function j(t,e,n,r){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-n,2);o<i;++o)t[n+o]=(e&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function C(t,e,n,r){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-n,4);o<i;++o)t[n+o]=e>>>8*(r?o:3-o)&255}function N(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function M(t,e,n,r,i){return i||N(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function L(t,e,n,r,i){return i||N(t,0,n,8),o.write(t,e,n,r,52,8),n+8}c.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),c.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=c.prototype;else{var o=e-t;n=new c(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+t]}return n},c.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||F(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r},c.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||F(t,e,this.length);for(var r=this[t+--e],o=1;e>0&&(o*=256);)r+=this[t+--e]*o;return r},c.prototype.readUInt8=function(t,e){return e||F(t,1,this.length),this[t]},c.prototype.readUInt16LE=function(t,e){return e||F(t,2,this.length),this[t]|this[t+1]<<8},c.prototype.readUInt16BE=function(t,e){return e||F(t,2,this.length),this[t]<<8|this[t+1]},c.prototype.readUInt32LE=function(t,e){return e||F(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},c.prototype.readUInt32BE=function(t,e){return e||F(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},c.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||F(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*e)),r},c.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||F(t,e,this.length);for(var r=e,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},c.prototype.readInt8=function(t,e){return e||F(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},c.prototype.readInt16LE=function(t,e){e||F(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(t,e){e||F(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(t,e){return e||F(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},c.prototype.readInt32BE=function(t,e){return e||F(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},c.prototype.readFloatLE=function(t,e){return e||F(t,4,this.length),o.read(this,t,!0,23,4)},c.prototype.readFloatBE=function(t,e){return e||F(t,4,this.length),o.read(this,t,!1,23,4)},c.prototype.readDoubleLE=function(t,e){return e||F(t,8,this.length),o.read(this,t,!0,52,8)},c.prototype.readDoubleBE=function(t,e){return e||F(t,8,this.length),o.read(this,t,!1,52,8)},c.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||I(this,t,e,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[e]=255&t;++i<n&&(o*=256);)this[e+i]=t/o&255;return e+n},c.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||I(this,t,e,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+n},c.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,1,255,0),c.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},c.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):j(this,t,e,!0),e+2},c.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):j(this,t,e,!1),e+2},c.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):C(this,t,e,!0),e+4},c.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):C(this,t,e,!1),e+4},c.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);I(this,t,e,n,o-1,-o)}var i=0,u=1,a=0;for(this[e]=255&t;++i<n&&(u*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/u>>0)-a&255;return e+n},c.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);I(this,t,e,n,o-1,-o)}var i=n-1,u=1,a=0;for(this[e+i]=255&t;--i>=0&&(u*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/u>>0)-a&255;return e+n},c.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,1,127,-128),c.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},c.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):j(this,t,e,!0),e+2},c.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):j(this,t,e,!1),e+2},c.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):C(this,t,e,!0),e+4},c.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):C(this,t,e,!1),e+4},c.prototype.writeFloatLE=function(t,e,n){return M(this,t,e,!0,n)},c.prototype.writeFloatBE=function(t,e,n){return M(this,t,e,!1,n)},c.prototype.writeDoubleLE=function(t,e,n){return L(this,t,e,!0,n)},c.prototype.writeDoubleBE=function(t,e,n){return L(this,t,e,!1,n)},c.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var o,i=r-n;if(this===t&&n<e&&e<r)for(o=i-1;o>=0;--o)t[o+e]=this[o+n];else if(i<1e3||!c.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+i),e);return i},c.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!c.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{var u=c.isBuffer(t)?t:D(new c(t,r).toString()),a=u.length;for(i=0;i<n-e;++i)this[i+e]=u[i%a]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function U(t){return t<16?"0"+t.toString(16):t.toString(16)}function D(t,e){var n;e=e||1/0;for(var r=t.length,o=null,i=[],u=0;u<r;++u){if((n=t.charCodeAt(u))>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(u+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function G(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(B,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function Y(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}}).call(this,n(323))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";e.byteLength=function(t){var e=s(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=s(t),u=r[0],a=r[1],c=new i(function(t,e,n){return 3*(e+n)/4-n}(0,u,a)),f=0,l=a>0?u-4:u;for(n=0;n<l;n+=4)e=o[t.charCodeAt(n)]<<18|o[t.charCodeAt(n+1)]<<12|o[t.charCodeAt(n+2)]<<6|o[t.charCodeAt(n+3)],c[f++]=e>>16&255,c[f++]=e>>8&255,c[f++]=255&e;2===a&&(e=o[t.charCodeAt(n)]<<2|o[t.charCodeAt(n+1)]>>4,c[f++]=255&e);1===a&&(e=o[t.charCodeAt(n)]<<10|o[t.charCodeAt(n+1)]<<4|o[t.charCodeAt(n+2)]>>2,c[f++]=e>>8&255,c[f++]=255&e);return c},e.fromByteArray=function(t){for(var e,n=t.length,o=n%3,i=[],u=0,a=n-o;u<a;u+=16383)i.push(f(t,u,u+16383>a?a:u+16383));1===o?(e=t[n-1],i.push(r[e>>2]+r[e<<4&63]+"==")):2===o&&(e=(t[n-2]<<8)+t[n-1],i.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,c=u.length;a<c;++a)r[a]=u[a],o[u.charCodeAt(a)]=a;function s(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function f(t,e,n){for(var o,i,u=[],a=e;a<n;a+=3)o=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),u.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return u.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,o){var i,u,a=8*o-r-1,c=(1<<a)-1,s=c>>1,f=-7,l=n?o-1:0,h=n?-1:1,p=t[e+l];for(l+=h,i=p&(1<<-f)-1,p>>=-f,f+=a;f>0;i=256*i+t[e+l],l+=h,f-=8);for(u=i&(1<<-f)-1,i>>=-f,f+=r;f>0;u=256*u+t[e+l],l+=h,f-=8);if(0===i)i=1-s;else{if(i===c)return u?NaN:1/0*(p?-1:1);u+=Math.pow(2,r),i-=s}return(p?-1:1)*u*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var u,a,c,s=8*i-o-1,f=(1<<s)-1,l=f>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:i-1,v=r?1:-1,d=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,u=f):(u=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-u))<1&&(u--,c*=2),(e+=u+l>=1?h/c:h*Math.pow(2,1-l))*c>=2&&(u++,c/=2),u+l>=f?(a=0,u=f):u+l>=1?(a=(e*c-1)*Math.pow(2,o),u+=l):(a=e*Math.pow(2,l-1)*Math.pow(2,o),u=0));o>=8;t[n+p]=255&a,p+=v,a/=256,o-=8);for(u=u<<o|a,s+=o;s>0;t[n+p]=255&u,p+=v,u/=256,s-=8);t[n+p-v]|=128*d}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";var r=n(14),o=n(125),i=n(328),u=n(131);function a(t){var e=new i(t),n=o(i.prototype.request,e);return r.extend(n,i.prototype,e),r.extend(n,e),n}var c=a(n(128));c.Axios=i,c.create=function(t){return a(u(c.defaults,t))},c.Cancel=n(132),c.CancelToken=n(342),c.isCancel=n(127),c.all=function(t){return Promise.all(t)},c.spread=n(343),t.exports=c,t.exports.default=c},function(t,e,n){"use strict";var r=n(14),o=n(126),i=n(329),u=n(330),a=n(131);function c(t){this.defaults=t,this.interceptors={request:new i,response:new i}}c.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=a(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var e=[u,void 0],n=Promise.resolve(t);for(this.interceptors.request.forEach((function(t){e.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){e.push(t.fulfilled,t.rejected)}));e.length;)n=n.then(e.shift(),e.shift());return n},c.prototype.getUri=function(t){return t=a(this.defaults,t),o(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(t){c.prototype[t]=function(e,n){return this.request(r.merge(n||{},{method:t,url:e}))}})),r.forEach(["post","put","patch"],(function(t){c.prototype[t]=function(e,n,o){return this.request(r.merge(o||{},{method:t,url:e,data:n}))}})),t.exports=c},function(t,e,n){"use strict";var r=n(14);function o(){this.handlers=[]}o.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},o.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},o.prototype.forEach=function(t){r.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=o},function(t,e,n){"use strict";var r=n(14),o=n(331),i=n(127),u=n(128);function a(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return a(t),t.headers=t.headers||{},t.data=o(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||u.adapter)(t).then((function(e){return a(t),e.data=o(e.data,e.headers,t.transformResponse),e}),(function(e){return i(e)||(a(t),e&&e.response&&(e.response.data=o(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},function(t,e,n){"use strict";var r=n(14);t.exports=function(t,e,n){return r.forEach(n,(function(n){t=n(t,e)})),t}},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:u}catch(t){r=u}}();var c,s=[],f=!1,l=-1;function h(){f&&c&&(f=!1,c.length?s=c.concat(s):l=-1,s.length&&p())}function p(){if(!f){var t=a(h);f=!0;for(var e=s.length;e;){for(c=s,s=[];++l<e;)c&&c[l].run();l=-1,e=s.length}c=null,f=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===u||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function v(t,e){this.fun=t,this.array=e}function d(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];s.push(new v(t,e)),1!==s.length||f||a(p)},v.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=d,o.addListener=d,o.once=d,o.off=d,o.removeListener=d,o.removeAllListeners=d,o.emit=d,o.prependListener=d,o.prependOnceListener=d,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){"use strict";var r=n(14);t.exports=function(t,e){r.forEach(t,(function(n,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[r])}))}},function(t,e,n){"use strict";var r=n(130);t.exports=function(t,e,n){var o=n.config.validateStatus;!o||o(n.status)?t(n):e(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(t,e,n){"use strict";t.exports=function(t,e,n,r,o){return t.config=e,n&&(t.code=n),t.request=r,t.response=o,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},function(t,e,n){"use strict";var r=n(337),o=n(338);t.exports=function(t,e){return t&&!r(e)?o(t,e):e}},function(t,e,n){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,e,n){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},function(t,e,n){"use strict";var r=n(14),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,i,u={};return t?(r.forEach(t.split("\n"),(function(t){if(i=t.indexOf(":"),e=r.trim(t.substr(0,i)).toLowerCase(),n=r.trim(t.substr(i+1)),e){if(u[e]&&o.indexOf(e)>=0)return;u[e]="set-cookie"===e?(u[e]?u[e]:[]).concat([n]):u[e]?u[e]+", "+n:n}})),u):u}},function(t,e,n){"use strict";var r=n(14);t.exports=r.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(t){var r=t;return e&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=o(window.location.href),function(e){var n=r.isString(e)?o(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0}},function(t,e,n){"use strict";var r=n(14);t.exports=r.isStandardBrowserEnv()?{write:function(t,e,n,o,i,u){var a=[];a.push(t+"="+encodeURIComponent(e)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(o)&&a.push("path="+o),r.isString(i)&&a.push("domain="+i),!0===u&&a.push("secure"),document.cookie=a.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,e,n){"use strict";var r=n(132);function o(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var n=this;t((function(t){n.reason||(n.reason=new r(t),e(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var t;return{token:new o((function(e){t=e})),cancel:t}},t.exports=o},function(t,e,n){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50L3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9zcmMvZXJyb3IuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9zcmMvdXRpbC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL3NyYy9zaGVsbC9zY3JpcHQuc2giLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3BvbHlmaWxsL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9wb2x5ZmlsbC9saWIvbm9Db25mbGljdC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZXM2L2luZGV4LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWZyb3VuZC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zZXQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9hcnJheS9pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL2FycmF5L2ZsYXQtbWFwLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy90cmltLXN0YXJ0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1lbmQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zeW1ib2wvYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvdmFsdWVzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZW50cmllcy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3Byb21pc2UvZmluYWxseS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy93ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vZ2xvYmFsLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovL29wZW5zdGFjay1jbGllbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly9vcGVuc3RhY2stY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vb3BlbnN0YWNrLWNsaWVudC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsInRoaXMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZ2xvYmFsIiwiY29yZSIsImhpZGUiLCJyZWRlZmluZSIsImN0eCIsIiRleHBvcnQiLCJ0eXBlIiwic291cmNlIiwib3duIiwib3V0IiwiZXhwIiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJTIiwiSVNfUFJPVE8iLCJQIiwiSVNfQklORCIsIkIiLCJ0YXJnZXQiLCJleHBQcm90byIsInVuZGVmaW5lZCIsIkZ1bmN0aW9uIiwiVSIsIlciLCJSIiwid2luZG93IiwiTWF0aCIsIl9fZyIsImV4ZWMiLCJlIiwiaXNPYmplY3QiLCJpdCIsIlR5cGVFcnJvciIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsInRvSW50ZWdlciIsIm1pbiIsInZlcnNpb24iLCJfX2UiLCJhIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiZFAiLCJmIiwiTyIsIkF0dHJpYnV0ZXMiLCJkZWZpbmVkIiwiT3BlblN0YWNrRXJyb3IiLCJtZXNzYWdlIiwiZXJyb3IiLCJzdGFjayIsIkVycm9yIiwiY29kZSIsImRhdGEiLCJyZXNwb25zZSIsInN0YXR1cyIsImhhcyIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsInNwbGl0IiwiaW5zcGVjdFNvdXJjZSIsInZhbCIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiam9pbiIsIlN0cmluZyIsImZhaWxzIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJwMSIsInJlcGxhY2UiLCJOQU1FIiwidGVzdCIsInRvTG93ZXJDYXNlIiwibGVuZ3RoIiwidG9TdHJpbmciLCJpc0FycmF5IiwiaXNVbmRlZmluZWQiLCJmb3JFYWNoIiwib2JqIiwiZm4iLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJjb25zdHJ1Y3RvciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJkb2N1bWVudCIsIm1lcmdlIiwicmVzdWx0IiwiYXNzaWduVmFsdWUiLCJhcmd1bWVudHMiLCJkZWVwTWVyZ2UiLCJleHRlbmQiLCJiIiwidGhpc0FyZyIsInRyaW0iLCJzdHIiLCJjcmVhdGVEZXNjIiwiSU9iamVjdCIsImpzb25Ub1F1ZXJ5U3RyaW5nIiwianNvbiIsImtleXMiLCJtYXAiLCJlbmNvZGVVUklDb21wb25lbnQiLCJpdGVtIiwiQXJyYXkiLCJvdXRwdXQiLCJhc3NpZ24iLCJtZXRob2QiLCJhcmciLCJhRnVuY3Rpb24iLCJ0aGF0IiwiYXBwbHkiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsInBJRSIsInRvSU9iamVjdCIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJLRVkiLCJ0b09iamVjdCIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJpbmRleCIsInB1c2giLCJzbGljZSIsIkxJQlJBUlkiLCIkdHlwZWQiLCIkYnVmZmVyIiwiYW5JbnN0YW5jZSIsInByb3BlcnR5RGVzYyIsInJlZGVmaW5lQWxsIiwidG9JbmRleCIsInRvQWJzb2x1dGVJbmRleCIsImNsYXNzb2YiLCJpc0FycmF5SXRlciIsImdldFByb3RvdHlwZU9mIiwiZ09QTiIsImdldEl0ZXJGbiIsIndrcyIsImNyZWF0ZUFycmF5TWV0aG9kIiwiY3JlYXRlQXJyYXlJbmNsdWRlcyIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIkFycmF5SXRlcmF0b3JzIiwiSXRlcmF0b3JzIiwiJGl0ZXJEZXRlY3QiLCJzZXRTcGVjaWVzIiwiYXJyYXlGaWxsIiwiYXJyYXlDb3B5V2l0aGluIiwiJERQIiwiJEdPUEQiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsIkFycmF5UHJvdG8iLCIkQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwidmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwiZW50cmllcyIsImFycmF5TGFzdEluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFycmF5UmVkdWNlIiwicmVkdWNlIiwiYXJyYXlSZWR1Y2VSaWdodCIsInJlZHVjZVJpZ2h0IiwiYXJyYXlKb2luIiwiYXJyYXlTb3J0Iiwic29ydCIsImFycmF5U2xpY2UiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlUb0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiSVRFUkFUT1IiLCJUQUciLCJUWVBFRF9DT05TVFJVQ1RPUiIsIkRFRl9DT05TVFJVQ1RPUiIsIkFMTF9DT05TVFJVQ1RPUlMiLCJDT05TVFIiLCJUWVBFRF9BUlJBWSIsIlRZUEVEIiwiVklFVyIsIiRtYXAiLCJhbGxvY2F0ZSIsIkxJVFRMRV9FTkRJQU4iLCJVaW50MTZBcnJheSIsIkZPUkNFRF9TRVQiLCJzZXQiLCJ0b09mZnNldCIsIkJZVEVTIiwib2Zmc2V0IiwidmFsaWRhdGUiLCJDIiwic3BlY2llc0Zyb21MaXN0IiwibGlzdCIsImZyb21MaXN0IiwiYWRkR2V0dGVyIiwiaW50ZXJuYWwiLCJfZCIsIiRmcm9tIiwic3RlcCIsIml0ZXJhdG9yIiwiYUxlbiIsIm1hcGZuIiwibWFwcGluZyIsIml0ZXJGbiIsIm5leHQiLCJkb25lIiwiJG9mIiwiVE9fTE9DQUxFX0JVRyIsIiR0b0xvY2FsZVN0cmluZyIsInByb3RvIiwiY29weVdpdGhpbiIsInN0YXJ0IiwiZXZlcnkiLCJmaWxsIiwiZmlsdGVyIiwiZmluZCIsInByZWRpY2F0ZSIsImZpbmRJbmRleCIsImluZGV4T2YiLCJzZWFyY2hFbGVtZW50IiwiaW5jbHVkZXMiLCJzZXBhcmF0b3IiLCJyZXZlcnNlIiwibWlkZGxlIiwic29tZSIsImNvbXBhcmVmbiIsInN1YmFycmF5IiwiYmVnaW4iLCJlbmQiLCIkYmVnaW4iLCJieXRlT2Zmc2V0IiwiQllURVNfUEVSX0VMRU1FTlQiLCIkc2xpY2UiLCIkc2V0IiwiYXJyYXlMaWtlIiwic3JjIiwibGVuIiwiJGl0ZXJhdG9ycyIsImlzVEFJbmRleCIsIiRnZXREZXNjIiwiJHNldERlc2MiLCJkZXNjIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCIkVHlwZWRBcnJheVByb3RvdHlwZSQiLCJ3cmFwcGVyIiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIlR5cGVkQXJyYXkiLCJCYXNlIiwiVEFDIiwiRk9SQ0VEIiwiQUJWIiwiVHlwZWRBcnJheVByb3RvdHlwZSIsImFkZEVsZW1lbnQiLCJ2Iiwicm91bmQiLCJzZXR0ZXIiLCIkb2Zmc2V0IiwiJGxlbmd0aCIsImJ5dGVMZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCJpdGVyIiwiY29uY2F0IiwiJG5hdGl2ZUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCIkaXRlcmF0b3IiLCJvZiIsImZyb20iLCJ2YWx1ZU9mIiwiTUVUQSIsInNldERlc2MiLCJpZCIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsInciLCJtZXRhIiwiTkVFRCIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJiaXRtYXAiLCJweCIsInJhbmRvbSIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJtYXgiLCJkUHMiLCJJRV9QUk9UTyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIk9iamVjdFByb3RvIiwiVU5TQ09QQUJMRVMiLCJfdCIsImRlZiIsInN0YXQiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwiUmVnRXhwIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJERVNDUklQVE9SUyIsIlNQRUNJRVMiLCJDb25zdHJ1Y3RvciIsImZvcmJpZGRlbkZpZWxkIiwiY29mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJBUkciLCJUIiwidHJ5R2V0IiwiY2FsbGVlIiwiRCIsImNvcHlyaWdodCIsIklTX0lOQ0xVREVTIiwiZWwiLCJmcm9tSW5kZXgiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwiYXJyIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCJidWlsdGluRXhlYyIsInJlZ2V4cEV4ZWMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsInJlIiwiZ3JvdXBzIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsImZucyIsIm5hdGl2ZU1ldGhvZCIsInJlZ2V4cCIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmZuIiwicnhmbiIsIkJSRUFLIiwiUkVUVVJOIiwiaXRlcmFibGUiLCJ1c2VyQWdlbnQiLCJmb3JPZiIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJjbGVhciIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwiaXMiLCJjcmVhdGVFbGVtZW50Iiwic2hhcmVkIiwiZG9jdW1lbnRFbGVtZW50IiwiY2hlY2siLCJzZXRQcm90b3R5cGVPZiIsImJ1Z2d5IiwiX19wcm90b19fIiwiY291bnQiLCJJbmZpbml0eSIsInNpZ24iLCJ4IiwiJGV4cG0xIiwiZXhwbTEiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQ29kZUF0IiwiY2hhckF0IiwiJGl0ZXJDcmVhdGUiLCJCVUdHWSIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJpc1JlZ0V4cCIsInNlYXJjaFN0cmluZyIsIk1BVENIIiwiJGRlZmluZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJlbmRQb3MiLCJhZGRUb1Vuc2NvcGFibGVzIiwiaXRlcmF0ZWQiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsImxhc3RJbmRleCIsInJlQ29weSIsIm1hdGNoIiwiYXQiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiaHRtbCIsImNlbCIsInByb2Nlc3MiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwibGlzdGVuZXIiLCJldmVudCIsImFyZ3MiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwiQmFzZUJ1ZmZlciIsImFicyIsInBvdyIsImxvZyIsIkxOMiIsIiRCVUZGRVIiLCIkTEVOR1RIIiwiJE9GRlNFVCIsInBhY2tJRUVFNzU0IiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJydCIsInVucGFja0lFRUU3NTQiLCJuQml0cyIsIk5hTiIsInVucGFja0kzMiIsImJ5dGVzIiwicGFja0k4IiwicGFja0kxNiIsInBhY2tJMzIiLCJwYWNrRjY0IiwicGFja0YzMiIsInZpZXciLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4IiwiX2IiLCJwYWNrIiwiY29udmVyc2lvbiIsIkFycmF5QnVmZmVyUHJvdG8iLCJqIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJ3a3NFeHQiLCIkU3ltYm9sIiwibmFtZXMiLCJnZXRLZXlzIiwiZGVmaW5lUHJvcGVydGllcyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJnT1BTIiwiJGFzc2lnbiIsIkEiLCJLIiwiayIsImdldFN5bWJvbHMiLCJpc0VudW0iLCJ5IiwiZmFjdG9yaWVzIiwiY29uc3RydWN0IiwicGFydEFyZ3MiLCJib3VuZCIsInVuIiwiJHBhcnNlSW50IiwicGFyc2VJbnQiLCIkdHJpbSIsIndzIiwiaGV4IiwicmFkaXgiLCIkcGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJtc2ciLCJpc0Zpbml0ZSIsImxvZzFwIiwiZGVzY3JpcHRvciIsInJldCIsIm9yaWdpbmFsIiwibWVtbyIsImlzUmlnaHQiLCJ0byIsImluYyIsImZvcmNlZCIsImZsYWdzIiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJ0YXNrIiwibWljcm90YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwicHJvbWlzZVJlc29sdmUiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJpc05vZGUiLCJlbXB0eSIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwiVVNFX05BVElWRSIsInByb21pc2UiLCJyZXNvbHZlIiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJ0aGVuIiwiaXNUaGVuYWJsZSIsIm5vdGlmeSIsImlzUmVqZWN0IiwiX24iLCJjaGFpbiIsIl9jIiwiX3YiLCJvayIsIl9zIiwicmVhY3Rpb24iLCJleGl0ZWQiLCJoYW5kbGVyIiwiZmFpbCIsInJlamVjdCIsImRvbWFpbiIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJlbnRlciIsImV4aXQiLCJvblVuaGFuZGxlZCIsImNvbnNvbGUiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJleGVjdXRvciIsImVyciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIlByb21pc2UiLCJjYXBhYmlsaXR5IiwiJCRyZWplY3QiLCJhbGwiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIlByb21pc2VDYXBhYmlsaXR5IiwiJCRyZXNvbHZlIiwicHJvbWlzZUNhcGFiaWxpdHkiLCIkaXRlckRlZmluZSIsIlNJWkUiLCJnZXRFbnRyeSIsImVudHJ5IiwiX2YiLCJfbCIsInByZXYiLCIkaGFzIiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsIlVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCJzcGxpY2UiLCJ1ZnN0b3JlIiwibnVtYmVyIiwiUmVmbGVjdCIsIm93bktleXMiLCJyZXBlYXQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaXNFbnRyaWVzIiwidXRpbHMiLCJlbmNvZGUiLCJ1cmwiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidG9JU09TdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiaGFzaG1hcmtJbmRleCIsIl9fQ0FOQ0VMX18iLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwic2V0dGxlIiwiYnVpbGRVUkwiLCJidWlsZEZ1bGxQYXRoIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJjb25maWciLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdCIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJ0b1VwcGVyQ2FzZSIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwicmVhZCIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJlbmhhbmNlRXJyb3IiLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzJLZXlzIiwibWVyZ2VEZWVwUHJvcGVydGllc0tleXMiLCJkZWZhdWx0VG9Db25maWcyS2V5cyIsInByb3AiLCJheGlvc0tleXMiLCJvdGhlcktleXMiLCJDYW5jZWwiLCJfZ2xvYmFsIiwiX2JhYmVsUG9seWZpbGwiLCJ3YXJuIiwiJGZhaWxzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BTIiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiUU9iamVjdCIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJ3cmFwIiwic3ltIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsInN5bWJvbHMiLCIkZ2V0UHJvdG90eXBlT2YiLCIkZnJlZXplIiwiJHNlYWwiLCIkcHJldmVudEV4dGVuc2lvbnMiLCIkaXNGcm96ZW4iLCIkaXNTZWFsZWQiLCIkaXNFeHRlbnNpYmxlIiwiRlByb3RvIiwibmFtZVJFIiwiSEFTX0lOU1RBTkNFIiwiRnVuY3Rpb25Qcm90byIsIiROdW1iZXIiLCJCUk9LRU5fQ09GIiwiVFJJTSIsInRvTnVtYmVyIiwiYXJndW1lbnQiLCJ0aGlyZCIsIm1heENvZGUiLCJmaXJzdCIsImRpZ2l0cyIsImFOdW1iZXJWYWx1ZSIsIiR0b0ZpeGVkIiwidG9GaXhlZCIsIkVSUk9SIiwibXVsdGlwbHkiLCJjMiIsImRpdmlkZSIsIm51bVRvU3RyaW5nIiwiYWNjIiwiZnJhY3Rpb25EaWdpdHMiLCJ6IiwieDIiLCIkdG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIkVQU0lMT04iLCJfaXNGaW5pdGUiLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJOdW1iZXIiLCJzcXJ0IiwiJGFjb3NoIiwiYWNvc2giLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsImNsejMyIiwiTE9HMkUiLCJjb3NoIiwiZnJvdW5kIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsIiRhYnMiLCIkc2lnbiIsImh5cG90IiwidmFsdWUxIiwidmFsdWUyIiwiZGl2Iiwic3VtIiwibGFyZyIsIiRpbXVsIiwiaW11bCIsInhuIiwieW4iLCJ4bCIsInlsIiwibG9nMTAiLCJMT0cxMEUiLCJsb2cyIiwic2luaCIsInRhbmgiLCJ0cnVuYyIsImZyb21DaGFyQ29kZSIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsInJhdyIsImNhbGxTaXRlIiwidHBsIiwiJGF0IiwicG9pbnQiLCJjb2RlUG9pbnRBdCIsImNvbnRleHQiLCIkZW5kc1dpdGgiLCJlbmRzV2l0aCIsImVuZFBvc2l0aW9uIiwic2VhcmNoIiwiJHN0YXJ0c1dpdGgiLCJzdGFydHNXaXRoIiwiY29sb3IiLCJzaXplIiwiRGF0ZSIsImdldFRpbWUiLCJ0b0pTT04iLCJwdiIsIiR0b0lTT1N0cmluZyIsImx6IiwibnVtIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiRGF0ZVByb3RvIiwiaGludCIsImNyZWF0ZVByb3BlcnR5IiwidXBUbyIsImNsb25lZCIsIiRzb3J0IiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkZmlsdGVyIiwiJHNvbWUiLCIkZXZlcnkiLCIkcmVkdWNlIiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiJGZpbmQiLCIkZmxhZ3MiLCIkUmVnRXhwIiwiQ09SUkVDVF9ORVciLCJ0aVJFIiwicGlSRSIsImZpVSIsInByb3h5IiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIiRtYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsInJ4IiwiZnVsbFVuaWNvZGUiLCJtYXRjaFN0ciIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsImZ1bmN0aW9uYWxSZXBsYWNlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsInBvc2l0aW9uIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZXJBcmdzIiwicmVwbGFjZW1lbnQiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwiY2giLCJjYXB0dXJlIiwic2FtZVZhbHVlIiwiU0VBUkNIIiwiJHNlYXJjaCIsInByZXZpb3VzTGFzdEluZGV4IiwiY2FsbFJlZ0V4cEV4ZWMiLCIkbWluIiwiJHB1c2giLCJMRU5HVEgiLCJTVVBQT1JUU19ZIiwiU1BMSVQiLCIkc3BsaXQiLCJpbnRlcm5hbFNwbGl0IiwibGltaXQiLCJsYXN0TGVuZ3RoIiwibGFzdExhc3RJbmRleCIsInNwbGl0TGltaXQiLCJzZXBhcmF0b3JDb3B5Iiwic3BsaXR0ZXIiLCJ1bmljb2RlTWF0Y2hpbmciLCJsaW0iLCJxIiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImhlYWQiLCJsYXN0IiwiZmx1c2giLCJwYXJlbnQiLCJzdGFuZGFsb25lIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJzdHJvbmciLCJhZGQiLCJJbnRlcm5hbE1hcCIsImVhY2giLCJ3ZWFrIiwiTkFUSVZFX1dFQUtfTUFQIiwiSVNfSUUxMSIsIkFjdGl2ZVhPYmplY3QiLCIkV2Vha01hcCIsIiRpc1ZpZXciLCJmaW4iLCJ2aWV3UyIsInZpZXdUIiwiaW5pdCIsInJBcHBseSIsImZBcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCJMIiwickNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsInByb3BlcnR5S2V5IiwiYXR0cmlidXRlcyIsImRlbGV0ZVByb3BlcnR5IiwiRW51bWVyYXRlIiwiZW51bWVyYXRlIiwicmVjZWl2ZXIiLCJnZXRQcm90byIsIlYiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJvd25EZXNjIiwic2V0UHJvdG8iLCIkaW5jbHVkZXMiLCJmbGF0TWFwIiwiZmxhdHRlbkludG9BcnJheSIsImFycmF5U3BlY2llc0NyZWF0ZSIsInNvdXJjZUxlbiIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiZGVwdGgiLCJtYXBwZXIiLCJlbGVtZW50Iiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsInBhZFN0YXJ0IiwiJHBhZCIsIldFQktJVF9CVUciLCJwYWRFbmQiLCJ0cmltTGVmdCIsInRyaW1SaWdodCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiJHZhbHVlcyIsIm9uRmluYWxseSIsIk1TSUUiLCJ0aW1lIiwiYm91bmRBcmdzIiwic2V0SW50ZXJ2YWwiLCIkdGFzayIsIlRPX1NUUklOR19UQUciLCJBcnJheVZhbHVlcyIsIkRPTUl0ZXJhYmxlcyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY29sbGVjdGlvbnMiLCJleHBsaWNpdCIsIkNvbGxlY3Rpb24iLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsInN0YXRlIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhdG9yTWV0aG9kIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsImFzeW5jIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiSVNfV1JBUCIsInZpcnR1YWwiLCJPcGVuU3RhY2tDbGllbnQiLCJsb2dpbiIsInByb2plY3QiLCJ0b2tlbiIsImNhdGFsb2ciLCJfY2hlY2tTdHJpbmdSZXF1aXJlZEZpZWxkIiwiYm9keSIsImlkZW50aXR5IiwidXNlciIsInNjb3BlIiwiX2NhbGxBcGkiLCJleHBpcmVkX2F0IiwiZXhwaXJlc19hdCIsImdldENhdGFsb2ciLCJzZXJ2aWNlVHlwZSIsInNlcnZpY2UiLCJzaGlmdCIsInJlZ2lvbklkQXJyYXkiLCJlbmRwb2ludHMiLCJlbmRwb2ludCIsInJlZ2lvbl9pZCIsInJlZ2lvbiIsInJlZ2lvbklkIiwib3B0aW9ucyIsIl9vcGVuc3RhY2tDYWxsIiwiZmxhdm9ycyIsImZsYXZvciIsImdldENvbXB1dGVGbGF2b3IiLCJmbGF2b3JJZCIsImtleXBhaXJzIiwia2V5cGFpciIsInB1YmxpY0tleSIsInB1YmxpY19rZXkiLCJpbWFnZUlkIiwic2VydmVyIiwic2VydmVyTWluaSIsImltYWdlUmVmIiwiZmxhdm9yUmVmIiwic2VydmVySWQiLCJhY3Rpb25Cb2R5IiwiX2ZpbmRFbmRwb2ludCIsImFjdGlvbkNvbXB1dGVTZXJ2ZXIiLCJyZWJvb3RUeXBlIiwicmVib290Iiwic3VzcGVuZCIsInJlc3VtZSIsInBhdXNlIiwidW5wYXVzZSIsIm5ldHdvcmtzIiwibmV0d29yayIsImdldE5ldHdvcmtOZXR3b3JrIiwibmV0d29ya0lkIiwic3VibmV0SWQiLCJpcFZlcnNpb24iLCJjaWRyIiwic3VibmV0IiwibmV0d29ya19pZCIsImlwX3ZlcnNpb24iLCJzZWN1cml0eUdyb3VwSWQiLCJzZWN1cml0eUdyb3VwIiwicnVsZSIsInNlY3VyaXR5X2dyb3VwX2lkIiwiaW1hZ2UiLCJzc2giLCJnZXRJbWFnZXMiLCJpbWFnZXMiLCJkaXNrIiwiZ2V0Q29tcHV0ZUtleXBhaXJzIiwic3NoS2V5cyIsInNzaEtleSIsInNldENvbXB1dGVLZXlwYWlyIiwic2VjdXJpdHlHcm91cE5hbWUiLCJnZXROZXR3b3JrU2VjdXJpdHlHcm91cHMiLCJncm91cCIsImNyZWF0ZU5ldHdvcmtTZWN1cml0eUdyb3VwIiwiY3JlYXRlTmV0d29ya1NlY3VyaXR5R3JvdXBSdWxlIiwiZGlyZWN0aW9uIiwicG9ydF9yYW5nZV9taW4iLCJldGhlcnR5cGUiLCJwb3J0X3JhbmdlX21heCIsInByb3RvY29sIiwiZGVzY3JpcHRpb24iLCJkZXBsb3lTY3JpcHQiLCJzY3JpcHQiLCJoeXBoZV9jb25maWciLCJoeXBoZUNvbmZpZyIsImNvbnRlbnQ2NCIsIkJ1ZmZlciIsImtleV9uYW1lIiwidXNlcl9kYXRhIiwic2VjdXJpdHlfZ3JvdXBzIiwidXVpZCIsInNvdXJjZV90eXBlIiwiZGVzdGluYXRpb25fdHlwZSIsImJvb3RfaW5kZXgiLCJ2b2x1bWVfc2l6ZSIsImRlbGV0ZV9vbl90ZXJtaW5hdGlvbiIsImNyZWF0ZUNvbXB1dGVTZXJ2ZXIiLCJzZXJ2ZXJOYW1lIiwiZ2V0Q29tcHV0ZVNlcnZlciIsImRlbGV0ZUNvbXB1dGVTZXJ2ZXIiLCJwYXRoIiwib2JqZWN0TmFtZSIsImF4aW9zIiwiYmFzZTY0IiwiaWVlZTc1NCIsImtNYXhMZW5ndGgiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwiY3JlYXRlQnVmZmVyIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwiYXJyYXkiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwiZnJvbVN0cmluZyIsImNoZWNrZWQiLCJjb3B5IiwiZnJvbU9iamVjdCIsImFzc2VydFNpemUiLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInNsb3dUb1N0cmluZyIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJkaXIiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJidWYiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJoZXhXcml0ZSIsInN0ckxlbiIsInBhcnNlZCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwiaGkiLCJsbyIsInV0ZjE2bGVUb0J5dGVzIiwiZnJvbUJ5dGVBcnJheSIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJmb28iLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsImluc3BlY3QiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiX2FyciIsInRvSGV4IiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsIklOVkFMSURfQkFTRTY0X1JFIiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5Iiwic3RyaW5ndHJpbSIsImJhc2U2NGNsZWFuIiwiZHN0IiwiZyIsImI2NCIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJ0bXAiLCJBcnIiLCJfYnl0ZUxlbmd0aCIsImN1ckJ5dGUiLCJyZXZMb29rdXAiLCJ1aW50OCIsImV4dHJhQnl0ZXMiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJsb29rdXAiLCJpc0xFIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsInByb21pc2VzIiwic3ByZWFkIiwiZGVmYXVsdCIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiZ2V0VXJpIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsImgiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJub29wIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJub3JtYWxpemVkTmFtZSIsImlzQXhpb3NFcnJvciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInJlcXVlc3RlZFVSTCIsInJlbGF0aXZlVVJMIiwiaWdub3JlRHVwbGljYXRlT2YiLCJsaW5lIiwib3JpZ2luVVJMIiwibXNpZSIsInVybFBhcnNpbmdOb2RlIiwicmVzb2x2ZVVSTCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJob3N0IiwiaGFzaCIsImhvc3RuYW1lIiwicGF0aG5hbWUiLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJleHBpcmVzIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJyZXNvbHZlUHJvbWlzZSIsImNhbGxiYWNrIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDMUIsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsSUFDUSxtQkFBWEcsUUFBeUJBLE9BQU9DLElBQzlDRCxPQUFPLG1CQUFvQixHQUFJSCxHQUNMLGlCQUFaQyxRQUNkQSxRQUFRLG9CQUFzQkQsSUFFOUJELEVBQUssb0JBQXNCQyxJQVI3QixDQVNtQixvQkFBVEssS0FBdUJBLEtBQU9DLE1BQU0sV0FDOUMsTyxZQ1RFLElBQUlDLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVSLFFBR25DLElBQUlDLEVBQVNLLEVBQWlCRSxHQUFZLENBQ3pDQyxFQUFHRCxFQUNIRSxHQUFHLEVBQ0hWLFFBQVMsSUFVVixPQU5BVyxFQUFRSCxHQUFVSSxL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QUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsSUFDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxL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QVk3N0MsVUFBVWc5QyxpQkFBbUIsV0FDdkMsR0FBSWgvQyxLQUFLcXJCLE9BQ1AsTUFBTXJyQixLQUFLcXJCLFFBUWZ3eUIsRUFBWWw3QyxPQUFTLFdBQ25CLElBQUkydkIsRUFJSixNQUFPLENBQ0w4YSxNQUpVLElBQUl5USxHQUFZLFNBQWtCcDlDLEdBQzVDNnhCLEVBQVM3eEIsS0FJVDZ4QixPQUFRQSxJQUlaMXlCLEVBQU9ELFFBQVVrK0MsRyw2QkNsQ2pCaitDLEVBQU9ELFFBQVUsU0FBZ0JxakQsR0FDL0IsT0FBTyxTQUFjdm9DLEdBQ25CLE9BQU91b0MsRUFBU240QyxNQUFNLEtBQU00UCIsImZpbGUiOiJvcGVuc3RhY2stY2xpZW50Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwib3BlbnN0YWNrLWNsaWVudFwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJvcGVuc3RhY2stY2xpZW50XCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIm9wZW5zdGFjay1jbGllbnRcIl0gPSBmYWN0b3J5KCk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEzNCk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi4xMScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsImV4cG9ydCBjbGFzcyBPcGVuU3RhY2tFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgZXJyb3IpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBPcGVuU3RhY2tFcnJvcikge1xuICAgICAgICB0aGlzLmNvZGUgPSBlcnJvci5jb2RlO1xuICAgICAgICB0aGlzLmRhdGEgPSBlcnJvci5kYXRhO1xuICAgICAgfVxuICAgICAgLy8gZm9yIGF4aW9zIGVycm9yXG4gICAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgdGhpcy5jb2RlID0gZXJyb3IucmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICB0aGlzLmRhdGEgPSBlcnJvci5yZXNwb25zZS5kYXRhO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIGVxdWFsIHRvIG1lcmdlIHdpdGggdGhlIGRpZmZlcmVuY2UgYmVpbmcgdGhhdCBubyByZWZlcmVuY2VcbiAqIHRvIG9yaWdpbmFsIG9iamVjdHMgaXMga2VwdC5cbiAqXG4gKiBAc2VlIG1lcmdlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBkZWVwTWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZGVlcE1lcmdlOiBkZWVwTWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb252ZXJ0IGFuIG9iamVjdCB0byBhbiB1cmwgcXVlcnkgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBqc29uIFRoZSBvYmplY3QgdG8gY29udmVydFxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGNvcnJlc3BvbmRpZyBxdWVyeSBzdHJpbmcsIG9yIGFuIGVtcHR5IHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24ganNvblRvUXVlcnlTdHJpbmcoanNvbikge1xuICBpZiAoanNvbiAmJiBPYmplY3Qua2V5cyhqc29uKS5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgZW5jb2RlZCA9IE9iamVjdC5rZXlzKGpzb24pXG4gICAgICAubWFwKGtleSA9PiB7XG4gICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGpzb25ba2V5XSk7XG4gICAgICB9KVxuICAgICAgLmpvaW4oXCImXCIpO1xuICAgIHJldHVybiBcIj9cIiArIGVuY29kZWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cblxuLyoqXG4gKiBUZXN0IGlmIHRoZSBnaXZlbiBwYXJhbSBpcyBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIGl0ZW0ge2FueX0gVGhlIHZhcmlhYmxlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QoaXRlbSkge1xuICByZXR1cm4gaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShpdGVtKSAmJiBpdGVtICE9PSBudWxsO1xufVxuLyoqXG4gKiBNYWtlIGEgZGVlcCBtZXJnZSBvZiB0aGUgc291cmNlIG9iamVjdCBpbnRvIHRoZSB0YXJnZXQgb25lLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRcbiAqIEBwYXJhbSB7b2JqZWN0fSBzb3VyY2VcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSBtZXJnZSBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBNZXJnZSh0YXJnZXQsIHNvdXJjZSkge1xuICBjb25zdCBvdXRwdXQgPSBPYmplY3QuYXNzaWduKHt9LCB0YXJnZXQpO1xuXG4gIGlmIChpc09iamVjdCh0YXJnZXQpICYmIGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmIChpc09iamVjdChzb3VyY2Vba2V5XSkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIG91dHB1dCkpIE9iamVjdC5hc3NpZ24ob3V0cHV0LCB7IFtrZXldOiBzb3VyY2Vba2V5XSB9KTtcbiAgICAgICAgZWxzZSBvdXRwdXRba2V5XSA9IGRlZXBNZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihvdXRwdXQsIHsgW2tleV06IHNvdXJjZVtrZXldIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpKSB7XG4gIHZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xuICB2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG4gIHZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG4gIHZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4gIHZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xuICB2YXIgJGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xuICB2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG4gIHZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbiAgdmFyIHByb3BlcnR5RGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbiAgdmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4gIHZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xuICB2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xuICB2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbiAgdmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xuICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbiAgdmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG4gIHZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbiAgdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG4gIHZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuICB2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xuICB2YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG4gIHZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xuICB2YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbiAgdmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xuICB2YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4gIHZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbiAgdmFyIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpO1xuICB2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuICB2YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xuICB2YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG4gIHZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG4gIHZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbiAgdmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbiAgdmFyIGFycmF5Q29weVdpdGhpbiA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJyk7XG4gIHZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbiAgdmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbiAgdmFyIGRQID0gJERQLmY7XG4gIHZhciBnT1BEID0gJEdPUEQuZjtcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSO1xuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTtcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xuICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7XG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XG4gIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7XG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG4gIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTtcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG4gIHZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xuICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTtcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xuICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0O1xuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcbiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nO1xuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTtcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcbiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEO1xuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgICAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmICghQUxMX0NPTlNUUlVDVE9SUykge1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xuICB9KTtcblxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICRzbGljZSxcbiAgICBzZXQ6ICRzZXQsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTtcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XG4gICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7XG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xuICAgIHZhciBPID0ge307XG4gICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheSgxKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xuICAgIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBidWlsdGluRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcblxuIC8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmICh0eXBlb2YgZXhlYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciByZXN1bHQgPSBleGVjLmNhbGwoUiwgUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG4gIH1cbiAgcmV0dXJuIGJ1aWx0aW5FeGVjLmNhbGwoUiwgUyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmV4ZWMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcblxudmFyIFNQRUNJRVMgPSB3a3MoJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDIgJiYgcmVzdWx0WzBdID09PSAnYScgJiYgcmVzdWx0WzFdID09PSAnYic7XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCA/ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcbiAgICB2YXIgZXhlY0NhbGxlZCA9IGZhbHNlO1xuICAgIHZhciByZSA9IC9hLztcbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgIH1cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pIDogdW5kZWZpbmVkO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIGZucyA9IGV4ZWMoXG4gICAgICBkZWZpbmVkLFxuICAgICAgU1lNQk9MLFxuICAgICAgJydbS0VZXSxcbiAgICAgIGZ1bmN0aW9uIG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAgIC8vIFRoZSBuYXRpdmUgU3RyaW5nIG1ldGhvZCBhbHJlYWR5IGRlbGVnYXRlcyB0byBAQG1ldGhvZCAodGhpc1xuICAgICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVSZWdFeHBNZXRob2QuY2FsbChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgICB9XG4gICAgKTtcbiAgICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gICAgdmFyIHJ4Zm4gPSBmbnNbMV07XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgVFlQRUQgPSB1aWQoJ3R5cGVkX2FycmF5Jyk7XG52YXIgVklFVyA9IHVpZCgndmlldycpO1xudmFyIEFCViA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpO1xudmFyIENPTlNUUiA9IEFCVjtcbnZhciBpID0gMDtcbnZhciBsID0gOTtcbnZhciBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUgKGkgPCBsKSB7XG4gIGlmIChUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKSB7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6IFRZUEVELFxuICBWSUVXOiBWSUVXXG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnICtcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLyxcbiAgICAgIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZVtMQVNUX0lOREVYXTtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmVbTEFTVF9JTkRFWF0gPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuIC8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnO1xudmFyICRBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyIE1hdGggPSBnbG9iYWwuTWF0aDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcbnZhciBJbmZpbml0eSA9IGdsb2JhbC5JbmZpbml0eTtcbnZhciBCYXNlQnVmZmVyID0gJEFycmF5QnVmZmVyO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcbnZhciBCVUZGRVIgPSAnYnVmZmVyJztcbnZhciBCWVRFX0xFTkdUSCA9ICdieXRlTGVuZ3RoJztcbnZhciBCWVRFX09GRlNFVCA9ICdieXRlT2Zmc2V0JztcbnZhciAkQlVGRkVSID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSO1xudmFyICRMRU5HVEggPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSDtcbnZhciAkT0ZGU0VUID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG5mdW5jdGlvbiBwYWNrSUVFRTc1NCh2YWx1ZSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobkJ5dGVzKTtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1MZW4gPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBpID0gMDtcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwO1xuICB2YXIgZSwgbSwgYztcbiAgdmFsdWUgPSBhYnModmFsdWUpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmICh2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xuICAgIGlmICh2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpO1xuICBlID0gZSA8PCBtTGVuIHwgbTtcbiAgZUxlbiArPSBtTGVuO1xuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltpKytdID0gZSAmIDI1NSwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG4gIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59XG5mdW5jdGlvbiB1bnBhY2tJRUVFNzU0KGJ1ZmZlciwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgbkJpdHMgPSBlTGVuIC0gNztcbiAgdmFyIGkgPSBuQnl0ZXMgLSAxO1xuICB2YXIgcyA9IGJ1ZmZlcltpLS1dO1xuICB2YXIgZSA9IHMgJiAxMjc7XG4gIHZhciBtO1xuICBzID4+PSA3O1xuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZSA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6IHMgPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIHBvdygyLCBtTGVuKTtcbiAgICBlID0gZSAtIGVCaWFzO1xuICB9IHJldHVybiAocyA/IC0xIDogMSkgKiBtICogcG93KDIsIGUgLSBtTGVuKTtcbn1cblxuZnVuY3Rpb24gdW5wYWNrSTMyKGJ5dGVzKSB7XG4gIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xufVxuZnVuY3Rpb24gcGFja0k4KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMTYoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMzIoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrRjY0KGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpO1xufVxuZnVuY3Rpb24gcGFja0YzMihpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTtcbn1cblxuZnVuY3Rpb24gYWRkR2V0dGVyKEMsIGtleSwgaW50ZXJuYWwpIHtcbiAgZFAoQ1tQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW2ludGVybmFsXTsgfSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufVxuZnVuY3Rpb24gc2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKykgc3RvcmVbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogYnl0ZXMgLSBpIC0gMV07XG59XG5cbmlmICghJHR5cGVkLkFCVikge1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcbiAgICB0aGlzLl9iID0gYXJyYXlGaWxsLmNhbGwobmV3IEFycmF5KGJ5dGVMZW5ndGgpLCAwKTtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF07XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYgKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB0aGlzWyRCVUZGRVJdID0gYnVmZmVyO1xuICAgIHRoaXNbJE9GRlNFVF0gPSBvZmZzZXQ7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJVRkZFUiwgJ19iJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG4gICAgfSxcbiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDIzLCA0KTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTtcbiAgICB9LFxuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGNjQsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAkQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoTmFOKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICByZXR1cm4gJEFycmF5QnVmZmVyLm5hbWUgIT0gQVJSQVlfQlVGRkVSO1xuICB9KSkge1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIpO1xuICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7XG4gICAgfTtcbiAgICB2YXIgQXJyYXlCdWZmZXJQcm90byA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQmFzZUJ1ZmZlcltQUk9UT1RZUEVdO1xuICAgIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7KSB7XG4gICAgICBpZiAoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKSBoaWRlKCRBcnJheUJ1ZmZlciwga2V5LCBCYXNlQnVmZmVyW2tleV0pO1xuICAgIH1cbiAgICBpZiAoIUxJQlJBUlkpIEFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB2aWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKTtcbiAgdmFyICRzZXRJbnQ4ID0gJERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODtcbiAgdmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB2aWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7XG4gIGlmICh2aWV3LmdldEludDgoMCkgfHwgIXZpZXcuZ2V0SW50OCgxKSkgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcbmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTtcbmV4cG9ydHNbQVJSQVlfQlVGRkVSXSA9ICRBcnJheUJ1ZmZlcjtcbmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJleHBvcnQgZGVmYXVsdCBcIiMhL2Jpbi9iYXNoXFxuXFxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xcbiMgU3RyaWN0IG1vZGVcXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXFxuc2V0IC1ldW8gcGlwZWZhaWxcXG5JRlM9JCdcXFxcblxcXFx0J1xcblxcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcXG4jIENPTlNUQU5UUyAmIFVUSUxTXFxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xcbm1rZGlyIC1wIC92YXIvd3d3L2h0bWxcXG5MT0dfRklMRT1cXFwiL3Zhci93d3cvaHRtbC9pbnN0YWxsLmxvZ1xcXCJcXG5cXG5lY2hvIFxcXCJTdGFydGluZyBzY3JpcHQgYXQgJChkYXRlKVxcXCIgPiAkTE9HX0ZJTEVcXG5cXG5lY2hvXFxuZWNobyBcXFwiSW5zdGFsbGluZyBjdXJsXFxcIiA+PiAkTE9HX0ZJTEVcXG5zdWRvIGFwdC1nZXQgdXBkYXRlID4+ICRMT0dfRklMRVxcbnN1ZG8gYXB0LWdldCBpbnN0YWxsIC15IGN1cmxcXG5cXG5lY2hvXFxuZWNobyBcXFwiRG93bmxvYWQgaW5zdGFsbCBzY3JpcHRcXFwiID4+ICRMT0dfRklMRVxcbmN1cmwgLXMgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL21lZGlhbGFiL2h5cGhlX29wZW5zdGFja19jbGllbnQvbWFzdGVyL3NyYy9zaGVsbC9pbnN0YWxsLnNoID4gaW5zdGFsbC5zaFxcbmNobW9kICt4IGluc3RhbGwuc2hcXG5cXG4jIFNFVFRJTkcgSEVSRSBUSEUgRU5WIFZBUklBQkxFUyBGT1IgSFlQSEVcXG50b3VjaCAvaHlwaGUuZW52XFxuIyBAQF9IWVBIRV9DT05GSUdfQEBcXG5cXG5lY2hvXFxuZWNobyBcXFwiRXhlY3V0aW5nIGluc3RhbGwgc2NyaXB0XFxcIiA+PiAkTE9HX0ZJTEVcXG4uL2luc3RhbGwuc2ggPj4gJExPR19GSUxFXFxuaWYgWyAkPyAtZXEgMCBdOyB0aGVuXFxuICBlY2hvIFxcXCJJbnN0YWxsYXRpb24gY29tcGxldGVkIGF0ICQoZGF0ZSlcXFwiID4+ICRMT0dfRklMRVxcbmVsc2VcXG4gIGVjaG8gXFxcIi8hXFxcXCBJbnN0YWxsYXRpb24gZmFpbGVkXFxcIiA+PiAkTE9HX0ZJTEVcXG5maVxcblwiOyIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xuICBpZiAoIShsZW4gaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59O1xuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuIiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDtcbiIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKSB0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xufSwge1xuICBleGVjOiByZWdleHBFeGVjXG59KTtcbiIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgUmVmbGVjdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChPLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMTEnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCc7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKHRpbWVvdXRFcnJvck1lc3NhZ2UsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHZhciB2YWx1ZUZyb21Db25maWcyS2V5cyA9IFsndXJsJywgJ21ldGhvZCcsICdwYXJhbXMnLCAnZGF0YSddO1xuICB2YXIgbWVyZ2VEZWVwUHJvcGVydGllc0tleXMgPSBbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eSddO1xuICB2YXIgZGVmYXVsdFRvQ29uZmlnMktleXMgPSBbXG4gICAgJ2Jhc2VVUkwnLCAndXJsJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJywgJ3ZhbGlkYXRlU3RhdHVzJywgJ21heFJlZGlyZWN0cycsICdodHRwQWdlbnQnLFxuICAgICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJywgJ3NvY2tldFBhdGgnXG4gIF07XG5cbiAgdXRpbHMuZm9yRWFjaCh2YWx1ZUZyb21Db25maWcyS2V5cywgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gobWVyZ2VEZWVwUHJvcGVydGllc0tleXMsIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICh1dGlscy5pc09iamVjdChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goZGVmYXVsdFRvQ29uZmlnMktleXMsIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB2YXIgYXhpb3NLZXlzID0gdmFsdWVGcm9tQ29uZmlnMktleXNcbiAgICAuY29uY2F0KG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzKVxuICAgIC5jb25jYXQoZGVmYXVsdFRvQ29uZmlnMktleXMpO1xuXG4gIHZhciBvdGhlcktleXMgPSBPYmplY3RcbiAgICAua2V5cyhjb25maWcyKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gZmlsdGVyQXhpb3NLZXlzKGtleSkge1xuICAgICAgcmV0dXJuIGF4aW9zS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gob3RoZXJLZXlzLCBmdW5jdGlvbiBvdGhlcktleXNEZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcIi4vbm9Db25mbGljdFwiKTtcblxudmFyIF9nbG9iYWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vZ2xvYmFsXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmlmIChfZ2xvYmFsW1wiZGVmYXVsdFwiXS5fYmFiZWxQb2x5ZmlsbCAmJiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4pIHtcbiAgY29uc29sZS53YXJuKFwiQGJhYmVsL3BvbHlmaWxsIGlzIGxvYWRlZCBtb3JlIHRoYW4gb25jZSBvbiB0aGlzIHBhZ2UuIFRoaXMgaXMgcHJvYmFibHkgbm90IGRlc2lyYWJsZS9pbnRlbmRlZCBcIiArIFwiYW5kIG1heSBoYXZlIGNvbnNlcXVlbmNlcyBpZiBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgdGhlIHBvbHlmaWxscyBhcmUgYXBwbGllZCBzZXF1ZW50aWFsbHkuIFwiICsgXCJJZiB5b3UgZG8gbmVlZCB0byBsb2FkIHRoZSBwb2x5ZmlsbCBtb3JlIHRoYW4gb25jZSwgdXNlIEBiYWJlbC9wb2x5ZmlsbC9ub0NvbmZsaWN0IFwiICsgXCJpbnN0ZWFkIHRvIGJ5cGFzcyB0aGUgd2FybmluZy5cIik7XG59XG5cbl9nbG9iYWxbXCJkZWZhdWx0XCJdLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTsiLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvZXM2XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9hcnJheS9pbmNsdWRlc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vYXJyYXkvZmxhdC1tYXBcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy9wYWQtc3RhcnRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy9wYWQtZW5kXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1zdGFydFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3RyaW0tZW5kXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zeW1ib2wvYXN5bmMtaXRlcmF0b3JcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9vYmplY3QvdmFsdWVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9vYmplY3QvZW50cmllc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vcHJvbWlzZS9maW5hbGx5XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy93ZWJcIik7XG5cbnJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIik7IiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRHT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nICYmICEhJEdPUFMuZjtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgJEdPUFMuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzQ0M1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSAkZmFpbHMoZnVuY3Rpb24gKCkgeyAkR09QUy5mKDEpOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBGQUlMU19PTl9QUklNSVRJVkVTLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHJldHVybiAkR09QUy5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJykgfSk7XG4iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuIiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoJHByZXZlbnRFeHRlbnNpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCkge1xuICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgaXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKSB9KTtcbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuIiwiLy8gMTkuMi4zLjIgLyAxNS4zLjQuNSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCh0aGlzQXJnLCBhcmdzLi4uKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdGdW5jdGlvbicsIHsgYmluZDogcmVxdWlyZSgnLi9fYmluZCcpIH0pO1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoJycgKyB0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn0gfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgJE51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIEJhc2UgPSAkTnVtYmVyO1xudmFyIHByb3RvID0gJE51bWJlci5wcm90b3R5cGU7XG4vLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbnZhciBCUk9LRU5fQ09GID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUjtcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSkge1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgJHRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbnZhciBFUlJPUiA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJztcbnZhciBaRVJPID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICB2YXIgaSA9IC0xO1xuICB2YXIgYzIgPSBjO1xuICB3aGlsZSAoKytpIDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICB2YXIgaSA9IDY7XG4gIHZhciBjID0gMDtcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIHMgPSAnJztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCkge1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uICh4KSB7XG4gIHZhciBuID0gMDtcbiAgdmFyIHgyID0geDtcbiAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUgKHgyID49IDIpIHtcbiAgICBuICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4wLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyICR0b1ByZWNpc2lvbiA9IDEuMC50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgISRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b1ByZWNpc2lvbi5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbikge1xuICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XG4iLCIvLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBfaXNGaW5pdGUgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5pc0Zpbml0ZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKSB9KTtcbiIsIi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNQVhfU0FGRV9JTlRFR0VSOiAweDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwiLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDIwLjEuMi4xMyBOdW1iZXIucGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUludCAhPSAkcGFyc2VJbnQpLCAnTnVtYmVyJywgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi41IE1hdGguYXNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGFzaW5oID0gTWF0aC5hc2luaDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywgeyBhc2luaDogYXNpbmggfSk7XG4iLCIvLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdGFuaCA9IE1hdGguYXRhbmg7XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIE1hdGgucG93KE1hdGguYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHsgZXhwbTE6ICRleHBtMSB9KTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBmcm91bmQ6IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJykgfSk7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciAkYWJzID0gTWF0aC5hYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuIiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRpbXVsKDB4ZmZmZmZmZmYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSksICdNYXRoJywge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciB4biA9ICt4O1xuICAgIHZhciB5biA9ICt5O1xuICAgIHZhciB4bCA9IFVJTlQxNiAmIHhuO1xuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpIH0pO1xuIiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpIH0pO1xuIiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpO1xuICAgIHZhciBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KSB7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKSB7XG4gICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0cGwubGVuZ3RoKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGVuID4gaSkge1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFMZW4pIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgRU5EU19XSVRIID0gJ2VuZHNXaXRoJztcbnZhciAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aCk7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jylcbn0pO1xuIiwiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdpdGFsaWNzJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIi8vIDIwLjMuMy4xIC8gMTUuOS40LjQgRGF0ZS5ub3coKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdEYXRlJywgeyBub3c6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4vX2RhdGUtdG8taXNvLXN0cmluZycpO1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzO1xuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICB2YXIgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn0gOiAkdG9JU09TdHJpbmc7XG4iLCJ2YXIgRGF0ZVByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXTtcbnZhciBnZXRUaW1lID0gRGF0ZVByb3RvLmdldFRpbWU7XG5pZiAobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSkge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iLCJ2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG4iLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKCcuL19pb2JqZWN0JykgIT0gT2JqZWN0IHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGlmIChodG1sKSBhcnJheVNsaWNlLmNhbGwoaHRtbCk7XG59KSwgJ0FycmF5Jywge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCkge1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGlzLmxlbmd0aCk7XG4gICAgdmFyIGtsYXNzID0gY29mKHRoaXMpO1xuICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kO1xuICAgIGlmIChrbGFzcyA9PSAnQXJyYXknKSByZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgIHZhciBzdGFydCA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuKTtcbiAgICB2YXIgdXBUbyA9IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbik7XG4gICAgdmFyIHNpemUgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpO1xuICAgIHZhciBjbG9uZWQgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgc2l6ZTsgaSsrKSBjbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZpbHRlciwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgY29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2NvcHlXaXRoaW4nKTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIEJhc2UgPSAkUmVnRXhwO1xudmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpIHtcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKSB7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cDtcbiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApO1xuICAgIHZhciBmaVUgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmIChyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBtYXRjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJG1hdGNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCZgJ118XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCZgJ118XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRyZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xuXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gICAgfVxuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgICB2YXIgY2FwdHVyZTtcbiAgICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgICB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc2VhcmNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNlYXJjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHNlYXJjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBwcmV2aW91c0xhc3RJbmRleCA9IHJ4Lmxhc3RJbmRleDtcbiAgICAgIGlmICghc2FtZVZhbHVlKHByZXZpb3VzTGFzdEluZGV4LCAwKSkgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIGlmICghc2FtZVZhbHVlKHJ4Lmxhc3RJbmRleCwgcHJldmlvdXNMYXN0SW5kZXgpKSByeC5sYXN0SW5kZXggPSBwcmV2aW91c0xhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IG51bGwgPyAtMSA6IHJlc3VsdC5pbmRleDtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJG1pbiA9IE1hdGgubWluO1xudmFyICRwdXNoID0gW10ucHVzaDtcbnZhciAkU1BMSVQgPSAnc3BsaXQnO1xudmFyIExFTkdUSCA9ICdsZW5ndGgnO1xudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbnZhciBNQVhfVUlOVDMyID0gMHhmZmZmZmZmZjtcblxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCd4JywgJ3knKSAtPiAveC95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciBTVVBQT1JUU19ZID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsgUmVnRXhwKE1BWF9VSU5UMzIsICd5Jyk7IH0pO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgaW50ZXJuYWxTcGxpdDtcbiAgaWYgKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApIHtcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiAkc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSByZWdleHBFeGVjLmNhbGwoc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiAkc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGludGVybmFsU3BsaXQgPSAkc3BsaXQ7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICByZXR1cm4gc3BsaXR0ZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gJHNwbGl0KTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoU1VQUE9SVFNfWSA/ICd5JyA6ICdnJyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhTVVBQT1JUU19ZID8gcnggOiAnXig/OicgKyByeC5zb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBTVVBQT1JUU19ZID8gcSA6IDA7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFNVUFBPUlRTX1kgPyBTIDogUy5zbGljZShxKSk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gJG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoU1VQUE9SVFNfWSA/IDAgOiBxKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEEucHVzaChTLnNsaWNlKHAsIHEpKTtcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIEEucHVzaCh6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBBLnB1c2goUy5zbGljZShwKSk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIF07XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgckFwcGx5ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5O1xudmFyIGZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgckFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldCk7XG4gICAgdmFyIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBvd25LZXlzOiByZXF1aXJlKCcuL19vd24ta2V5cycpIH0pO1xuIiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgkcHJldmVudEV4dGVuc2lvbnMpICRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZiAoIW93bkRlc2MpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7XG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICB9IGVsc2UgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZURlc2MoMCwgVikpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5pbmNsdWRlcztcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuZmxhdE1hcDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0TWFwXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4sIEE7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXRNYXAnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBjdHgobWFwcGVyLCB0aGlzQXJnLCAzKSA6IGZhbHNlO1xuICB2YXIgZWxlbWVudCwgc3ByZWFkYWJsZTtcblxuICB3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcbiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XG4gICAgICBlbGVtZW50ID0gbWFwRm4gPyBtYXBGbihzb3VyY2Vbc291cmNlSW5kZXhdLCBzb3VyY2VJbmRleCwgb3JpZ2luYWwpIDogc291cmNlW3NvdXJjZUluZGV4XTtcblxuICAgICAgc3ByZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKGlzT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgICAgIHNwcmVhZGFibGUgPSBlbGVtZW50W0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgICAgICAgc3ByZWFkYWJsZSA9IHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcHJlYWRhYmxlICYmIGRlcHRoID4gMCkge1xuICAgICAgICB0YXJnZXRJbmRleCA9IGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgdG9MZW5ndGgoZWxlbWVudC5sZW5ndGgpLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxZmZmZmZmZmZmZmZmZikgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnBhZFN0YXJ0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciBXRUJLSVRfQlVHID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogV0VCS0lUX0JVRywgJ1N0cmluZycsIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0cnVlKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnBhZEVuZDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnRyaW1MZWZ0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcudHJpbVJpZ2h0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xuICB9O1xufSwgJ3RyaW1FbmQnKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LnZhbHVlcztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpIHtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5lbnRyaWVzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGl0KSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKGl0KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHknKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlByb21pc2VbJ2ZpbmFsbHknXTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtZmluYWxseVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1Byb21pc2UnLCB7ICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpO1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgcmV0dXJuIHRoaXMudGhlbihcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICB9IDogb25GaW5hbGx5LFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgfSA6IG9uRmluYWxseVxuICApO1xufSB9KTtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnRpbWVycycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpO1xuIiwiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdGltZSAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiBmYWxzZTtcbiAgICByZXR1cm4gc2V0KGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBmbiwgdGltZSk7XG4gIH07XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHRhc2sgPSByZXF1aXJlKCcuL190YXNrJyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiwge1xuICBzZXRJbW1lZGlhdGU6ICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM3Lmdsb2JhbCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJykuZ2xvYmFsO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIElTX1dSQVAgPSB0eXBlICYgJGV4cG9ydC5XO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV07XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIga2V5LCBvd24sIG91dDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAob3duICYmIGhhcyhleHBvcnRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uIChDKSB7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgQykge1xuICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEMoKTtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYgKElTX1BST1RPKSB7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYgKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0pIGhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgeyBPcGVuU3RhY2tFcnJvciB9IGZyb20gXCIuL2Vycm9yXCI7XG5pbXBvcnQgeyBkZWVwTWVyZ2UsIGpzb25Ub1F1ZXJ5U3RyaW5nIH0gZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9zaGVsbC9zY3JpcHQuc2hcIjtcblxuZXhwb3J0IGNsYXNzIE9wZW5TdGFja0NsaWVudCB7XG4gIC8qKlxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSB1cmwgb2YgdGhlIG9wZW5zdGFjayBBUElcbiAgICovXG4gIGNvbnN0cnVjdG9yKHVybCkge1xuICAgIHRoaXMudXJsID0gdXJsO1xuICB9XG5cbiAgLyoqXG4gICAqIEF1dGhlbnRpY2F0ZSB0aGUgdXNlciB3aXRoIGl0J3MgbG9naW4gLyBwYXNzd29yZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvZ2luIExvZ2luIG9mIHRoZSBvcGVuc3RhY2sgdXNlclxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgUGFzc3dvcmQgb2YgdGhlIG9wZW5zdGFjayB1c2VyXG4gICAqIEBwYXJhbSB7c3RyaW5nP30gZG9tYWluIERvbWFpbiBvZiB0aGUgb3BlbnN0YWNrIHVzZXIuIEJ5IGRlZmF1bHQgaXQncyBgRGVmYXVsdGAuXG4gICAqIEBwYXJhbSB7c3RyaW5nP30gcHJvamVjdCBPcGVuc3RhY2sgcHJvamVjdCBuYW1lXG4gICAqIEB0aHJvd3Mge09wZW5TdGFja0Vycm9yfVxuICAgKi9cbiAgYXN5bmMgYXV0aGVudGljYXRlKGxvZ2luLCBwYXNzd29yZCwgZG9tYWluID0gXCJEZWZhdWx0XCIsIHByb2plY3QgPSBudWxsKSB7XG4gICAgLy8gSW5pdFxuICAgIHRoaXMudG9rZW4gPSBudWxsO1xuICAgIHRoaXMuY2F0YWxvZyA9IG51bGw7XG4gICAgdGhpcy5wcm9qZWN0ID0gbnVsbDtcblxuICAgIC8vIGNoZWNrIHBhcmFtc1xuICAgIHRoaXMuX2NoZWNrU3RyaW5nUmVxdWlyZWRGaWVsZChcImxvZ2luXCIsIGxvZ2luKTtcbiAgICB0aGlzLl9jaGVja1N0cmluZ1JlcXVpcmVkRmllbGQoXCJwYXNzd29yZFwiLCBsb2dpbik7XG5cbiAgICAvLyBKU09OIGJvZHkgb2YgdGhlIGF1dGggcXVlcnlcbiAgICBjb25zdCBib2R5ID0ge1xuICAgICAgYXV0aDoge1xuICAgICAgICBpZGVudGl0eToge1xuICAgICAgICAgIG1ldGhvZHM6IFtcInBhc3N3b3JkXCJdLFxuICAgICAgICAgIHBhc3N3b3JkOiB7XG4gICAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICAgIG5hbWU6IGxvZ2luLFxuICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQsXG4gICAgICAgICAgICAgIGRvbWFpbjoge1xuICAgICAgICAgICAgICAgIG5hbWU6IGRvbWFpbixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBpZiAocHJvamVjdCkge1xuICAgICAgYm9keS5hdXRoLnNjb3BlID0ge1xuICAgICAgICBwcm9qZWN0OiB7XG4gICAgICAgICAgbmFtZTogcHJvamVjdCxcbiAgICAgICAgICBkb21haW46IHsgbmFtZTogZG9tYWluIH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBtYWtlIHRoZSBhcGkgY2FsbFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9jYWxsQXBpKGAke3RoaXMudXJsfS9hdXRoL3Rva2Vuc2AsIFwiUE9TVFwiLCBmYWxzZSwgYm9keSk7XG5cbiAgICAgIC8vIFNhdmUgdG9rZW5cbiAgICAgIHRoaXMudG9rZW4gPSB7XG4gICAgICAgIHZhbHVlOiByZXNwb25zZS5oZWFkZXJzW1wieC1zdWJqZWN0LXRva2VuXCJdLFxuICAgICAgICBleHBpcmVkX2F0OiBEYXRlLnBhcnNlKHJlc3BvbnNlLmRhdGEudG9rZW4uZXhwaXJlc19hdCksXG4gICAgICB9O1xuICAgICAgdGhpcy5wcm9qZWN0ID0gcmVzcG9uc2UuZGF0YS50b2tlbi5wcm9qZWN0O1xuXG4gICAgICAvLyByZWdpc3RlciB0aGUgY2F0YWxvZ1xuICAgICAgaWYgKHJlc3BvbnNlLmRhdGEudG9rZW4uY2F0YWxvZykge1xuICAgICAgICB0aGlzLmNhdGFsb2cgPSByZXNwb25zZS5kYXRhLnRva2VuLmNhdGFsb2c7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCB0aGlzLmdldENhdGFsb2coKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgT3BlblN0YWNrRXJyb3IoYEZhaWwgdG8gYXV0aGVudGljYXRlIHVzZXIgJHtsb2dpbn1gLCBlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgdGhlIGNhdGFsb2cgb2YgdGhlIE9wZW5TdGFjayBBUEkgYW5kIHNldCBpdCBvbiB0aGUgY2xpZW50LlxuICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGluIHRoZSBhdXRoIHByb2Nlc3MuXG4gICAqXG4gICAqIEB0aHJvd3Mge09wZW5TdGFja0Vycm9yfVxuICAgKi9cbiAgYXN5bmMgZ2V0Q2F0YWxvZygpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9jYWxsQXBpKGAke3RoaXMudXJsfS9hdXRoL2NhdGFsb2dgLCBcIkdFVFwiLCB0cnVlKTtcbiAgICAgIHRoaXMuY2F0YWxvZyA9IHJlc3BvbnNlLmRhdGEuY2F0YWxvZztcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgT3BlblN0YWNrRXJyb3IoYEZhaWwgdG8gcmV0cmlldmUgdGhlIGNhdGFsb2dgLCBlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZSB0aGUgcmVnaW9uIGxpc3QgZm9yIHRoZSBzcGVjaWZpZWQgc2VydmljZSB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VydmljZVR5cGUgT3BlbnN0YWNrIHNlcnZpY2UgdHlwZSAoaWUuIGBuZXR3b3JrYCwgYGNvbXB1dGVgLCBgaWRlbnRpdHlgLCBgaW1hZ2VgLCAuLi4pXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5PHtyZWdpb25faWQ6c3RyaW5nLCByZWdpb246c3RyaW5nfT4+fVxuICAgKiBAdGhyb3dzIHtPcGVuU3RhY2tFcnJvcn1cbiAgICovXG4gIGFzeW5jIGdldFJlZ2lvbnMoc2VydmljZVR5cGUpIHtcbiAgICAvLyBjaGVjayBwYXJhbXNcbiAgICB0aGlzLl9jaGVja1N0cmluZ1JlcXVpcmVkRmllbGQoXCJzZXJ2aWNlVHlwZVwiLCBzZXJ2aWNlVHlwZSk7XG5cbiAgICAvLyBpZiB0aGUgY2F0YWxvZyBwcm9wZXJ0eSBpcyBtaXNzaW5nLCB0aHJvdyBhbiBlcnJvclxuICAgIGlmICghdGhpcy5jYXRhbG9nKSB7XG4gICAgICB0aHJvdyBuZXcgT3BlblN0YWNrRXJyb3IoYENhdGFsb2cgaXMgbWlzc2luZyBvciBlbXB0eS4gRGlkIHlvdSBhdXRoZW50aWNhdGUgP2ApO1xuICAgIH1cblxuICAgIC8vIENvbXB1dGUgdGhlIHNwZWNpZmllZCBzZXJ2aWNlXG4gICAgY29uc3Qgc2VydmljZSA9IHRoaXMuY2F0YWxvZ1xuICAgICAgLy8gR2V0IHRoZSBlbmRwb2ludCBsaXN0IGZvciB0aGUgc3BlY2lmaWVkIHNlcnZpY2VcbiAgICAgIC5maWx0ZXIoc2VydmljZSA9PiB7XG4gICAgICAgIHJldHVybiBzZXJ2aWNlLnR5cGUgPT09IHNlcnZpY2VUeXBlO1xuICAgICAgfSlcbiAgICAgIC5zaGlmdCgpO1xuICAgIGlmICghc2VydmljZSkge1xuICAgICAgdGhyb3cgbmV3IE9wZW5TdGFja0Vycm9yKGBUaGUgc2VydmljZSAnJHtzZXJ2aWNlVHlwZX0nIGRvZXNuJ3QgZXhpc3RgKTtcbiAgICB9XG5cbiAgICAvLyBjb25zdHJ1Y3QgYW4gYXJyYXkgb2YgSUQgZm9yIHRoZSBkaXN0aW5jdCBwYXJ0XG4gICAgY29uc3QgcmVnaW9uSWRBcnJheSA9IHNlcnZpY2UuZW5kcG9pbnRzLm1hcChlbmRwb2ludCA9PiB7XG4gICAgICByZXR1cm4gZW5kcG9pbnQucmVnaW9uX2lkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIHNlcnZpY2UuZW5kcG9pbnRzXG4gICAgICAgIC8vIGNvbnZlcnRcbiAgICAgICAgLm1hcChlbmRwb2ludCA9PiB7XG4gICAgICAgICAgcmV0dXJuIHsgcmVnaW9uX2lkOiBlbmRwb2ludC5yZWdpb25faWQsIHJlZ2lvbjogZW5kcG9pbnQucmVnaW9uIH07XG4gICAgICAgIH0pXG4gICAgICAgIC8vIERpc3RpbmN0XG4gICAgICAgIC5maWx0ZXIoKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgIHJldHVybiByZWdpb25JZEFycmF5LmluZGV4T2YodmFsdWUucmVnaW9uX2lkKSA9PT0gaW5kZXg7XG4gICAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8vXG4gIC8vIH5+fiBJTUFHRVMgLSBpbWFnZXMgfn5+XG4gIC8vXG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBpbWFnZXMgZm9yIHRoZSBzcGVjaWZpZWQgcmVnaW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaW9uSWQgVGhlIGlkIG9mIG9wZW5zdGFjayByZWdpb25cbiAgICogQHBhcmFtIHtvYmplY3Q/fSBvcHRpb25zIFNlZSBodHRwczovL2RvY3Mub3BlbnN0YWNrLm9yZy9hcGktcmVmL2ltYWdlL3YyL2luZGV4Lmh0bWw/ZXhwYW5kZWQ9bGlzdC1pbWFnZXMtZGV0YWlsI2lkNyBmb3IgdGhlIGxpc3Qgb2YgYXZhaWxhYmxlIHF1ZXJ5IHN0cmluZyBwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5PEltYWdlPj59XG4gICAqIEB0aHJvd3Mge09wZW5TdGFja0Vycm9yfVxuICAgKi9cbiAgYXN5bmMgZ2V0SW1hZ2VzKHJlZ2lvbklkLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5fb3BlbnN0YWNrQ2FsbChcbiAgICAgIHJlZ2lvbklkLFxuICAgICAgXCJpbWFnZVwiLFxuICAgICAgXCJHRVRcIixcbiAgICAgIGAvdjIvaW1hZ2VzJHtqc29uVG9RdWVyeVN0cmluZyhvcHRpb25zKX1gLFxuICAgICAgdHJ1ZSxcbiAgICAgIFwiaW1hZ2VzXCIsXG4gICAgKTtcbiAgfVxuXG4gIC8vXG4gIC8vIH5+fiBDT01QVVRFIC0gRkxBVk9SIH5+flxuICAvLyBAc2VlIGh0dHBzOi8vZG9jcy5vcGVuc3RhY2sub3JnL2FwaS1yZWYvY29tcHV0ZS8jbGlzdC1mbGF2b3JzXG4gIC8vXG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBmbGF2b3JzIGZvciBOb3ZhIChpZS4gY29tcHV0ZSkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpb25JZCBPcGVuc3RhY2sgcmVnaW9uIGlkXG4gICAqIEBwYXJhbSB7b2JqZWN0P30gb3B0aW9ucyBTZWUgaHR0cHM6Ly9kb2NzLm9wZW5zdGFjay5vcmcvYXBpLXJlZi9jb21wdXRlLz9leHBhbmRlZD1jcmVhdGUtc2VydmVyLWRldGFpbCxsaXN0LXNlcnZlcnMtZGV0YWlsLGxpc3QtZmxhdm9ycy1kZXRhaWwjaWQxOTcgZm9yIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBxdWVyeSBzdHJpbmcgcGFyYW1ldGVyc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxBcnJheTxGbGF2b3I+Pn1cbiAgICogQHRocm93cyB7T3BlblN0YWNrRXJyb3J9XG4gICAqL1xuICBhc3luYyBnZXRDb21wdXRlRmxhdm9ycyhyZWdpb25JZCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgZmxhdm9ycyA9IGF3YWl0IHRoaXMuX29wZW5zdGFja0NhbGwoXG4gICAgICByZWdpb25JZCxcbiAgICAgIFwiY29tcHV0ZVwiLFxuICAgICAgXCJHRVRcIixcbiAgICAgIGAvZmxhdm9ycyR7anNvblRvUXVlcnlTdHJpbmcob3B0aW9ucyl9YCxcbiAgICAgIHRydWUsXG4gICAgICBcImZsYXZvcnNcIixcbiAgICApO1xuICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIGZsYXZvcnMubWFwKGZsYXZvciA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbXB1dGVGbGF2b3IocmVnaW9uSWQsIGZsYXZvci5pZCk7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBmbGF2b3JzIGZvciBOb3ZhIChpZS4gY29tcHV0ZSkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpb25JZCBPcGVuc3RhY2sgcmVnaW9uIGlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbGF2b3JJZCBPcGVuc3RhY2sgZmxhdm9yIGlkXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEZsYXZvcj59XG4gICAqIEB0aHJvd3Mge09wZW5TdGFja0Vycm9yfVxuICAgKi9cbiAgYXN5bmMgZ2V0Q29tcHV0ZUZsYXZvcihyZWdpb25JZCwgZmxhdm9ySWQpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5fb3BlbnN0YWNrQ2FsbChyZWdpb25JZCwgXCJjb21wdXRlXCIsIFwiR0VUXCIsIGAvZmxhdm9ycy8ke2ZsYXZvcklkfWAsIHRydWUsIFwiZmxhdm9yXCIpO1xuICB9XG5cbiAgLy9cbiAgLy8gfn5+IENPTVBVVEUgLSBLZXlwYWlycyB+fn5cbiAgLy8gQHNlZSBodHRwczovL2RvY3Mub3BlbnN0YWNrLm9yZy9hcGktcmVmL2NvbXB1dGUvI2tleXBhaXJzLWtleXBhaXJzXG4gIC8vXG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBTU0gga2V5b2YgdGhlIHVzZXIgZm9yIE5vdmEgKGllLiBjb21wdXRlKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbklkIE9wZW5zdGFjayByZWdpb24gaWRcbiAgICogQHBhcmFtIHtvYmplY3Q/fSBvcHRpb25zIFNlZSBodHRwczovL2RvY3Mub3BlbnN0YWNrLm9yZy9hcGktcmVmL2NvbXB1dGUvP2V4cGFuZGVkPWNyZWF0ZS1zZXJ2ZXItZGV0YWlsLGxpc3Qtc2VydmVycy1kZXRhaWwsbGlzdC1mbGF2b3JzLWRldGFpbCxsaXN0LWtleXBhaXJzLWRldGFpbCNpZDIzMCBmb3IgdGhlIGxpc3Qgb2YgYXZhaWxhYmxlIHF1ZXJ5IHN0cmluZyBwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEtleXBhaXI+fVxuICAgKiBAdGhyb3dzIHtPcGVuU3RhY2tFcnJvcn1cbiAgICovXG4gIGFzeW5jIGdldENvbXB1dGVLZXlwYWlycyhyZWdpb25JZCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qga2V5cGFpcnMgPSBhd2FpdCB0aGlzLl9vcGVuc3RhY2tDYWxsKFxuICAgICAgcmVnaW9uSWQsXG4gICAgICBcImNvbXB1dGVcIixcbiAgICAgIFwiR0VUXCIsXG4gICAgICBgL29zLWtleXBhaXJzJHtqc29uVG9RdWVyeVN0cmluZyhvcHRpb25zKX1gLFxuICAgICAgdHJ1ZSxcbiAgICAgIFwia2V5cGFpcnNcIixcbiAgICApO1xuICAgIHJldHVybiBrZXlwYWlycy5tYXAoaXRlbSA9PiB7XG4gICAgICByZXR1cm4gaXRlbS5rZXlwYWlyO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhdmUgb3IgY3JlYXRlIGEgU1NIIChhbmQgb25seSBTU0gpIGtleSBmb3IgdGhlIHVzZXIgb24gdGhlIGNvbXB1dGUgKGllIE5vdmEpIHNlcnZpY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpb25JZCBPcGVuc3RhY2sgcmVnaW9uIGlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIFNTSCBrZXkgdG8gY3JlYXRlL3NhdmVcbiAgICogQHBhcmFtIHtzdHJpbmc/fSBwdWJsaWNrZXkgUHVibGljIFNTSCBrZXkuIElmIG9taXR0ZWQsIGEgbmV3IGtleSB3aWxsIGJlIGNyZWF0ZWQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEtleXBhaXI+fVxuICAgKiBAdGhyb3dzIHtPcGVuU3RhY2tFcnJvcn1cbiAgICovXG4gIGFzeW5jIHNldENvbXB1dGVLZXlwYWlyKHJlZ2lvbklkLCBuYW1lLCBwdWJsaWNLZXkpIHtcbiAgICAvLyBjaGVjayBwYXJhbXNcbiAgICB0aGlzLl9jaGVja1N0cmluZ1JlcXVpcmVkRmllbGQoXCJuYW1lXCIsIG5hbWUpO1xuICAgIC8vIG1ha2UgdGhlIGFwaSBjYWxsXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuX29wZW5zdGFja0NhbGwocmVnaW9uSWQsIFwiY29tcHV0ZVwiLCBcIlBPU1RcIiwgYC9vcy1rZXlwYWlyc2AsIHRydWUsIFwia2V5cGFpclwiLCB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgcHVibGljX2tleTogcHVibGljS2V5LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIFNTSCAoYW5kIG9ubHkgU1NIKSBrZXkgZm9yIHRoZSB1c2VyIG9uIHRoZSBjb21wdXRlIChpZSBOb3ZhKSBzZXJ2aWNlLlxuICAgKiBpZiBhbiBlcnJvciBvY2N1cmVkLCBhbiBleGNlcHRpb24gaXMgdGhyb3duLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaW9uSWQgT3BlbnN0YWNrIHJlZ2lvbiBpZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBTU0gga2V5IHRvIGRlbGV0ZVxuICAgKiBAdGhyb3dzIHtPcGVuU3RhY2tFcnJvcn1cbiAgICovXG4gIGFzeW5jIGRlbGV0ZUNvbXB1dGVLZXlwYWlyKHJlZ2lvbklkLCBuYW1lKSB7XG4gICAgLy8gY2hlY2sgcGFyYW1zXG4gICAgdGhpcy5fY2hlY2tTdHJpbmdSZXF1aXJlZEZpZWxkKFwibmFtZVwiLCBuYW1lKTtcbiAgICAvLyBtYWtlIHRoZSBhcGkgY2FsbFxuICAgIGF3YWl0IHRoaXMuX29wZW5zdGFja0NhbGwocmVnaW9uSWQsIFwiY29tcHV0ZVwiLCBcIkRFTEVURVwiLCBgL29zLWtleXBhaXJzLyR7bmFtZX1gLCB0cnVlKTtcbiAgfVxuXG4gIC8vXG4gIC8vIH5+fiBDT01QVVRFIC0gU2VydmVycyB+fn5cbiAgLy8gQHNlZSBodHRwczovL2RvY3Mub3BlbnN0YWNrLm9yZy9hcGktcmVmL2NvbXB1dGUvI3NlcnZlcnMtc2VydmVyc1xuICAvL1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgbGlzdCBvZiBzZXJ2ZXIgb24gdGhlIGNvbXB1dGUgc2VydmljZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbklkIE9wZW5zdGFjayByZWdpb24gaWRcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgU2VlIGh0dHBzOi8vZG9jcy5vcGVuc3RhY2sub3JnL2FwaS1yZWYvY29tcHV0ZS8/ZXhwYW5kZWQ9bGlzdC1zZXJ2ZXJzLWRldGFpbCNsaXN0LXNlcnZlcnMtcmVxdWVzdCBmb3IgdGhlIGxpc3Qgb2YgYXZhaWxhYmxlIHF1ZXJ5IHN0cmluZyBwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5PFNlcnZlcj4+fSBMaXN0IG9mIHNlcnZlciAoKVxuICAgKiBAdGhyb3dzIHtPcGVuU3RhY2tFcnJvcn1cbiAgICovXG4gIGFzeW5jIGdldENvbXB1dGVTZXJ2ZXJzKHJlZ2lvbklkLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuX29wZW5zdGFja0NhbGwoXG4gICAgICByZWdpb25JZCxcbiAgICAgIFwiY29tcHV0ZVwiLFxuICAgICAgXCJHRVRcIixcbiAgICAgIGAvc2VydmVycy9kZXRhaWwke2pzb25Ub1F1ZXJ5U3RyaW5nKG9wdGlvbnMpfWAsXG4gICAgICB0cnVlLFxuICAgICAgXCJzZXJ2ZXJzXCIsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjb21wdXRlIHNlcnZlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbklkIE9wZW5zdGFjayByZWdpb24gaWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgc2VydmVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbWFnZUlkIE9wZW5zdGFjayBpbWFnZSBJRFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmxhdm9ySWQgT3BlbnN0YWNrIGZsYXZvciBJRFxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBPcHRpb25hbHMgcGFyYW1ldGVycyBmb3IgdGhlIHNlcnZlciBjcmVhdGlvbiAoQHNlZSBodHRwczovL2RvY3Mub3BlbnN0YWNrLm9yZy9hcGktcmVmL2NvbXB1dGUvP2V4cGFuZGVkPWNyZWF0ZS1zZXJ2ZXItZGV0YWlsI2lkMTEpXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFNlcnZlcj59IENyZWF0ZWQgc2VydmVyIChAc2VlIGh0dHBzOi8vZG9jcy5vcGVuc3RhY2sub3JnL2FwaS1yZWYvY29tcHV0ZS8/ZXhwYW5kZWQ9Y3JlYXRlLXNlcnZlci1kZXRhaWwsbGlzdC1zZXJ2ZXJzLWRldGFpbCxsaXN0LWZsYXZvcnMtZGV0YWlsLGxpc3Qta2V5cGFpcnMtZGV0YWlsLGFkZC1hc3NvY2lhdGUtZmxvYXRpbmctaXAtYWRkZmxvYXRpbmdpcC1hY3Rpb24tZGVwcmVjYXRlZC1kZXRhaWwscGF1c2Utc2VydmVyLXBhdXNlLWFjdGlvbi1kZXRhaWwscmVib290LXNlcnZlci1yZWJvb3QtYWN0aW9uLWRldGFpbCNpZDEyIClcbiAgICovXG4gIGFzeW5jIGNyZWF0ZUNvbXB1dGVTZXJ2ZXIocmVnaW9uSWQsIG5hbWUsIGltYWdlSWQsIGZsYXZvcklkLCBzZXJ2ZXIgPSB7fSkge1xuICAgIC8vIGNoZWNrIHBhcmFtc1xuICAgIHRoaXMuX2NoZWNrU3RyaW5nUmVxdWlyZWRGaWVsZChcIm5hbWVcIiwgbmFtZSk7XG4gICAgdGhpcy5fY2hlY2tTdHJpbmdSZXF1aXJlZEZpZWxkKFwiaW1hZ2VJZFwiLCBpbWFnZUlkKTtcbiAgICB0aGlzLl9jaGVja1N0cmluZ1JlcXVpcmVkRmllbGQoXCJmbGF2b3JJZFwiLCBmbGF2b3JJZCk7XG5cbiAgICAvLyBtaW4gc2VydmVyIGNvbmZpZ1xuICAgIGNvbnN0IHNlcnZlck1pbmkgPSB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgaW1hZ2VSZWY6IGltYWdlSWQsXG4gICAgICBmbGF2b3JSZWY6IGZsYXZvcklkLFxuICAgIH07XG5cbiAgICAvLyBtYWtlIHRoZSBhcGkgY2FsbFxuICAgIHJldHVybiBhd2FpdCB0aGlzLl9vcGVuc3RhY2tDYWxsKFxuICAgICAgcmVnaW9uSWQsXG4gICAgICBcImNvbXB1dGVcIixcbiAgICAgIFwiUE9TVFwiLFxuICAgICAgYC9zZXJ2ZXJzYCxcbiAgICAgIHRydWUsXG4gICAgICBcInNlcnZlclwiLFxuICAgICAgZGVlcE1lcmdlKHNlcnZlck1pbmksIHNlcnZlciksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSBhIGNvbXB1dGUgc2VydmVyIGJ5IGl0cyBJRC5cbiAgICogRm9yIHRoZSByZXNwb25zZSB0eXBlIEBzZWUgaHR0cHM6Ly9kb2NzLm9wZW5zdGFjay5vcmcvYXBpLXJlZi9jb21wdXRlLz9leHBhbmRlZD1saXN0LXNlcnZlcnMtZGV0YWlsLHNob3ctc2VydmVyLWRldGFpbHMtZGV0YWlsI2lkMzBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbklkIE9wZW5zdGFjayByZWdpb24gaWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZlcklkIE9wZW5zdGFjayBzZXJ2ZXIgSURcbiAgICogQHJldHVybnMge1Byb21pc2U8U2VydmVyPn0gQ3JlYXRlZCBzZXJ2ZXJcbiAgICogQHRocm93cyB7T3BlblN0YWNrRXJyb3J9XG4gICAqL1xuICBhc3luYyBnZXRDb21wdXRlU2VydmVyKHJlZ2lvbklkLCBzZXJ2ZXJJZCkge1xuICAgIC8vIGNoZWNrIHBhcmFtc1xuICAgIHRoaXMuX2NoZWNrU3RyaW5nUmVxdWlyZWRGaWVsZChcInNlcnZlcklkXCIsIHNlcnZlcklkKTtcbiAgICAvLyBtYWtlIHRoZSBhcGkgY2FsbFxuICAgIHJldHVybiBhd2FpdCB0aGlzLl9vcGVuc3RhY2tDYWxsKHJlZ2lvbklkLCBcImNvbXB1dGVcIiwgXCJHRVRcIiwgYC9zZXJ2ZXJzLyR7c2VydmVySWR9YCwgdHJ1ZSwgXCJzZXJ2ZXJcIik7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgYSBjb21wdXRlIHNlcnZlciBpcC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbklkIE9wZW5zdGFjayByZWdpb24gaWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZlcklkIE9wZW5zdGFjayBzZXJ2ZXIgSURcbiAgICogQHJldHVybnMge1Byb21pc2U8QXJyYXk8QWRkcmVzc2VzPj59IExpdHMgb2YgaXAgYWRkcmVzc2VzXG4gICAqIEB0aHJvd3Mge09wZW5TdGFja0Vycm9yfVxuICAgKi9cbiAgYXN5bmMgZ2V0Q29tcHV0ZVNlcnZlcklwKHJlZ2lvbklkLCBzZXJ2ZXJJZCkge1xuICAgIC8vIGNoZWNrIHBhcmFtc1xuICAgIHRoaXMuX2NoZWNrU3RyaW5nUmVxdWlyZWRGaWVsZChcInNlcnZlcklkXCIsIHNlcnZlcklkKTtcbiAgICAvLyBtYWtlIHRoZSBhcGkgY2FsbFxuICAgIHJldHVybiBhd2FpdCB0aGlzLl9vcGVuc3RhY2tDYWxsKHJlZ2lvbklkLCBcImNvbXB1dGVcIiwgXCJHRVRcIiwgYC9zZXJ2ZXJzLyR7c2VydmVySWR9L2lwc2AsIHRydWUsIFwiYWRkcmVzc2VzXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIGNvbXB1dGUgc2VydmVyIGJ5IGl0cyBJRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbklkIE9wZW5zdGFjayByZWdpb24gaWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZlcklkIE9wZW5zdGFjayBzZXJ2ZXIgSURcbiAgICogQHRocm93cyB7T3BlblN0YWNrRXJyb3J9XG4gICAqL1xuICBhc3luYyBkZWxldGVDb21wdXRlU2VydmVyKHJlZ2lvbklkLCBzZXJ2ZXJJZCkge1xuICAgIC8vIGNoZWNrIHBhcmFtc1xuICAgIHRoaXMuX2NoZWNrU3RyaW5nUmVxdWlyZWRGaWVsZChcInNlcnZlcklkXCIsIHNlcnZlcklkKTtcbiAgICAvLyBtYWtlIHRoZSBhcGkgY2FsbFxuICAgIGF3YWl0IHRoaXMuX29wZW5zdGFja0NhbGwocmVnaW9uSWQsIFwiY29tcHV0ZVwiLCBcIkRFTEVURVwiLCBgL3NlcnZlcnMvJHtzZXJ2ZXJJZH1gLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb21zIHRoZSBhY3Rpb24gb24gdGhlIGNvbXB1dGUgc2VydmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaW9uSWQgT3BlbnN0YWNrIHJlZ2lvbiBpZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VydmVySWQgT3BlbnN0YWNrIGNvbXB1dGUgc2VydmVyIGlkXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBhY3Rpb25Cb2R5IFRoZSBhY3Rpb24gYm9keSB0byBhZGQgdG8gdGhlIEFQSSBjYWxsXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgYWN0aW9uIGlzIG5vdCBwZXJmb3JtZWRcbiAgICovXG4gIGFzeW5jIGFjdGlvbkNvbXB1dGVTZXJ2ZXIocmVnaW9uSWQsIHNlcnZlcklkLCBhY3Rpb25Cb2R5KSB7XG4gICAgLy8gY2hlY2sgcGFyYW1zXG4gICAgdGhpcy5fY2hlY2tTdHJpbmdSZXF1aXJlZEZpZWxkKFwic2VydmVySWRcIiwgc2VydmVySWQpO1xuXG4gICAgLy8gbWFrZSB0aGUgYXBpIGNhbGxcbiAgICBjb25zdCB1cmwgPSB0aGlzLl9maW5kRW5kcG9pbnQoXCJjb21wdXRlXCIsIHJlZ2lvbklkLCBcInB1YmxpY1wiKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5fY2FsbEFwaShgJHt1cmx9L3NlcnZlcnMvJHtzZXJ2ZXJJZH0vYWN0aW9uYCwgXCJQT1NUXCIsIHRydWUsIGFjdGlvbkJvZHkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGV4ZWMgYWN0aW9uICR7YWN0aW9uQm9keX0gb24gc2VydmVyICR7c2VydmVySWR9OiAke2UubWVzc2FnZX1gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzdGFydENvbXB1dGVTZXJ2ZXIocmVnaW9uSWQsIHNlcnZlcklkKSB7XG4gICAgYXdhaXQgdGhpcy5hY3Rpb25Db21wdXRlU2VydmVyKHJlZ2lvbklkLCBzZXJ2ZXJJZCwgeyBcIm9zLXN0YXJ0XCI6IG51bGwgfSk7XG4gIH1cblxuICBhc3luYyBzdG9wQ29tcHV0ZVNlcnZlcihyZWdpb25JZCwgc2VydmVySWQpIHtcbiAgICBhd2FpdCB0aGlzLmFjdGlvbkNvbXB1dGVTZXJ2ZXIocmVnaW9uSWQsIHNlcnZlcklkLCB7IFwib3Mtc3RvcFwiOiBudWxsIH0pO1xuICB9XG5cbiAgYXN5bmMgcmVib290Q29tcHV0ZVNlcnZlcihyZWdpb25JZCwgc2VydmVySWQsIHJlYm9vdFR5cGUgPSBcIlNPRlRcIikge1xuICAgIGF3YWl0IHRoaXMuYWN0aW9uQ29tcHV0ZVNlcnZlcihyZWdpb25JZCwgc2VydmVySWQsIHtcbiAgICAgIHJlYm9vdDogeyB0eXBlOiByZWJvb3RUeXBlIH0sXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBzdXNwZW5kQ29tcHV0ZVNlcnZlcihyZWdpb25JZCwgc2VydmVySWQpIHtcbiAgICBhd2FpdCB0aGlzLmFjdGlvbkNvbXB1dGVTZXJ2ZXIocmVnaW9uSWQsIHNlcnZlcklkLCB7IHN1c3BlbmQ6IG51bGwgfSk7XG4gIH1cblxuICBhc3luYyByZXN1bWVDb21wdXRlU2VydmVyKHJlZ2lvbklkLCBzZXJ2ZXJJZCkge1xuICAgIGF3YWl0IHRoaXMuYWN0aW9uQ29tcHV0ZVNlcnZlcihyZWdpb25JZCwgc2VydmVySWQsIHsgcmVzdW1lOiBudWxsIH0pO1xuICB9XG5cbiAgYXN5bmMgcGF1c2VDb21wdXRlU2VydmVyKHJlZ2lvbklkLCBzZXJ2ZXJJZCkge1xuICAgIGF3YWl0IHRoaXMuYWN0aW9uQ29tcHV0ZVNlcnZlcihyZWdpb25JZCwgc2VydmVySWQsIHsgcGF1c2U6IG51bGwgfSk7XG4gIH1cblxuICBhc3luYyB1bnBhdXNlQ29tcHV0ZVNlcnZlcihyZWdpb25JZCwgc2VydmVySWQpIHtcbiAgICBhd2FpdCB0aGlzLmFjdGlvbkNvbXB1dGVTZXJ2ZXIocmVnaW9uSWQsIHNlcnZlcklkLCB7IHVucGF1c2U6IG51bGwgfSk7XG4gIH1cblxuICAvL1xuICAvLyB+fn4gTkVUV09SSyAobmV1dHJvbiktIE5ldHdvcmtzIChodHRwczovL2RvY3Mub3BlbnN0YWNrLm9yZy9hcGktcmVmL25ldHdvcmsvdjIvaW5kZXguaHRtbCNuZXR3b3Jrcykgfn5+XG4gIC8vXG5cbiAgLyoqXG4gICAqIEdldCBhbGwgdGhlIG5ldHdvcmtzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaW9uSWQgT3BlbnN0YWNrIHJlZ2lvbiBpZFxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBPcHRpb25zIGZvciBxdWVyeWluZyBuZXR3b3Jrcy5cbiAgICogQHJldHVybnMge1Byb21pc2U8QXJyYXk8TmV0d29yaz4+fVxuICAgKiBAdGhyb3dzIHtPcGVuU3RhY2tFcnJvcn1cbiAgICovXG4gIGFzeW5jIGdldE5ldHdvcmtOZXR3b3JrcyhyZWdpb25JZCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgbmV0d29ya3MgPSBhd2FpdCB0aGlzLl9vcGVuc3RhY2tDYWxsKFxuICAgICAgcmVnaW9uSWQsXG4gICAgICBcIm5ldHdvcmtcIixcbiAgICAgIFwiR0VUXCIsXG4gICAgICBgL3YyLjAvbmV0d29ya3Mke2pzb25Ub1F1ZXJ5U3RyaW5nKG9wdGlvbnMpfWAsXG4gICAgICB0cnVlLFxuICAgICAgXCJuZXR3b3Jrc1wiLFxuICAgICk7XG4gICAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgbmV0d29ya3MubWFwKG5ldHdvcmsgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXROZXR3b3JrTmV0d29yayhyZWdpb25JZCwgbmV0d29yay5pZCk7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIG5ldHdvcmsgYnkgaXRzIGlkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaW9uSWQgT3BlbnN0YWNrIHJlZ2lvbiBpZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV0d29ya0lkIE9wZW5TdGFjayBuZXR3b3JrIGlkXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE5ldHdvcms+fVxuICAgKiBAdGhyb3dzIHtPcGVuU3RhY2tFcnJvcn1cbiAgICovXG4gIGFzeW5jIGdldE5ldHdvcmtOZXR3b3JrKHJlZ2lvbklkLCBuZXR3b3JrSWQpIHtcbiAgICAvLyBjaGVjayBwYXJhbXNcbiAgICB0aGlzLl9jaGVja1N0cmluZ1JlcXVpcmVkRmllbGQoXCJuZXR3b3JrSWRcIiwgbmV0d29ya0lkKTtcbiAgICAvLyBtYWtlIGFwaSBjYWxsXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuX29wZW5zdGFja0NhbGwocmVnaW9uSWQsIFwibmV0d29ya1wiLCBcIkdFVFwiLCBgL3YyLjAvbmV0d29ya3MvJHtuZXR3b3JrSWR9YCwgdHJ1ZSwgXCJuZXR3b3JrXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldHdvcmsuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpb25JZCBPcGVuc3RhY2sgcmVnaW9uIGlkXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXR3b3JrIE9wZW5TdGFjayBuZXR3b3JrIG9iamVjdCAoQHNlZSBodHRwczovL2RvY3Mub3BlbnN0YWNrLm9yZy9hcGktcmVmL25ldHdvcmsvdjIvaW5kZXguaHRtbD9leHBhbmRlZD1jcmVhdGUtbmV0d29yay1kZXRhaWwjaWQyMilcbiAgICogQHJldHVybnMge1Byb21pc2U8TmV0d29yaz59XG4gICAqIEB0aHJvd3Mge09wZW5TdGFja0Vycm9yfVxuICAgKi9cbiAgYXN5bmMgY3JlYXRlTmV0d29ya05ldHdvcmsocmVnaW9uSWQsIG5ldHdvcmspIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5fb3BlbnN0YWNrQ2FsbChyZWdpb25JZCwgXCJuZXR3b3JrXCIsIFwiUE9TVFwiLCBgL3YyLjAvbmV0d29ya3NgLCB0cnVlLCBcIm5ldHdvcmtcIiwgbmV0d29yayk7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgbmV0d29yay5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbklkIE9wZW5zdGFjayByZWdpb24gaWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ldHdvcmtJZCBPcGVuU3RhY2sgbmV0d29yayBpZFxuICAgKiBAdGhyb3dzIHtPcGVuU3RhY2tFcnJvcn1cbiAgICovXG4gIGFzeW5jIGRlbGV0ZU5ldHdvcmtOZXR3b3JrKHJlZ2lvbklkLCBuZXR3b3JrSWQpIHtcbiAgICBhd2FpdCB0aGlzLl9vcGVuc3RhY2tDYWxsKHJlZ2lvbklkLCBcIm5ldHdvcmtcIiwgXCJERUxFVEVcIiwgYC92Mi4wL25ldHdvcmtzLyR7bmV0d29ya0lkfWAsIHRydWUpO1xuICB9XG5cbiAgLy9cbiAgLy8gfn5+IE5FVFdPUksgKG5ldXRyb24pLSBTdWJuZXRzIH5+flxuICAvLyBAc2VlIGh0dHBzOi8vZG9jcy5vcGVuc3RhY2sub3JnL2FwaS1yZWYvbmV0d29yay92Mi9pbmRleC5odG1sI3N1Ym5ldHNcbiAgLy9cblxuICAvKipcbiAgICogR2V0IGFsbCB0aGUgc3VibmV0cy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbklkIE9wZW5zdGFjayByZWdpb24gaWRcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgT3B0aW9ucyBmb3IgcXVlcnlpbmcgc3VibmV0cy5cbiAgICogQHJldHVybnMge1Byb21pc2U8QXJyYXk8U3VibmV0Pj59XG4gICAqIEB0aHJvd3Mge09wZW5TdGFja0Vycm9yfVxuICAgKi9cbiAgYXN5bmMgZ2V0TmV0d29ya1N1Ym5ldHMocmVnaW9uSWQsIG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLl9vcGVuc3RhY2tDYWxsKFxuICAgICAgcmVnaW9uSWQsXG4gICAgICBcIm5ldHdvcmtcIixcbiAgICAgIFwiR0VUXCIsXG4gICAgICBgL3YyLjAvc3VibmV0cyR7anNvblRvUXVlcnlTdHJpbmcob3B0aW9ucyl9YCxcbiAgICAgIHRydWUsXG4gICAgICBcInN1Ym5ldHNcIixcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIHN1Ym5ldCBieSBpdHMgaWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpb25JZCBPcGVuc3RhY2sgcmVnaW9uIGlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdWJuZXRJZCBPcGVuU3RhY2sgc3VibmV0IGlkXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFN1Ym5ldD59XG4gICAqIEB0aHJvd3Mge09wZW5TdGFja0Vycm9yfVxuICAgKi9cbiAgYXN5bmMgZ2V0TmV0d29ya1N1Ym5ldChyZWdpb25JZCwgc3VibmV0SWQpIHtcbiAgICAvLyBjaGVjayBwYXJhbXNcbiAgICB0aGlzLl9jaGVja1N0cmluZ1JlcXVpcmVkRmllbGQoXCJzdWJuZXRJZFwiLCBzdWJuZXRJZCk7XG4gICAgLy8gbWFrZSBhcGkgY2FsbFxuICAgIHJldHVybiBhd2FpdCB0aGlzLl9vcGVuc3RhY2tDYWxsKHJlZ2lvbklkLCBcIm5ldHdvcmtcIiwgXCJHRVRcIiwgYC92Mi4wL3N1Ym5ldHMvJHtzdWJuZXRJZH1gLCB0cnVlLCBcInN1Ym5ldFwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBzdWJuZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpb25JZCBPcGVuc3RhY2sgcmVnaW9uIGlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXR3b3JrSWQgT3BlbnN0YWNrIG5ldHdvcmtJZCBmb3IgdGhlIHN1Ym5ldFxuICAgKiBAcGFyYW0ge3N0cmluZ30gaXBWZXJzaW9uIE9wZW5zdGFjayBpcFZlcnNpb24gZm9yIHRoZSBzdWJuZXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNpZHIgT3BlbnN0YWNrIGNpZHIgZm9yIHRoZSBzdWJuZXRcbiAgICogQHBhcmFtIHtvYmplY3R9IHN1Ym5ldCBPcGVuU3RhY2sgc3VibmV0IG9iamVjdC5cbiAgICogQHJldHVybnMge1Byb21pc2U8U3VibmV0Pn1cbiAgICogQHRocm93cyB7T3BlblN0YWNrRXJyb3J9XG4gICAqL1xuICBhc3luYyBjcmVhdGVOZXR3b3JrU3VibmV0KHJlZ2lvbklkLCBuZXR3b3JrSWQsIGlwVmVyc2lvbiwgY2lkciwgc3VibmV0KSB7XG4gICAgLy8gY2hlY2sgcGFyYW1zXG4gICAgdGhpcy5fY2hlY2tTdHJpbmdSZXF1aXJlZEZpZWxkKFwibmV0d29ya0lkXCIsIG5ldHdvcmtJZCk7XG4gICAgLy8gbWFrZSBhcGkgY2FsbFxuICAgIHJldHVybiBhd2FpdCB0aGlzLl9vcGVuc3RhY2tDYWxsKFxuICAgICAgcmVnaW9uSWQsXG4gICAgICBcIm5ldHdvcmtcIixcbiAgICAgIFwiUE9TVFwiLFxuICAgICAgYC92Mi4wL3N1Ym5ldHNgLFxuICAgICAgdHJ1ZSxcbiAgICAgIFwic3VibmV0XCIsXG4gICAgICBkZWVwTWVyZ2UoeyBuZXR3b3JrX2lkOiBuZXR3b3JrSWQsIGlwX3ZlcnNpb246IGlwVmVyc2lvbiwgY2lkcjogY2lkciB9LCBzdWJuZXQpLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgc3VibmV0IGJ5IGl0cyBpZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbklkIE9wZW5zdGFjayByZWdpb24gaWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN1Ym5ldElkIE9wZW5TdGFjayBzdWJuZXQgaWRcbiAgICogQHRocm93cyB7T3BlblN0YWNrRXJyb3J9XG4gICAqL1xuICBhc3luYyBkZWxldGVOZXR3b3JrU3VibmV0KHJlZ2lvbklkLCBzdWJuZXRJZCkge1xuICAgIC8vIGNoZWNrIHBhcmFtc1xuICAgIHRoaXMuX2NoZWNrU3RyaW5nUmVxdWlyZWRGaWVsZChcInN1Ym5ldElkXCIsIHN1Ym5ldElkKTtcbiAgICAvLyBtYWtlIGFwaSBjYWxsXG4gICAgYXdhaXQgdGhpcy5fb3BlbnN0YWNrQ2FsbChyZWdpb25JZCwgXCJuZXR3b3JrXCIsIFwiREVMRVRFXCIsIGAvdjIuMC9zdWJuZXRzLyR7c3VibmV0SWR9YCwgdHJ1ZSwgXCJzdWJuZXRcIik7XG4gIH1cblxuICAvL1xuICAvLyB+fn4gTkVUV09SSyAobmV1dHJvbiktIFNlY3VyaXR5IGdyb3VwICB+fn5cbiAgLy8gQHNlZSBodHRwczovL2RvY3Mub3BlbnN0YWNrLm9yZy9hcGktcmVmL25ldHdvcmsvdjIvaW5kZXguaHRtbCNzZWN1cml0eS1ncm91cHMtc2VjdXJpdHktZ3JvdXBzXG4gIC8vXG5cbiAgLyoqXG4gICAqIEdldCBhbGwgc2VjdXJpdHkgZ3JvdXBzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpb25JZCBPcGVuc3RhY2sgcmVnaW9uIGlkXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIE9wdGlvbnMgZm9yIHF1ZXJ5aW5nXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5PFNlY3VyaXR5R3JvdXA+Pn1cbiAgICogQHRocm93cyB7T3BlblN0YWNrRXJyb3J9XG4gICAqL1xuICBhc3luYyBnZXROZXR3b3JrU2VjdXJpdHlHcm91cHMocmVnaW9uSWQsIG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLl9vcGVuc3RhY2tDYWxsKFxuICAgICAgcmVnaW9uSWQsXG4gICAgICBcIm5ldHdvcmtcIixcbiAgICAgIFwiR0VUXCIsXG4gICAgICBgL3YyLjAvc2VjdXJpdHktZ3JvdXBzJHtqc29uVG9RdWVyeVN0cmluZyhvcHRpb25zKX1gLFxuICAgICAgdHJ1ZSxcbiAgICAgIFwic2VjdXJpdHlfZ3JvdXBzXCIsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBzZWN1cml0eSBncm91cCBieSBpdHMgaWRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbklkIE9wZW5zdGFjayByZWdpb24gaWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlY3VyaXR5R3JvdXBJZCBPcGVuc3RhY2sgc2VjdXJpdHkgZ3JvdXAgaWRcbiAgICogQHJldHVybnMge1Byb21pc2U8U2VjdXJpdHlHcm91cD59XG4gICAqIEB0aHJvd3Mge09wZW5TdGFja0Vycm9yfVxuICAgKi9cbiAgYXN5bmMgZ2V0TmV0d29ya1NlY3VyaXR5R3JvdXAocmVnaW9uSWQsIHNlY3VyaXR5R3JvdXBJZCkge1xuICAgIC8vIGNoZWNrIHBhcmFtc1xuICAgIHRoaXMuX2NoZWNrU3RyaW5nUmVxdWlyZWRGaWVsZChcInNlY3VyaXR5R3JvdXBJZFwiLCBzZWN1cml0eUdyb3VwSWQpO1xuICAgIC8vIG1ha2UgYXBpIGNhbGxcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5fb3BlbnN0YWNrQ2FsbChcbiAgICAgIHJlZ2lvbklkLFxuICAgICAgXCJuZXR3b3JrXCIsXG4gICAgICBcIkdFVFwiLFxuICAgICAgYC92Mi4wL3NlY3VyaXR5LWdyb3Vwcy8ke3NlY3VyaXR5R3JvdXBJZH1gLFxuICAgICAgdHJ1ZSxcbiAgICAgIFwic2VjdXJpdHlfZ3JvdXBcIixcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIFNlY3VyaXR5IGdyb3VwLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaW9uSWQgT3BlbnN0YWNrIHJlZ2lvbiBpZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBzZWN1cml0eSBncm91cFxuICAgKiBAcGFyYW0ge29iamVjdH0gc2VjdXJpdHlHcm91cCBPcGVuU3RhY2sgU2VjdXJpdHlHcm91cCBvYmplY3QgKEBzZWUgaHR0cHM6Ly9kb2NzLm9wZW5zdGFjay5vcmcvYXBpLXJlZi9uZXR3b3JrL3YyL2luZGV4Lmh0bWw/ZXhwYW5kZWQ9Y3JlYXRlLXNlY3VyaXR5LWdyb3VwLWRldGFpbCNpZDM3MSlcbiAgICogQHJldHVybnMge1Byb21pc2U8U2VjdXJpdHlHcm91cD59XG4gICAqIEB0aHJvd3Mge09wZW5TdGFja0Vycm9yfVxuICAgKi9cbiAgYXN5bmMgY3JlYXRlTmV0d29ya1NlY3VyaXR5R3JvdXAocmVnaW9uSWQsIG5hbWUsIHNlY3VyaXR5R3JvdXAgPSB7fSkge1xuICAgIC8vIGNoZWNrIHBhcmFtc1xuICAgIHRoaXMuX2NoZWNrU3RyaW5nUmVxdWlyZWRGaWVsZChcIm5hbWVcIiwgbmFtZSk7XG4gICAgLy8gbWFrZSBhcGkgY2FsbFxuICAgIHJldHVybiBhd2FpdCB0aGlzLl9vcGVuc3RhY2tDYWxsKFxuICAgICAgcmVnaW9uSWQsXG4gICAgICBcIm5ldHdvcmtcIixcbiAgICAgIFwiUE9TVFwiLFxuICAgICAgYC92Mi4wL3NlY3VyaXR5LWdyb3Vwc2AsXG4gICAgICB0cnVlLFxuICAgICAgXCJzZWN1cml0eV9ncm91cFwiLFxuICAgICAgZGVlcE1lcmdlKHsgbmFtZTogbmFtZSB9LCBzZWN1cml0eUdyb3VwKSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIFNlY3VyaXR5IGdyb3VwLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaW9uSWQgT3BlbnN0YWNrIHJlZ2lvbiBpZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBzZWN1cml0eSBncm91cFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VjdXJpdHlHcm91cElkIE9wZW5zdGFjayBzZWN1cml0eSBncm91cCBpZFxuICAgKiBAdGhyb3dzIHtPcGVuU3RhY2tFcnJvcn1cbiAgICovXG4gIGFzeW5jIGRlbGV0ZU5ldHdvcmtTZWN1cml0eUdyb3VwKHJlZ2lvbklkLCBzZWN1cml0eUdyb3VwSWQpIHtcbiAgICAvLyBjaGVjayBwYXJhbXNcbiAgICB0aGlzLl9jaGVja1N0cmluZ1JlcXVpcmVkRmllbGQoXCJzZWN1cml0eUdyb3VwSWRcIiwgc2VjdXJpdHlHcm91cElkKTtcbiAgICAvLyBtYWtlIGFwaSBjYWxsXG4gICAgYXdhaXQgdGhpcy5fb3BlbnN0YWNrQ2FsbChyZWdpb25JZCwgXCJuZXR3b3JrXCIsIFwiREVMRVRFXCIsIGAvdjIuMC9zZWN1cml0eS1ncm91cHMvJHtzZWN1cml0eUdyb3VwSWR9YCwgdHJ1ZSk7XG4gIH1cblxuICAvL1xuICAvLyB+fn4gTkVUV09SSyAobmV1dHJvbiktIFNlY3VyaXR5IGdyb3VwIHJ1bGVzICB+fn5cbiAgLy8gQHNlZSBodHRwczovL2RvY3Mub3BlbnN0YWNrLm9yZy9hcGktcmVmL25ldHdvcmsvdjIvaW5kZXguaHRtbD8jc2VjdXJpdHktZ3JvdXAtcnVsZXMtc2VjdXJpdHktZ3JvdXAtcnVsZXNcbiAgLy9cblxuICAvKipcbiAgICogQ3JlYXRlIGEgU2VjdXJpdHkgZ3JvdXAgcnVsZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbklkIE9wZW5zdGFjayByZWdpb24gaWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlY3VyaXR5R3JvdXBpZCBPcGVuU3RhY2sgU2VjdXJpdHlHcm91cCBpZFxuICAgKiBAcGFyYW0ge29iamVjdH0gcnVsZSBPcGVuU3RhY2sgU2VjdXJpdHlHcm91cFJ1bGUgb2JqZWN0IChAc2VlIGh0dHBzOi8vZG9jcy5vcGVuc3RhY2sub3JnL2FwaS1yZWYvbmV0d29yay92Mi9pbmRleC5odG1sPyZleHBhbmRlZD1jcmVhdGUtc2VjdXJpdHktZ3JvdXAtcnVsZS1kZXRhaWwjaWQzNTcpXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFNlY3VyaXR5R3JvdXA+fVxuICAgKiBAdGhyb3dzIHtPcGVuU3RhY2tFcnJvcn1cbiAgICovXG4gIGFzeW5jIGNyZWF0ZU5ldHdvcmtTZWN1cml0eUdyb3VwUnVsZShyZWdpb25JZCwgc2VjdXJpdHlHcm91cElkLCBydWxlKSB7XG4gICAgLy8gY2hlY2sgcGFyYW1zXG4gICAgdGhpcy5fY2hlY2tTdHJpbmdSZXF1aXJlZEZpZWxkKFwic2VjdXJpdHlHcm91cElkXCIsIHNlY3VyaXR5R3JvdXBJZCk7XG4gICAgLy8gbWFrZSBhcGkgY2FsbFxuICAgIHJldHVybiBhd2FpdCB0aGlzLl9vcGVuc3RhY2tDYWxsKFxuICAgICAgcmVnaW9uSWQsXG4gICAgICBcIm5ldHdvcmtcIixcbiAgICAgIFwiUE9TVFwiLFxuICAgICAgYC92Mi4wL3NlY3VyaXR5LWdyb3VwLXJ1bGVzYCxcbiAgICAgIHRydWUsXG4gICAgICBcInNlY3VyaXR5X2dyb3VwX3J1bGVcIixcbiAgICAgIGRlZXBNZXJnZSh7IHNlY3VyaXR5X2dyb3VwX2lkOiBzZWN1cml0eUdyb3VwSWQgfSwgcnVsZSksXG4gICAgKTtcbiAgfVxuXG4gIC8vXG4gIC8vIH5+fiAnSFlQSEUnIFNQRUNJRklDIE1FVEhPRFMgIH5+flxuICAvL1xuXG4gIC8qKlxuICAgKiBEZXBsb3kgYSBoeXBoZSBpbnN0YW5jZS5cbiAgICogSW4gdGhlIGNvbmZpZyBvYmplY3QgOlxuICAgKiAgLSBpbWFnZSBpcyB0aGUgbmFtZSBvZiB0aGUgaW1hZ2VcbiAgICogIC0gZmxhdm9yIGlzIHRoZSBJRCBvZiB0aGUgZmxhdm9yXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpb25JZCBPcGVuc3RhY2sgcmVnaW9uIGlkXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgQ29uZmlndXJhdGlvbiBvYmplY3QgYHsgaW1hZ2U6IHN0cmluZywgZmxhdm9yOiBzdHJpbmcsIHNzaDoge25hbWU6IHN0cmluZywga2V5Pzogc3RyaW5nfSwgZGlzaz86IG51bWJlciwgc2VydmVyTmFtZT86IHN0cmluZywgaHlwaGVfY29uZmlnOntba2V5OnN0cmluZ106YW55fSB9YFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTZXJ2ZXI+fSBDcmVhdGVkIHNlcnZlciAoQHNlZSBodHRwczovL2RvY3Mub3BlbnN0YWNrLm9yZy9hcGktcmVmL2NvbXB1dGUvP2V4cGFuZGVkPWNyZWF0ZS1zZXJ2ZXItZGV0YWlsLGxpc3Qtc2VydmVycy1kZXRhaWwsbGlzdC1mbGF2b3JzLWRldGFpbCxsaXN0LWtleXBhaXJzLWRldGFpbCxhZGQtYXNzb2NpYXRlLWZsb2F0aW5nLWlwLWFkZGZsb2F0aW5naXAtYWN0aW9uLWRlcHJlY2F0ZWQtZGV0YWlsLHBhdXNlLXNlcnZlci1wYXVzZS1hY3Rpb24tZGV0YWlsLHJlYm9vdC1zZXJ2ZXItcmVib290LWFjdGlvbi1kZXRhaWwjaWQxMiApXG4gICAqIEB0aHJvd3Mge09wZW5TdGFja0Vycm9yfVxuICAgKi9cbiAgYXN5bmMgaHlwaGVEZXBsb3kocmVnaW9uSWQsIGNvbmZpZykge1xuICAgIC8vIENoZWNraW5nIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgdGhpcy5fY2hlY2tTdHJpbmdSZXF1aXJlZEZpZWxkKFwiaW1hZ2UgaW4gY29uZmlnXCIsIGNvbmZpZy5pbWFnZSk7XG4gICAgdGhpcy5fY2hlY2tTdHJpbmdSZXF1aXJlZEZpZWxkKFwiZmxhdm9yIGluIGNvbmZpZ1wiLCBjb25maWcuZmxhdm9yKTtcbiAgICB0aGlzLl9jaGVja1N0cmluZ1JlcXVpcmVkRmllbGQoXCJzc2ggbmFtZSBpbiBjb25maWdcIiwgY29uZmlnLnNzaC5uYW1lKTtcblxuICAgIC8vIFN0ZXAgMSA6IFNlYXJjaGluZyBpbWFnZSBmcm9tIHRoZSBuYW1lXG4gICAgY29uc3QgaW1hZ2VzID0gYXdhaXQgdGhpcy5nZXRJbWFnZXMocmVnaW9uSWQsIHsgbmFtZTogY29uZmlnLmltYWdlIH0pO1xuICAgIGNvbnN0IGltYWdlID0gaW1hZ2VzLnNoaWZ0KCk7XG4gICAgaWYgKCFpbWFnZSkge1xuICAgICAgdGhyb3cgbmV3IE9wZW5TdGFja0Vycm9yKGBGYWlsIHRvIGZpbmQgaW1hZ2Ugd2l0aCBuYW1lICR7Y29uZmlnLmltYWdlfWApO1xuICAgIH1cblxuICAgIC8vIFN0ZXAgMiA6IFNlYXJjaGluZyB0aGUgZmxhdm9yXG4gICAgY29uc3QgZmxhdm9yID0gYXdhaXQgdGhpcy5nZXRDb21wdXRlRmxhdm9yKHJlZ2lvbklkLCBjb25maWcuZmxhdm9yKTtcbiAgICBpZiAoIWZsYXZvcikge1xuICAgICAgdGhyb3cgbmV3IE9wZW5TdGFja0Vycm9yKGBGYWlsIHRvIGZpbmQgZmxhdm9yIHdpdGggbmFtZSAke2NvbmZpZy5mbGF2b3J9YCk7XG4gICAgfVxuICAgIGlmIChmbGF2b3IuZGlzayA9PT0gMCAmJiAhY29uZmlnLmRpc2spIHtcbiAgICAgIHRocm93IG5ldyBPcGVuU3RhY2tFcnJvcihgRmllbGQgZGlzayBpbiBjb25maWcgaXMgcmVxdWlyZWQgd2hlbiBhIGZsYXZvciBoYXMgbm8gZGlza2ApO1xuICAgIH1cblxuICAgIC8vIFN0ZXAgMyA6IENyZWF0ZSBTU0gga2V5IGlmIG5lZWRlZFxuICAgIGNvbnN0IHNzaEtleXMgPSBhd2FpdCB0aGlzLmdldENvbXB1dGVLZXlwYWlycyhyZWdpb25JZCk7XG4gICAgbGV0IHNzaEtleSA9IHNzaEtleXNcbiAgICAgIC5maWx0ZXIoaXRlbSA9PiB7XG4gICAgICAgIHJldHVybiBpdGVtLm5hbWUgPT09IGNvbmZpZy5zc2gubmFtZTtcbiAgICAgIH0pXG4gICAgICAuc2hpZnQoKTtcbiAgICBpZiAoIXNzaEtleSkge1xuICAgICAgc3NoS2V5ID0gYXdhaXQgdGhpcy5zZXRDb21wdXRlS2V5cGFpcihyZWdpb25JZCwgY29uZmlnLnNzaC5uYW1lLCBjb25maWcuc3NoLmtleSk7XG4gICAgfVxuXG4gICAgLy8gU3RlcCA0IDogY3JlYXRlIGEgc2VjdXJpdHkgZ3JvdXAgd2l0aCB2YWxpZCBydWxlc1xuICAgIGNvbnN0IHNlY3VyaXR5R3JvdXBOYW1lID0gXCJoeXBoZS1zZWN1cml0eS1ydWxlc1wiO1xuICAgIGxldCBzZWN1cml0eUdyb3VwID0gKGF3YWl0IHRoaXMuZ2V0TmV0d29ya1NlY3VyaXR5R3JvdXBzKHJlZ2lvbklkKSlcbiAgICAgIC5maWx0ZXIoZ3JvdXAgPT4ge1xuICAgICAgICByZXR1cm4gZ3JvdXAubmFtZSA9PT0gc2VjdXJpdHlHcm91cE5hbWU7XG4gICAgICB9KVxuICAgICAgLnNoaWZ0KCk7XG4gICAgaWYgKCFzZWN1cml0eUdyb3VwKSB7XG4gICAgICBzZWN1cml0eUdyb3VwID0gYXdhaXQgdGhpcy5jcmVhdGVOZXR3b3JrU2VjdXJpdHlHcm91cChyZWdpb25JZCwgc2VjdXJpdHlHcm91cE5hbWUpO1xuICAgICAgLy8gQ3JlYXRlIFNlY3VyaXR5IHJ1bGVzXG4gICAgICBhd2FpdCB0aGlzLmNyZWF0ZU5ldHdvcmtTZWN1cml0eUdyb3VwUnVsZShyZWdpb25JZCwgc2VjdXJpdHlHcm91cC5pZCwge1xuICAgICAgICBkaXJlY3Rpb246IFwiaW5ncmVzc1wiLFxuICAgICAgICBwb3J0X3JhbmdlX21pbjogXCI4MFwiLFxuICAgICAgICBldGhlcnR5cGU6IFwiSVB2NFwiLFxuICAgICAgICBwb3J0X3JhbmdlX21heDogXCI4MVwiLFxuICAgICAgICBwcm90b2NvbDogXCJ0Y3BcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiaHR0cFwiLFxuICAgICAgfSk7XG4gICAgICBhd2FpdCB0aGlzLmNyZWF0ZU5ldHdvcmtTZWN1cml0eUdyb3VwUnVsZShyZWdpb25JZCwgc2VjdXJpdHlHcm91cC5pZCwge1xuICAgICAgICBkaXJlY3Rpb246IFwiaW5ncmVzc1wiLFxuICAgICAgICBwb3J0X3JhbmdlX21pbjogXCI0NDNcIixcbiAgICAgICAgZXRoZXJ0eXBlOiBcIklQdjRcIixcbiAgICAgICAgcG9ydF9yYW5nZV9tYXg6IFwiNDQzXCIsXG4gICAgICAgIHByb3RvY29sOiBcInRjcFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJodHRwc1wiLFxuICAgICAgfSk7XG4gICAgICBhd2FpdCB0aGlzLmNyZWF0ZU5ldHdvcmtTZWN1cml0eUdyb3VwUnVsZShyZWdpb25JZCwgc2VjdXJpdHlHcm91cC5pZCwge1xuICAgICAgICBkaXJlY3Rpb246IFwiaW5ncmVzc1wiLFxuICAgICAgICBwb3J0X3JhbmdlX21pbjogXCIyMlwiLFxuICAgICAgICBldGhlcnR5cGU6IFwiSVB2NFwiLFxuICAgICAgICBwb3J0X3JhbmdlX21heDogXCIyMlwiLFxuICAgICAgICBwcm90b2NvbDogXCJ0Y3BcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwic3NoXCIsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBTdGVwIDUgOiBTaGVsbCBzY3JpcHRcbiAgICBsZXQgZGVwbG95U2NyaXB0ID0gc2NyaXB0O1xuICAgIGlmIChjb25maWcuaHlwaGVfY29uZmlnKSB7XG4gICAgICBjb25zdCBoeXBoZUNvbmZpZyA9IE9iamVjdC5rZXlzKGNvbmZpZy5oeXBoZV9jb25maWcpXG4gICAgICAgIC5tYXAoa2V5ID0+IHtcbiAgICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgICByZXR1cm4gYGVjaG8gXCIke2tleX09JHtjb25maWcuaHlwaGVfY29uZmlnW2tleV0ucmVwbGFjZSgvXCIvZywgJ1xcXFxcXFwiJyl9XCIgPj4gaHlwaGUuZW52YDsgLyogZXNsaW50LWRpc2FibGUtbGluZSAqL1xuICAgICAgICB9KVxuICAgICAgICAuam9pbihcIlxcblwiKTtcbiAgICAgIGRlcGxveVNjcmlwdCA9IHNjcmlwdC5yZXBsYWNlKFwiIyBAQF9IWVBIRV9DT05GSUdfQEBcIiwgaHlwaGVDb25maWcpO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbnRlbnQ2NCA9IEJ1ZmZlci5mcm9tKGRlcGxveVNjcmlwdCkudG9TdHJpbmcoXCJiYXNlNjRcIik7XG5cbiAgICAvLyBTdGVwIDYgOiBDcmVhdGUgdGhlIHNlcnZlclxuICAgIGxldCBvcHRpb25zID0ge1xuICAgICAga2V5X25hbWU6IHNzaEtleS5uYW1lLFxuICAgICAgdXNlcl9kYXRhOiBjb250ZW50NjQsXG4gICAgICBzZWN1cml0eV9ncm91cHM6IFt7IG5hbWU6IHNlY3VyaXR5R3JvdXAubmFtZSB9XSxcbiAgICB9O1xuICAgIGlmIChmbGF2b3IuZGlzayA9PT0gMCkge1xuICAgICAgb3B0aW9uc1tcImJsb2NrX2RldmljZV9tYXBwaW5nX3YyXCJdID0gW1xuICAgICAgICB7XG4gICAgICAgICAgdXVpZDogaW1hZ2UuaWQsXG4gICAgICAgICAgc291cmNlX3R5cGU6IFwiaW1hZ2VcIixcbiAgICAgICAgICBkZXN0aW5hdGlvbl90eXBlOiBcInZvbHVtZVwiLFxuICAgICAgICAgIGJvb3RfaW5kZXg6IDAsXG4gICAgICAgICAgdm9sdW1lX3NpemU6IGNvbmZpZy5kaXNrLFxuICAgICAgICAgIGRlbGV0ZV9vbl90ZXJtaW5hdGlvbjogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIF07XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLmNyZWF0ZUNvbXB1dGVTZXJ2ZXIocmVnaW9uSWQsIGNvbmZpZy5zZXJ2ZXJOYW1lIHx8IFwiaHlwaGUtc2VydmVyXCIsIGltYWdlLmlkLCBmbGF2b3IuaWQsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIGh5cGhlIHNlcnZlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbklkIE9wZW5zdGFjayByZWdpb24gaWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZlcklkIFRoZSBvcGVuc3RhY2sgaWQgb2YgdGhlIHNlcnZlclxuICAgKiBAdGhyb3dzIHtPcGVuU3RhY2tFcnJvcn1cbiAgICovXG4gIGFzeW5jIGh5cGhlRGVsZXRlU2VydmVyKHJlZ2lvbklkLCBzZXJ2ZXJJZCkge1xuICAgIGNvbnN0IHNlcnZlciA9IGF3YWl0IHRoaXMuZ2V0Q29tcHV0ZVNlcnZlcihyZWdpb25JZCwgc2VydmVySWQpO1xuICAgIGlmICghc2VydmVyKSB7XG4gICAgICB0aHJvdyBuZXcgT3BlblN0YWNrRXJyb3IoYEZhaWwgdG8gZmluZCBzZXJ2ZXIgd2l0aCBpZCAke3NlcnZlcklkfWApO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLmRlbGV0ZUNvbXB1dGVTZXJ2ZXIocmVnaW9uSWQsIHNlcnZlcklkKTtcbiAgfVxuXG4gIC8vXG4gIC8vIH5+fiAnUFJJVkFURScgTUVUSE9EUyAgfn5+XG4gIC8vXG5cbiAgLyoqXG4gICAqIEdlbmVyaWMgbWV0aG9kIHRvIGV4Y2hhbmdlIHdpdGggdGhlIG9wZW5zdGFjayBBUEkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpb25JZCBPcGVuc3RhY2sgcmVnaW9uIGlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZXJ2aWNlIE9wZW5zdGFjayBzZXJ2aWNlIG5hbWUgKGllLiBjb21wdXRlLCBzZXJ2ZXIsIC4uLilcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCBUaGUgaHR0cCBtZXRob2QgdG8gcGVyZm9ybVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBPcGVuU3RhY2sgcGF0aCB0byBjYWxsIGZvciB0aGUgc2VydmljZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGF1dGggSXMgZW5kcG9pbnQgcmVxdWlyZXMgYXV0aCA/XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmplY3ROYW1lIE5hbWUgb2YgdGhlIG9iamVjdCB3ZSBzZW5kIHRvIHRoZSBBUEkgKGFuZCB0aGUgQVBJIHJlc3BvbmQpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmplY3QgVGhlIG9iamVjdCB3ZSBzZW5kIHRvIHRoZSBhcGlcbiAgICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gVGhlIHJlc3BvbnNlIG9mIHRoZSBhcGkgKG9ubHkgd2hhdCB3ZSBuZWVkLCBzbyB0aGUgb2JqZWN0TmFtZSlcbiAgICogQHRocm93cyB7T3BlblN0YWNrRXJyb3J9XG4gICAqL1xuICBhc3luYyBfb3BlbnN0YWNrQ2FsbChyZWdpb25JZCwgc2VydmljZSwgbWV0aG9kLCBwYXRoLCBhdXRoID0gdHJ1ZSwgb2JqZWN0TmFtZSwgb2JqZWN0KSB7XG4gICAgLy8gY2hlY2sgcGFyYW1zXG4gICAgdGhpcy5fY2hlY2tTdHJpbmdSZXF1aXJlZEZpZWxkKFwicmVnaW9uSWRcIiwgcmVnaW9uSWQpO1xuXG4gICAgLy8gZmluZCB0aGUgZW5kcG9pbnRcbiAgICBjb25zdCB1cmwgPSB0aGlzLl9maW5kRW5kcG9pbnQoc2VydmljZSwgcmVnaW9uSWQsIFwicHVibGljXCIpO1xuXG4gICAgLy8gQ29uc3RydWN0IHRoZSBodHRwIGJvZHkgaWYgbmVlZGVkXG4gICAgbGV0IGRhdGE7XG4gICAgaWYgKG9iamVjdE5hbWUgJiYgb2JqZWN0ICE9IHVuZGVmaW5lZCkge1xuICAgICAgZGF0YSA9IHt9O1xuICAgICAgZGF0YVtvYmplY3ROYW1lXSA9IG9iamVjdDtcbiAgICB9XG4gICAgLy8gbWFrZSB0aGUgY2FsbCBhbmQgcGFyc2UgdGhlIHJlc3BvbnNlXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5fY2FsbEFwaShgJHt1cmx9JHtwYXRofWAsIG1ldGhvZCwgYXV0aCwgZGF0YSk7XG4gICAgICBpZiAocmVzcG9uc2UuZGF0YSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YVtvYmplY3ROYW1lXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBPcGVuU3RhY2tFcnJvcihgRmFpbGVkIHRvICR7bWV0aG9kfSBvbiAke3BhdGh9IGZvciBzZXJ2aWNlICR7c2VydmljZX0gYCwgZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgYSBIVFRQIGNhbGwgdGhlIE9wZW5TdGFjayBlbmRwb2ludC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBBUEkgZW5kcG9pbnQgdXJsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgSFRUUCBtZXRob2RcbiAgICogQHBhcmFtIHtib29sZWFufSBhdXRoIElzIGVuZHBvaW50IHJlcXVpcmVzIGF1dGggP1xuICAgKiBAcGFyYW0ge3N0cmluZ30gYm9keSBIVFRQIGJvZHkgb2YgdGhlIGNhbGxcbiAgICogQHJldHVybnMge1Byb21pc2U8QXhpb3NSZXNwb25zZT59IFRoZSBheGlvcyByZXNwb25zZVxuICAgKiBAdGhyb3dzIHtBeGlvc0Vycm9yfSBJZiBhbiBlcnJvciBvY2N1cmVkIChpZS4gdGhlIGNvZGUgaXMgbm90IGEgMjBYKVxuICAgKi9cbiAgYXN5bmMgX2NhbGxBcGkodXJsLCBtZXRob2QsIGF1dGgsIGJvZHkpIHtcbiAgICAvLyBkZWFmdWx0IGhlYWRlclxuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuXG4gICAgLy8gZG8gd2UgbmVlZCBhdXRoZW50aWZpY2F0aW9uID9cbiAgICBpZiAoYXV0aCkge1xuICAgICAgaWYgKCF0aGlzLnRva2VuKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBhdXRoZW50aWNhdGVkXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudG9rZW4uZXhwaXJlZF9hdCA8IERhdGUubm93KCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVG9rZW4gaXMgZXhwaXJlZFwiKTtcbiAgICAgIH1cbiAgICAgIGhlYWRlcnNbXCJYLUF1dGgtVG9rZW5cIl0gPSB0aGlzLnRva2VuLnZhbHVlO1xuICAgIH1cblxuICAgIC8vIG1ha2UgdGhlIGh0dHAgY2FsbFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3Moe1xuICAgICAgdXJsOiB1cmwsXG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICByZXNwb25zZVR5cGU6IFwianNvblwiLFxuICAgICAgZGF0YTogYm9keSxcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cblxuICAvKipcbiAgICogRmluZCB0aGUgZW5kcG9pbnQgdXJsIGZvciB0aGUgc3BlY2lmaWVkIHNlcnZpY2UsIHJlZ2lvbiBhbmQgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VUeXBlIFRoZSBvcGVuc3RhY2sgc2VydmljZSB0eXBlIChpZS4gYG5ldHdvcmtgLCBgY29tcHV0ZWAsIGBpZGVudGl0eWAsIGBpbWFnZWAsIC4uLilcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbklkIFRoZSBpZCBvZiB0aGUgcmVnaW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBpbnRlcmZhY2Ugb2YgdGhlIGVuZHBvaW50IChpZS4gYGludGVybmFsYCwgYGFkbWluYCBvciBgcHVibGljYClcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuZHBvaW50IHVybFxuICAgKiBAdGhyb3dzIHtPcGVuU3RhY2tFcnJvcn1cbiAgICovXG4gIF9maW5kRW5kcG9pbnQoc2VydmljZVR5cGUsIHJlZ2lvbklkLCB0eXBlKSB7XG4gICAgLy8gY2hlY2sgcGFyYW1zXG4gICAgdGhpcy5fY2hlY2tTdHJpbmdSZXF1aXJlZEZpZWxkKFwic2VydmljZVR5cGVcIiwgc2VydmljZVR5cGUpO1xuICAgIHRoaXMuX2NoZWNrU3RyaW5nUmVxdWlyZWRGaWVsZChcInJlZ2lvbklkXCIsIHJlZ2lvbklkKTtcblxuICAgIGlmICghdGhpcy5jYXRhbG9nKSB7XG4gICAgICB0aHJvdyBuZXcgT3BlblN0YWNrRXJyb3IoYENhdGFsb2cgaXMgbWlzc2luZyBvciBlbXB0eS4gRGlkIHlvdSBhdXRoZW50aWNhdGUgP2ApO1xuICAgIH1cblxuICAgIC8vIEdldCB0aGUgZW5kcG9pbnQgbGlzdCBmb3IgdGhlIHNwZWNpZmllZCBzZXJ2aWNlXG4gICAgY29uc3Qgc2VydmljZSA9IHRoaXMuY2F0YWxvZ1xuICAgICAgLmZpbHRlcihzZXJ2aWNlID0+IHtcbiAgICAgICAgcmV0dXJuIHNlcnZpY2UudHlwZSA9PT0gc2VydmljZVR5cGU7XG4gICAgICB9KVxuICAgICAgLnNoaWZ0KCk7XG4gICAgaWYgKCFzZXJ2aWNlKSB7XG4gICAgICB0aHJvdyBuZXcgT3BlblN0YWNrRXJyb3IoYFRoZSBzZXJ2aWNlICcke3NlcnZpY2VUeXBlfScgZG9lc24ndCBleGlzdGApO1xuICAgIH1cblxuICAgIC8vIEZpbmQgdGhlIGVuZHBvaW50IGZvciB0eXBlIGFuZCByZWdpb25JZFxuICAgIGNvbnN0IGVuZHBvaW50ID0gc2VydmljZS5lbmRwb2ludHNcbiAgICAgIC5maWx0ZXIoZW5kcG9pbnQgPT4ge1xuICAgICAgICByZXR1cm4gZW5kcG9pbnQuaW50ZXJmYWNlID09PSB0eXBlICYmIGVuZHBvaW50LnJlZ2lvbl9pZCA9PT0gcmVnaW9uSWQ7XG4gICAgICB9KVxuICAgICAgLnNoaWZ0KCk7XG5cbiAgICBpZiAoIWVuZHBvaW50KSB7XG4gICAgICB0aHJvdyBuZXcgT3BlblN0YWNrRXJyb3IoYFRoZXJlIGlzIG5vICR7cmVnaW9uSWR9IC8gJHt0eXBlfSBlbmRwb2ludCBmb3Igc2VydmljZSAke3NlcnZpY2VUeXBlfWApO1xuICAgIH1cblxuICAgIHJldHVybiBlbmRwb2ludC51cmw7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIG5hbWVkIGZpZWxkICBpcyBudWxsIG9yIGVtcHR5LlxuICAgKiBJZiBzbywgYW4gZXJyb3IgaXMgdGhyb3duLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAgTmFtZSBvZiB0aGUgZmllbGQgKHVzZSBpbiB0aGUgZXJyb3IpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWxlIFZhbHVlIG9mIHRoZSBmaWVsZC5cbiAgICogQHRocm93cyB7T3BlblN0YWNrRXJyb3J9XG4gICAqL1xuICBfY2hlY2tTdHJpbmdSZXF1aXJlZEZpZWxkKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICB0aHJvdyBuZXcgT3BlblN0YWNrRXJyb3IoYEZpZWxkICR7bmFtZX0gaXMgcmVxdWlyZWRgKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9